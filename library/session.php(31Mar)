<?php
include("utility.php");
include("database.php");
include("form.php");
include("validation.php");
include("csrf.php");
class Session
{
	var $username;     //Username given on sign-up
	var $userid;       //Random value generated on current login
	var $userlevel;    //The level to which the user pertains
	var $fullname;
	var $time;         //Time user was last active (page loaded)
	var $logged_in;    //True if user is logged in, false otherwise
	var $userinfo = array();  //The array holding all user info
	/**
	* Note: referrer should really only be considered the actual
	* page referrer in process.php, any other time it may be
	* inaccurate.
	*/
	var $errorcatch = array();

	/* Class constructor */
	function Session()
	{
		traceCalls(__METHOD__, __LINE__);
		$this->startSession();
		$this->time = time();
	}

	/**
	* startSession - Performs all the actions necessary to
	* initialize this session object. Tries to determine if the
	* the user has logged in already, and sets the variables
	* accordingly. Also takes advantage of this page load to
	* update the active visitors tables.
	*/

	function startSession()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		session_start();   //Tell PHP to start the session
		$currentCookieParams = session_get_cookie_params();  
		$sidvalue = session_id();  
		setcookie(  
			'PHPSESSID',//name  
			$sidvalue,//value  
			0,//expires at end of session  
			$currentCookieParams['path'],//path  
			$currentCookieParams['domain'],//domain  
			COOKIE_SECURE, //secure  
			true //httponly
		);  
		/* Determine if user is logged in */
		$this->logged_in = $this->checkLogin();
		if(!$this->logged_in)
		{
			$this->username = $_SESSION['username'] = GUEST_NAME;
			$this->userlevel = GUEST_LEVEL;
		}
	}

	function redirect($url)
	{	?>
		<script type="text/javascript">
			window.location="<?php echo $url ?>";
		</script>
<?php
	}

	/**
	* checkLogin - Checks if the user has already previously
	* logged in, and a session with the user has already been
	* established. Also checks to see if user has been remembered.
	* If so, the database is queried to make sure of the user's
	* authenticity. Returns true if the user has logged in.
	*/
	function checkLogin()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		/* Check if user has been remembered */
		if(isset($_COOKIE['cookname']) && isset($_COOKIE['cookid']) && isset($_COOKIE['cookcsrf']))
		{
			$userinfo = $database->getUserInfo($_COOKIE['cookname']);
			if(!empty($userinfo) && $userinfo['salt']===$_COOKIE['cookcsrf'])
			{
				$this->username = $_SESSION['username'] = $_COOKIE['cookname'];
				$this->userid   = $_SESSION['userid']   = $_COOKIE['cookid'];
			}
		}
		/* Username and userid have been set and not guest */
		if(isset($_SESSION['username']) && isset($_SESSION['userid']) && $_SESSION['username'] != GUEST_NAME)
		{
			/* Confirm that username and userid are valid */
			if(!$database->confirmUserID($_SESSION['username'], $_SESSION['userid']) != 0)
			{
				/* Variables are incorrect, user not logged in */
				unset($_SESSION['username']);
				unset($_SESSION['userid']);
				return false;
			}

			/* User is logged in, set class variables */
			$this->userinfo  = $database->getUserInfo($_SESSION['username']);
			$this->username  = $this->userinfo['username'];
			$this->userid    = $this->userinfo['userid'];
			$this->fullname  = $this->userinfo['name'];
			$this->userlevel = $this->userinfo['userlevel'];
			return true;
		}
		/* User not logged in */
		else
		{
			return false;
		}
	}

	/**
	* login - The user has submitted his username and password
	* through the login form, this function checks the authenticity
	* of that information in the database and creates the session.
	* Effectively logging in the user if all goes well.
	*/
	function login($subuser, $subpass, $subremember)
	{	
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$field="username";
		if(!$subuser || strlen($subuser=trim($subuser))==0 || $subuser=='your username'){
			$form->setError($field, $lang['error']['empty_username']);
		}
		$field="password";
		if(!$subpass || strlen($subpass=trim($subpass))==0){
			$form->setError($field, $lang['error']['empty_password']);
		}
		else if(!$database->confirmUserPass($subuser, $subpass)){
			$form->setError("username", $lang['error']['invalid_password']);
		}
		if($form->num_errors > 0)
			return 0;

		$userinfo = $database->getUserInfo($subuser);
		$active = $database->confirmLenderActive($userinfo['userid']);
		if(!$userinfo['emailVerified'])
		{
			$form->setError("username", $lang['error']['not_verified_email']);
		}
		/*Dont allow inactive lenders to login*/
		if($userinfo['userlevel'] == LENDER_LEVEL && !$active)
		{
			$form->setError("username", $lang['error']['inactive_account']);
		}
		if($form->num_errors > 0)
			return 0;

		/* Username and password correct, register session variables */
		$this->userinfo  = $userinfo;
		$this->username  = $_SESSION['username'] = $this->userinfo['username'];
		$this->fullname  = $this->userinfo['name'];
		$this->userid    = $_SESSION['userid'] = $this->userinfo['userid'];
		$this->userlevel = $this->userinfo['userlevel'];
		$language= $userinfo['lang'];
		if($language !='en')
			$_SESSION['language']=$language;
		/* Insert userid into database and update active users table */
		$database->setLoginTime($this->userid, $this->time);
		if($subremember)
		{
			setcookie("cookname", $this->username, time()+COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookid",   $this->userid, time()+COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookcsrf",   $userinfo['salt'], time()+COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
		}
		return 1;
	}
	function loginAsUser($userId)
	{
		global $database, $form;
		$userinfo = $database->getUserById($userId);
		/* Username and password correct, register session variables */
		$this->userinfo  = $userinfo;
		$this->username  = $_SESSION['username'] = $this->userinfo['username'];
		$this->fullname  = $this->userinfo['name'];
		$this->userid    = $_SESSION['userid'] = $userId;
		$this->userlevel = $this->userinfo['userlevel'];
		$database->setLoginTime($this->userid, time());
		return 1;
	}
	/**
	* logout - Gets called when the user wants to be logged out of the
	* website. It deletes any cookies that were stored on the users
	* computer as a result of him wanting to be remembered, and also
	* unsets session variables and demotes his user level to guest.
	*/
	function logout()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		if(isset($_COOKIE['cookname']) && isset($_COOKIE['cookid']))
		{
			setcookie("cookname", "", time()-COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookid",   "", time()-COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookcsrf",   "", time()-COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
		}
		/* Unset PHP session variables */
		unset($_SESSION['username']);
		unset($_SESSION['userid']);
		unset($_SESSION['language']);
		unset($_SESSION['frnds_emails']);
		unset($_SESSION['frnds_msg']);
		unset($_SESSION['la']);
		unset($_SESSION['loanapp']);

		/* Reflect fact that user has logged out */
		$this->logged_in = false;
		$this->username  = GUEST_NAME;
		$this->userlevel = GUEST_LEVEL;
	}
	/**
	* register - Gets called when the user has just submitted the
	* registration form. Determines if there were any errors with
	* the entry fields, if so, it records the errors and returns
	* 1. If no errors were found, it registers the new user and
	* returns 0. Returns 2 if registration failed.
	*/

	/* -------------------Admin Section Start----------------------- */

	function activateBorrower($borrowerid, $datepicker, $loanamount, $loanpaid, $ontimepaid, $feedback, $pcomment, $addmore, $cid, $lendername)
	{
		global $database, $form, $validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateActivateBorrower($datepicker, $loanamount, $loanpaid, $ontimepaid, $feedback, $pcomment,  $lendername);
		if($form->num_errors > 0){
			return 1;
		}
		$result=$database->activateBorrower($this->userid, $borrowerid, $datepicker, $loanamount, $loanpaid, $ontimepaid, $feedback, $pcomment, $addmore, $cid, $lendername);
		if(!$result)
		{
			$form->setError("dberror", $lang['error']['error_website']);
			return 1;
		}
		else if($result)
		{
			$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			$bdetail=$database->getEmailB($borrowerid);
			$language= $database->getPreferredLang($borrowerid);
			$path=	getEditablePath('mailtext.php',$language);
			require ("editables/".$path);
			$Subject=$lang['mailtext']['ActivateBorrower-subject'];
			$To=$params['name'] = $bdetail['name'];
			$params['link'] = WEBSITE_ADDRESS.'?p=12&u='.$this->userid ;
			$message = $this->formMessage($lang['mailtext']['ActivateBorrower-msg'], $params);
			if($addmore == 0)
				$reply=$this->mailSending($From, $To, $bdetail['email'], $Subject, $message,$templet);
			return 0;
		}
	}
	function deactivateBorrower($bid,$set)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return= $database->deactivateBorrower($bid, $set);
		$deat=$database->getEmailB($bid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		$language= $database->getPreferredLang($bid);
		$path=	getEditablePath('mailtext.php',$language);
		require ("editables/".$path);
		$Subject=$emailtext['DeactivateBorrower-subject'];
		$To=$params['name'] = $deat['name'];
		if($set){
			$params['status'] = 'Activeted';
		}
		else{
			$params['status'] = 'Deactiveted';
		}
		$params['link'] = WEBSITE_ADDRESS.'?p=12&u='.$bid ;
		$message = $this->formMessage($lang['mailtext']['DeactivateBorrower-msg'], $params);
		$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
		return $return;
	}
	function activateLender($lid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->activateLender($lid);
		return $return;
	}
	function deactivateLender($lid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->deactivateLender($lid);
		return $return;
	}
	function activatePartner($pid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->activatePartner($pid);
		$deat=$database->getEmailP($pid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		$language= $database->getPreferredLang($pid);
		$path=	getEditablePath('mailtext.php',$language);
		require ("editables/".$path);
		$Subject=$lang['mailtext']['ActivatePartner-subject'];
		$To=$params['name'] = $deat['name'];
		$params['status'] = 'Activated';
		$params['link'] = WEBSITE_ADDRESS.'?p=12&u='.$pid ;
		$message = $this->formMessage($lang['mailtext']['ActivatePartner-msg'], $params);
		$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
		return $return;
	}
	function deactivatePartner($pid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return= $database->deactivatePartner($pid);
		$deat=$database->getEmailP($pid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		$language= $database->getPreferredLang($pid);
		$path=	getEditablePath('mailtext.php',$language);
		require ("editables/".$path);
		$Subject=$lang['mailtext']['ActivatePartner-subject'];
		$To=$params['name'] = $deat['name'];
		$params['status'] = 'Deactiveted';
		$params['link'] = WEBSITE_ADDRESS.'?p=12&u='.$pid ;
		$message = $this->formMessage($lang['mailtext']['ActivatePartner-msg'], $params);
		$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
		return $return;
	}
	function setExchangeRate($amount,$currency)
	{
		global $form, $database;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$field="exrateamt";
		if(!$amount || strlen($amount)<1){
			$form->setError($field, $lang['error']['empty_rate']);
			return 0;
		}
		$result=$database->addRates($amount,$currency, time());
		if($result){
			return 1;
		}
		else
		{
			$form->setError("exrateamt", $lang['error']['error_website']);
			return 0;
		}
	}
	function saveRegistrationFee($currency,$amount)
	{
		global $database,$form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$field="currency";
		if(!$currency || $currency=='sel'){
			$form->setError($field, $lang['error']['empty_currency']);
		}
		$field= "amount";
		if(strlen($amount)<1){
			$form->setError($field, $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError($field, $lang['error']['invalid_amount']);
		}
		if($form->num_errors >0){
			return 0;
		}
		$currency_details=explode("#",$currency);
		$currency_id=$currency_details[0];
		$currency_name=$currency_details[1];
		$currency_code=$currency_details[2];

		$saveinfo= $database->saveRegistrationFee($currency_id,$currency_name,$currency_code,$amount);
		if($saveinfo==1)
		{
			return $saveinfo;
		}
		$field="currency";
		if($saveinfo==2)
		{
			$form->setError($field, $lang['error']['already_currency']);
			return 0;
		}
	}
	function setEditAmount($amount,$currencyid)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$result=$database->setEditAmount($amount,$currencyid);
		if($result){
			return 1;
		}
		else{
			return 0;
		}
	}
	function setMinFund($amount)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("../editables/".$path);
		$field='mamount';
		if(!$amount || strlen($amount)<0){
			$form->setError($field, $lang['error']['invalid_minamt']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError($field, $lang['error']['invalid_minamt']);
		}
		if($form->num_errors > 0){
			return 3;
		}
		$result=$database->setMinFund($amount);
		if($result){
			return 0;
		}
		else{
			return 1;
		}
	}
	function deleteBorrower($bid)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->getBorrowerById($bid);
			$result=0;
			if(!empty($res))
			{
				$result = $database->deleteBorrower($bid);
			}
			return $result;
		}
	}
	function deletePartner($pid)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->getPartnerDetails($pid);
			$result=0;
			if(!empty($res))
			{
				$result = $database->deletePartner($pid);
			}
			return $result;
		}
	}
	function deleteLender($lid)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->getLenderDetails($lid);
			$result=0;
			if(!empty($res))
			{
				$result = $database->deleteLender($lid);
			}
			return $result;
		}
	}
	function makeLoanDefault($borrowerid,$loanid)
	{
		global $database;
		$result = $database->setDefultInLoan($borrowerid,$loanid);
		if($result)
		{
			$lendersArray = $database->getLendersAndAmount($loanid, true);
			$borrower_name=$database->getNameById($borrowerid);
			$loanDetail=$database->getLoanDetails($loanid);
			$percent_repaid= $this->getStatusBar($borrowerid,$loanid, 3);
			for($i =0; $i < count($lendersArray); $i++)
			{
				$this->sendDefaultedLoanMailToLender($lendersArray[$i]['lenderid'],$borrower_name,$percent_repaid,$loanDetail['reqdamt']);
			}
		}
		return $result;
	}
	function makeLoanUndoDefault($borrowerid,$loanid)
	{
		global $database;
		$result = $database->undoDefultInLoan($borrowerid,$loanid);
		return $result;
	}
	function makeLoanCancel($borrowerid,$loanid)
	{
		global $database;
		$result = $database->setCancelInLoan($borrowerid,$loanid);
		return $result;
	}
	function forgetpassword($submail, $subuser=0)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$validation->checkEmail($submail, "forgetemail");
		if($subuser ===GUEST_NAME)
		{
			$field="forgetusername";
			$form->setError($field, $lang['error']['select_username']);
			return 2;
		}
		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->forgotPassword($submail, $subuser);
		if($result==0)
		{
			$field="forgeterror";
			$form->setError($field, $lang['error']['doesnot_email']);
			return 0;
		}
		else if($result==2)
		{
			return 2;
		}
		else if($result==3)
		{
			$field="forgeterror";
			$form->setError($field, $lang['error']['error_occure']);
			return 0;
		}
		else
		{	///send new pass to user's email
			$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			$language= $database->getPreferredLang($result['userid']);
			$path=	getEditablePath('mailtext.php',$language);
			require ("editables/".$path);
			$Subject=$lang['mailtext']['ForgotPassowrd-subject'];
			$To=$params['name'] = $result['username'];
			$params['username'] = $result['username'];
			$params['password'] = $result['pass'];
			$message = $this->formMessage($lang['mailtext']['ForgotPassowrd-msg'], $params);
			$reply=$this->mailSending($From, $To, $result['email'], $Subject, $message,$templet);
			return 1;
		}
	}
	function madePayment($borrowerid,$loanid,$date,$amount, $sendMail=true, $sub_type=0)
	{
		global $database, $form, $validation;
		$rtn = 0;
		$validation->checkAmount($amount, "paidamt");
		$validation->checkDated($date, "paiddate");
		if($form->num_errors > 0)
		{
			return 0;
		}
		if(is_numeric($date) && (int)$date == $date)
			$paidd = $date;
		else
			$paidd = strtotime($date);
		/*Divide the payment in the lenders and the web site fee
			1. Get the web site fee %
			2. Get who all lended and how much
			3. substract he website fee out of this installment
			4. remaining money should be divided in lenders according to their proportion and added
			5. If the loan gets completed with this payment set the loan status to complete
		*/

		$feerate = $database->getWebsiteFeeFromSchedule($loanid);
		/*	get loanapplic data(row) of this loan id	*/
		$lonedata=$database->getLoanfund($borrowerid, $loanid);
		$loanAmt=$lonedata['AmountGot']; /*The amount entered by admin on disbursement */
		$rate=$lonedata['finalrate'];	/*	Avearege interest rate of all lenders	*/
		$period=$lonedata['period'];	/* Actual repayment perieds which do not includes grace periods */
		$grace=$lonedata['grace'];	/* grace periods before repayment starts */

		$feeamount=((($period)*$loanAmt*($feerate))/1200);/* zidisha fee amount for this loan */
		$feelender=((($period)*$loanAmt*($rate))/1200);	/* total interest amount of lenders for this loan */
		$tamount=$loanAmt+ $feeamount + $feelender;	/* Total amount to be pay for by borrower */

		$pInCurrInstallment = ($loanAmt/$tamount) * $amount;
		$lendersArray = $database->getLendersAndAmount($loanid, true);
		$CurrencyRate = $database->getCurrentRate($borrowerid);

		$totalFee =  ($pInCurrInstallment * $feerate  * $period)/1200;

		$totalDollarFee = convertToDollar($totalFee, $CurrencyRate);

		if($rtn==0)
		{
			$rest1= $database->setTransactionAmount(ADMIN_ID,$totalDollarFee,'Fee',$loanid, $CurrencyRate, FEE, $paidd);
			if($rest1==0)
				$rtn=1;
		}
		$amountAfterFee = $amount - $totalFee;
		$total =0;
		for($i =0; $i < count($lendersArray); $i++)
		{
			$total += $lendersArray[$i]['amount'];
		}
		for($i =0; $i < count($lendersArray); $i++)
		{
			$lenderPrincipal = ($lendersArray[$i]['amount']/$total)*$pInCurrInstallment;
			$lenderInterest = ($lenderPrincipal * $lendersArray[$i]['intr'] * $period)/1200;
			$amountToLender = $lenderPrincipal +  $lenderInterest;
			$dollarAmountToLender = convertToDollar($amountToLender, $CurrencyRate);
			if($rtn==0)
			{
				$rest2= $database->setTransaction($lendersArray[$i]['lenderid'],$dollarAmountToLender,'Loan repayment received',$loanid, $CurrencyRate,LOAN_BACK_LENDER,0,$paidd, $sub_type);
				if($rest2==0)
					$rtn=1;
			}
		}
		/*amount coming into acount is +ve  going out of account is -ve*/
		$amtEntered = $amount;
		if($rtn==0)
		{
			$rest3= $database->setTransactionAmount($borrowerid, $amtEntered,'Loan installment',$loanid, $CurrencyRate,LOAN_BACK, $paidd);
			if($rest3==0)
					$rtn=1;
		}
		if($rtn==0)
		{
			$rest4= $this->setMadePayment($borrowerid, $loanid, $amount, $paidd);
			if($rest4==0)
				$rtn=1;
		}
		$bname=$database->getEmailB($borrowerid);
		$b_name=$bname['name'];

		$loandetail=$database->getLoanDetailsNew($borrowerid, $loanid);
		$totalAmt = $loandetail['totalAmt'];
		$totalPaidAmt = $loandetail['totalPaidAmt'];
		if($rtn==0)
		{
			if ( (abs($totalAmt) - abs($totalPaidAmt) <= 1))
			{
				$rest5=$database->loanpaidback($borrowerid,$loanid);
				if($rest5==0)
					$rtn=1;
				//email for these guys to come and provide review on the loan
				for($i =0; $i<count($lendersArray); $i++)
				{
					//mail for  giving feed back to each and every lender
					$r=$database->getEmail($lendersArray[$i]['lenderid']);
					$From=EMAIL_FROM_ADDR;
					$templet="editables/email/simplemail.html";
					require ("editables/mailtext.php");
					$Subject=$lang['mailtext']['RepayFeedback-subject'];
					$To=$params['name'] = $r['name'];
					$params['link'] = WEBSITE_ADDRESS.'?p=14&u='.$borrowerid.'&l='.$loanid.'#e1' ;
					$params['bname'] = $b_name;
					$message = $this->formMessage($lang['mailtext']['RepayFeedback-msg'], $params);
					$reply=$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
				}
			}
		}
		if($rtn==0)
		{
			if($sendMail)
			{
				for($i =0; $i < count($lendersArray); $i++)
				{
					$r=$database->getEmailAndPreference($lendersArray[$i]['lenderid']);
					if($r['email_loan_repayment'])
					{
						$lenderPrincipal = ($lendersArray[$i]['amount']/$total)*$pInCurrInstallment;
						$lenderInterest = ($lenderPrincipal * $lendersArray[$i]['intr'] * $period)/1200;
						$amountToLender = $lenderPrincipal +  $lenderInterest;
						$dollarAmountToLender = convertToDollar($amountToLender, $CurrencyRate);
						$From=EMAIL_FROM_ADDR;
						$templet="editables/email/simplemail.html";
						require ("editables/mailtext.php");
						$Subject=$lang['mailtext']['RecivedPayment-subject'];
						$To=$params['name'] = $r['name'];
						$params['amount'] = number_format($dollarAmountToLender, 2, ".", ",");
						$params['bname'] = $b_name;
						$params['link'] = WEBSITE_ADDRESS.'?p=14&u='.$borrowerid.'&l='.$loanid ;
						$message = $this->formMessage($lang['mailtext']['RecivedPayment-msg'], $params);
						$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
					}
				}
			}
		}
		if($rtn==0)
			return 1;
		else
		{
			$validation->setCustomError("failure", "error_website");
			return -1;
		}
	}
	function setMadePayment($borrowerid, $loanid, $amount, $date)
	{
		global $database, $form;
		$rtn=0;
		$res1= $database->getSchedulefromDB($borrowerid, $loanid);
		$amountbal = $amount;
		$jj=0;
		for($k=0; $k<count($res1); $k++)
		{
			if($res1[$k]['amount'] > 0)
			{
				$idIndex=$k;
				$jj=$k;
				$installment = $res1[$k]['amount'];
				break;
			}
		}
		$j=-1;
		for($i=0; $i<count($res1); $i++)
		{
			if(isset($res1[$i]['paidamt'])  && $res1[$i]['paidamt'] !=0 && $res1[$i]['paidamt'] !=NULL)
			{
				$idIndex=$i;
				$j=$i;
			}
		}
		$maxid = $res1[count($res1) - 1]['id'];
		$diff1 = 0;
		if($j > -1)
		{
			$diff1 = $res1[$j]['amount'] - $res1[$j]['paidamt'];
		}
		else
		{
			/* this case means there is no paid amount in table	*/
			$diff1=0;
			$idIndex--; //The id needs to be decremented as it is incremented below
			$j=$jj-1;
		}
		if($diff1 > 0)
		{
			if($diff1 >= $amountbal)
			{
				if($rtn==0)
				{
					$result=$database->madePayment($res1[$idIndex]['id'],$amountbal, $date);
					if($result==0)
						$rtn=1;
				}
			}
			else
			{
				for($bal=$amountbal; $bal >0;)
				{
					if($res1[$idIndex]['id']==$maxid)
					{
						if($rtn==0)
						{
							$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
							if($result==0)
								$rtn=1;
							$bal=0;
						}
					}
					else
					{
						if($diff1 > 0)
						{
							if($rtn==0)
							{
								 $result=$database->madePayment($res1[$idIndex]['id'],$diff1, $date);
								 if($result==0)
									$rtn=1;
								 $bal = $bal - $diff1;
								 $idIndex++;
								 $j++;
								 $diff1=0;
							}
						}
						else
						{
							$installment=$res1[$j]['amount'];
							if($bal <= $installment)
							{
								if($rtn==0)
								{
									$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
									if($result==0)
										$rtn=1;
									$bal=0;
								}
							}
							else
							{
								if($rtn==0)
								{
									$result=$database->madePayment($res1[$idIndex]['id'],$installment, $date);
									if($result==0)
										$rtn=1;
									$bal = $bal - $installment;
									$idIndex++;
									$j++;
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if($res1[$idIndex]['id'] < $maxid)
			{
				$idIndex++;
				$j++;
			}
			for($bal=$amountbal; $bal >0;)
			{
				if($res1[$idIndex]['id']==$maxid)
				{
					if($rtn==0)
					{
						$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
						if($result==0)
							$rtn=1;
						$bal=0;
					}
				}
				else
				{
					$installment=$res1[$j]['amount'];
					if($bal <= $installment)
					{
						if($rtn==0)
						{
							$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
							if($result==0)
								$rtn=1;
							$bal=0;
						}
					}
					else
					{
						if($rtn==0)
						{
							$result=$database->madePayment($res1[$idIndex]['id'],$installment, $date);
							if($result==0)
								$rtn=1;
							$bal = $bal - $installment;
							$idIndex++;
							$j++;
						}
					}
				}
			}
		}
		if($rtn==0)
		{
			$result=$database->madePayment_Actual($amount, $date, $loanid, $borrowerid,$res1[$idIndex]['id']);
			if($result==0)
				$rtn=1;
		}
		if($rtn==0)
			return 1;
		else
			return 0;
	}
	function updateActiveLoan($pid, $loanid,$a_amount,$reg_fee)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$state=LOAN_ACTIVE;
		if($loanid==0)
			return 2;//activeLoanID in borrowers is not set

		/*
			Verify if the lenders account has enough money if
			not do not go ahead. Notify admin about the Lenders who do not have
			sufficient fund. Ask lenders to come and pay. or reopen the bid.
			get the money from Lenders account ($)
			pay it to borrowers account local currency
		*/
		$lendersArray = $database->getLendersAndAmount($loanid);
		$CurrencyRate = $database->getCurrentRate($pid);
		if(empty($CurrencyRate))
			return 0;
		$proceed =1;

		for($i =0; $i < count($lendersArray); $i++)
		{
			//Pranjal modified below since this is where we are making bid active so we need to count the total
			//available amount as some amount is stuck in this bid too
			$amt = $database->getTransaction($lendersArray[$i]['lenderid'],0); //$this->amountToUseForBid($lendersArray[$i]['lenderid']);
			$dollaramount = $lendersArray[$i]['amount'];
			if($amt < $dollaramount){
				$proceed =0; //do not check the amount for now
				break;
			}
		}
		if($proceed)
		{
			for($i =0; $i < count($lendersArray); $i++)
			{
				$dollaramount = $lendersArray[$i]['amount'] * -1; //amount going out of account is -ve
				$res1=$database->setTransaction($lendersArray[$i]['lenderid'],$dollaramount,'Loan fund disbursement',$loanid, $CurrencyRate, LOAN_SENT_LENDER);
				if($res1==0)
					return 0; // in case if failed any lender transaction
			}
			//Pranjal add the amount as added by admin in native currency
			$res2= $database->updateGotAmount($loanid, $a_amount);
			if($res2==0)
				return 0;
			$loanamount = -1 *$a_amount;
			$res3= $database->setTransactionAmount($pid,$loanamount,'Got amount from loan',$loanid, $CurrencyRate, DISBURSEMENT);
			if($res3==0)
				return 0;
			if(!empty($reg_fee))
			{
				$res7=$database->setTransaction(ADMIN_ID,$reg_fee,'Registration Fee',$loanid, $CurrencyRate, REGISTRATION_FEE);
				if($res7==0)
					return 0; // in case if failed registration fee transaction
				$reg_fee1 = -1 * $reg_fee;
				$res8=$database->setTransaction($pid,$reg_fee1,'Registration Fee',$loanid, $CurrencyRate, REGISTRATION_FEE);
				if($res8==0)
					return 0; // in case if failed registration fee transaction
			}
			$res4= $database->updateLoanStatus($loanid,$state);
			if($res4==0)
				return 0;
			$res5= $database->updateActiveLoan($pid,$state);
			if($res5==0)
				return 0;
			$res6= $this->setSchedule($pid, $loanid );
			if($res6==0)
				return 0;
			else
			{
				require ("editables/mailtext.php");
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				$Subject=$lang['mailtext']['ActiveBid-subject'];
				for($i =0; $i < count($lendersArray); $i++)
				{
					$r=$database->getEmail($lendersArray[$i]['lenderid']);
					$To=$params['name'] = $r['name'];
					$params['bname'] = $database->getNameById($pid);
					$params['ddate'] = date('M d, Y',  time());
					$params['amtlocal'] = number_format($a_amount, 2, ".", ",") .' ' . $database->getUserCurrencyName($pid);
					$params['link'] = WEBSITE_ADDRESS.'?p=14&l='.$loanid ;
					$message = $this->formMessage($lang['mailtext']['ActiveBid-msg'], $params);
					$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
				}
				$r = $database->getEmailB($pid);
				$Subject=$lang['mailtext']['loan_disburse_sub'];
				$To=$params['bname'] = $r['name'];
				$currency='';
				$currency_amt=$database->getReg_CurrencyAmount($pid);
				foreach($currency_amt as $row)
				{
					$currency=$row['currency'];
					if(empty($reg_fee))
						$reg_fee=$row['Amount'];
				}
				$params['reg_fee_amt'] = number_format($reg_fee, 0, ".", ",") .' ' .$currency;
				$params['disb_amt'] = number_format($a_amount, 0, ".", ",") .' ' .$currency;
				$params['net_amt'] = number_format(($a_amount - $reg_fee), 0, ".", ",") .' ' .$currency;
				$country = $database->getBorrowerCountryByLoanid($loanid);
				$repayment_instruction=$database->getRepayment_InstructionsByCountryCode($country);
				$repay_ins='';
				if(!empty($repayment_instruction))
					$repay_ins = nl2br($repayment_instruction['description']);
				$params['repay_ins'] = $repay_ins;
				$params['zidisha_link'] = SITE_URL;
				$message = $this->formMessage($lang['mailtext']['loan_disburse_body'], $params);
				$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
				return 1;//success
			}
		}
		else
		{
			return 0; //insufficient funds
		}
	}
	function setSchedule($uid, $loanid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$lonedata=$database->getLoanfund($uid, $loanid);
		$loanid=$lonedata['loanid'];
		$amount=$lonedata['AmountGot'];
		$loneAppDate=$lonedata['applydate'];
		$rate=$lonedata['finalrate'];
		$webrate=$lonedata['WebFee'];
		$period=$lonedata['period'];
		$grace=$lonedata['grace'];
		$loneAcceptDate = time();
		$interest=(($period)/12)*(($amount*($rate/100))+($amount*($webrate/100)));
		$totalamt=$amount+$interest;
		$pinterest=$interest/($period);
		$pamount=$amount/($period-$grace);
		$pamount=round($pamount, 4);

		//correct decimal places
		$pamount1=floor($pamount);
		$dfamt=round($pamount-$pamount1, 2)*($period-$grace);

		$pinterest1=floor($pinterest);
		$dfint=round($pinterest-$pinterest1, 2)*($period);

		$count=0;
		$tint=0;
		$tprin=0;
		$ttotl=0;
		$schedule = array();
		$period += 1;
		for($i=0; $i<$period; $i++)
		{
			if($count < $grace)
			{
				$pint1=number_format($pinterest1, 2, ".", ",");
				$schedule[] = array('date'=>strtotime('+ '.$count.' month ' , $loneAcceptDate), 'intr'=>$pintl , amt => 0, 'total' => 0);
				$tint=$tint+$pinterest1;
			}
			else if($count >= $grace)
			{
				if($count==$period){
					$pamount1=$pamount1+$dfamt;
					$pinterest1=$pinterest1+$dfint;
				}
				$schedule[] = array('date'=> strtotime('+ '.$count.' month ' , $loneAcceptDate), 'intr'=>$pinterest1 , amt => $pamount1, 'total' => $totalamt/($period - $grace));
				$tint=$tint+$pinterest1;
				$tprin=$tprin+$pamount1;
				$ttotl=$ttotl+$pamount1+$pinterest1;
			}
			$count++;
		}
		if(!empty($schedule))
			return $database->setSchedule($uid, $loanid, $schedule);
		else
			return 0;
	}
	function pfreport($date3, $date4)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$date=fixdate;
		$flag=0;
		$field="fromdate";
		$flag=0;
		if(!$date3 || strlen($date3=trim($date3))==0)
		{
			$form->setError($field, $lang['error']['empty_fromdate']);
			$flag=1;
		}
		$field="todate";
		if(!$date4 || strlen($date4=trim($date4))==0)
		{
			$form->setError($field, $lang['error']['empty_todate']);
			$flag=1;
		}
		$result1=datecompare($date,$date3);
		$result2=datecompare($date3,$date4);
		if($result1==false && $flag!=1)
		{
			$field="wrongdate1";
			$form->setError($field, $lang['error']['invalid_fromdate']);
		}
		else if($result2==false && $flag!=1)
		{
			$field="wrongdate2";
			$form->setError($field, $lang['error']['greater_todate']." ".$date3);
		}
		if($form->num_errors > 0)
		{
			return 0;
		}
		else
			return 1;
	}
	function trhistory($date3, $date4)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$date=fixdate;
		if(empty($date3)){
			$form->setError("fromdate", $lang['error']['empty_fromdate']);
		}
		if(empty($date4)){
			$form->setError("todate", $lang['error']['empty_todate']);
		}
		if($form->num_errors > 0)
			return 0;
		$result1=datecompare($date,$date3);
		$result2=datecompare($date3,$date4);
		if(!$result1){
			$form->setError("fromdate", $lang['error']['invalid_fromdate']);
		}
		else if(!$result2){
			$form->setError("todate", $lang['error']['lower_fromdate']);
		}
		if($form->num_errors > 0)
			return 0;
		else
		{
			$_SESSION['date1']=$date3;
			$_SESSION['date2']=$date4;
			return 1;
		}
	}
	function getTranslate($bizdesc, $about, $loanuse, $cmnt, $id, $up_id, $loanid,$lcid=0)
	{
		global $database, $form;  //The database and form object
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if($up_id==1)
		{
			$res = $database->upadateTranslate($bizdesc, $about, $loanuse, 0, $id, $up_id, $loanid);
		}
		if($up_id==2)
		{
			$res = $database->upadateTranslate(0, 0, 0, $cmnt, $id, $up_id, 0);
			if(trim($cmnt) !='')
			{
				if($reschedule_id=$database->getRescheduleIdFromComment($id))
				{
					$rescheduleResult= $database->getRescheduleData($reschedule_id);
					$lendersArray = $database->getLendersAndAmount($rescheduleResult['loan_id'], true);
					for($i =0; $i < count($lendersArray); $i++)
					{
						$this->sendRescheduleCommentMailToLender($lendersArray[$i]['lenderid'],$rescheduleResult['borrower_id'],$rescheduleResult['period'],$cmnt, $rescheduleResult['date']);
					}
				}
				else
				{
					$this->sendTranslateCommentMails($id, $cmnt);
				}
			}
		}
		if($up_id==3)
		{
			$res = $database->upadateTranslate(0, 0, 0, $cmnt, 0, $up_id, 0,$lcid);
		}
		if($res==1 || $res==3 || $res==5)
				return $res;
		else
		{
			$form->setError("updateerr", $lang['error']['failed_updation']);
			return $res;
		}
	}
	function donate_card($id,$card_code,$amt)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->CheckGiftCardClaimed($card_code);
			if($res == 0)
			{
				$res1 = $database->CheckGiftCardExpired($card_code);
				if($res1 == 1)
				{
					$res2 = $database->donate_card($id,$card_code);
					if($res2 ==1)
					{
						$res3 = $database->setTransaction($this->userid, $amt,'Gift Card Conversion to Donation',0, 0, GIFT_DONATE);
						return 1;
					}
				}
			}
		}
		return 0;
	}
	function addpaymenttolender($userid,$amount,$donation)
	{
		global $database,$form;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($userid)){
			$form->setError("userid", $lang['error']['select_username']);
		}
		if(empty($amount) && empty($donation)){
			$form->setError("amount", "please enter any one amount");
		}
		else
		{
			if($amount <0){
				$form->setError("amount", $lang['error']['invalid_amount']);
			}
			if($donation <0){
				$form->setError("donation", $lang['error']['invalid_amount']);
			}
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			if(empty($amount))
				$amount=0;
			if(empty($donation))
				$donation=0;
			$database->startDbTxn();
			$res=$database->addpaymenttolender($userid,$amount,$donation);
			if($res==0){
				$database->rollbackTxn();
				return 0;
			}
			else
			{
				$database->commitTxn();
				if($amount >0){
					$this->sendFundUploadMail($userid,$amount);
				}
				if($donation >0){
					$this->sendDonationMail($userid,$donation);
				}
				return 1;
			}
		}
	}
	function adddonationtolender($name, $email, $donationamt)
	{
		global $database,$form, $validation;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($name)){
			$form->setError("name", $lang['error']['empty_name']);
		}
		$validation->checkEmail($email, "email");
		if($donationamt < 0 || empty($donationamt)){
			$form->setError("donationamt", $lang['error']['invalid_amount']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$database->startDbTxn();
			$res=$database->adddonationtolender($name, $email, $donationamt);
			if($res==0){
				$database->rollbackTxn();
				return 0;
			}
			else
			{
				$database->commitTxn();
				$this->sendDonationMail(0,$donationamt,$email, $name);
				return 1;
			}
		}
	}
	function changePassword($userid,$password,$cpassword)
	{
		global $database,$form, $validation;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($userid)){
			$form->setError("userid", $lang['error']['select_username']);
		}
		$validation->checkPassword($password, $cpassword, "password");
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$res=$database->changePassword($userid,$password);
			if($res==1){
				$_SESSION['pchange']=1;
			}
			return $res;
		}
	}
	function referral($country,$refCommission, $refPercent)
	{
		global $database,$form;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($country)){
			$form->setError("country", $lang['error']['select_country']);
		}
		if(empty($refCommission)){
			$form->setError("refCommission", $lang['error']['empty_ref_comm']);
		}
		if(empty($refPercent) && $refPercent !='0'){
			$form->setError("refPercent", $lang['error']['empty_per_repay']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$res=$database->referral($country,$refCommission, $refPercent);
			return $res;
		}
	}
	function assignedPartner($partnerid,$borrowerid)
	{
		global $database,$form;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(!$partnerid)
		{
			$field="partnerid".$borrowerid;
			$form->setError($field, $lang['error']['select_partner']);
			return false;
		}
		$res1=$database->assignedPartner($partnerid,$borrowerid);
		if($res1==1)
		{
			$_SESSION['Assigned']=1;
			$this->sendVerificationMailToPartner($partnerid,$borrowerid);
			return true;
		}
		else
			return false;
	}
	function declinedBorrower($borrowerid,$dreason)
	{
		global $database,$form;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($dreason)){
			$form->setError("dreason", $lang['error']['empty_ineligibility']);
			return false;
		}
		$res1=$database->declinedBorrower($borrowerid,$dreason, $this->userid);
		if($res1==1){
			$_SESSION['Declined']=1;
			return true;
		}
		else
			return false;
	}

	function addRePaymentInstruction($country_code, $description)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateRePaymentInstruction($country_code, $description);

		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->addRePaymentInstruction($country_code, $description);
		if($result)
		{
			return true;
		}
		return false;
	}

	function updateRePaymentInstruction($country_code, $description, $id)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateRePaymentInstruction($country_code, $description);

		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->updateRePaymentInstruction($country_code, $description, $id);
		if($result)
		{
			return true;
		}
		return false;
	}

	function deleteRePaymentInstruction($id)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$result=$database->deleteRePaymentInstruction($id);
		if($result)
		{
			return true;
		}
		return false;
	}
	function setCampaign($code,$value,$max_use,$message,$active)
	{
		global $form, $database;
		if(!$code|| strlen($code)<1)
		$code=getCardCode16(time());
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		$field_name='name';
		$field_value='value';
		$field_max_use='max_use';
		$field_message='message';
		include_once("editables/".$path);
		if(!$value|| strlen($value)<1){
			$form->setError($field_value, $lang['error']['empty_capmaign_value']);
		}
		if(!$max_use|| strlen($max_use)<1){
			$form->setError($field_max_use, $lang['error']['empty_max_use']);
		}
		if(!$message|| strlen($message)<1){
			$form->setError($field_message, $lang['error']['empty_capmaign_msg']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->addCampaign($code,$value,$max_use,$message,$active,time());
		if($result){
			return 1;
		}
		else
		{
		return 0;
		}
	}
	function updateCampaign($code,$value, $max_use,$message, $active,$id)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		if(!$code|| strlen($code)<1)
		$code=getCardCode16(time());
		$field_code='code';
		$field_value='value';
		$field_max_use='max_use';
		$field_message='message';
		include_once("editables/".$path);
		if(!$code|| strlen($code)<1){ 
			$form->setError($field_code, $lang['error']['empty_name']);
		}
		if(!$value|| strlen($value)<1){
			$form->setError($field_value, $lang['error']['empty_capmaign_value']);
		}
		if(!$max_use|| strlen($max_use)<1){
			$form->setError($field_max_use, $lang['error']['empty_max_use']);
		}
		if(!$message|| strlen($message)<1){
			$form->setError($field_message, $lang['error']['empty_capmaign_msg']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->updateCampaign($code, $value,$max_use, $message, $active,$id);
		if($result)
		{
			$_SESSION['update_campaign']=1;
			return true;
		}
		return false;
	}
	function deletecampaign($id)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$result=$database->deletecampaign($id);
		if($result)
		{
			$_SESSION['del_campaign']=1;
			return true;
		}
		return false;
	}
	function ConverToDonation($lid,$amt)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->ConverToDonation($lid,$amt,false);
		if($return){
			$_SESSION['donated']=1;
			return true;
		}
		return false;
	}
	function checkDeactivatedAndDonate()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$lenders=$database->checkDeactivatedAndDonate();
		if(!empty($lenders)){
			foreach($lenders as $lender){
				$avaiamount=$this->amountToUseForBid($lender['userid']);
				if($avaiamount>0){
				$return=$database->ConverToDonation($lender['userid'],$avaiamount,true);
				}
			}
			return true;
	}
		return false;
	}
	function emailedTo($borrowerid,$emailaddress,$ccaddress,$replyTo,$emailsubject,$emailmessage)
	{ 
		global $form,$database,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateEmailedTo($borrowerid,$emailaddress,$ccaddress,$replyTo,$emailsubject,$emailmessage);
		if($form->num_errors>0)
		{
			return 0;
		}else{
			$res=$database->SetBorrowerReports($borrowerid,$emailaddress,$ccaddress,$replyTo,$emailsubject,$emailmessage);
			if(!empty($res)){
					$From=EMAIL_FROM_ADDR;
					$To=$emailaddress;
					$email=$emailaddress;
					$Subject=$emailsubject;
					$message=nl2br($emailmessage);
					$templet="editables/email/simplemail.html";
					if(isset($ccaddress)){
						$CCemails=explode(',',$ccaddress);
						foreach($CCemails as $CCemail)
						{	
							$this->mailSending($From, $CCemail, $CCemail, $Subject, $message,$templet,$replyTo);		
						}
					}
				$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet,$replyTo);
				if($reply)
					Logger_Array("Email to borrower  sent  by admin",'email, To', $email, $To);
					return true;
			}
			return false;
		}
}
	/* -------------------Admin Section End----------------------- */


	/* -------------------Borrower Section Start----------------------- */

	function register_b($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile, $income, $about, $bizdesc, $photo, $tnc, $user_guess, &$id, $bnationid, $bloanhist, $language, $referrer, $community_name_no, $documents)
	{
		global $database, $form, $mailer, $validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateBorrowerReg($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile, $income, $about, $bizdesc, $photo, $tnc, $user_guess, $bnationid, $bloanhist, $referrer, $community_name_no, $documents);
		if($form->num_errors>0){
			return 1;
		}
		else
		{
			$retVal = $database->addBorrower($uname,$namea,$nameb, $pass1, $post, $city,$country,$email, $mobile, $income, $about, $bizdesc,$tnc,$bnationid,$bloanhist, $language, $community_name_no, $documents);
			$id = $database->getUserId($uname);
			if(!empty($id))
			{
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				$path=	getEditablePath('mailtext.php',$language);
				require ("editables/".$path);
				
				$Subject=$lang['mailtext']['BorrowerReg-subject'];
				$To=$params['name'] = $namea." ".$nameb ;
				$params['username'] = $uname;
				$params['password'] = $pass1;
				$message = $this->formMessage($lang['mailtext']['BorrowerReg-msg'], $params);
				$this->mailSending($From, $To, $email, $Subject, $message,$templet);

				/*$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				$path=	getEditablePath('mailtext.php',$language);
				require ("editables/".$path);
				
				$Subject=$lang['mailtext']['email_verification_sub'];
				$To=$params['name'] = $namea." ".$nameb ;
				$activate_key =	$database->getActivationKey($id);
				$link = SITE_URL."index.php?p=51&ident=$id&activate=$activate_key";
				$params['verify_link'] = $link;
				$message = $this->formMessage($lang['mailtext']['email_verification_body'], $params);
				$reply = $this->mailSending($From, $To, $email, $Subject, $message,$templet);
				if($reply)
					Logger_Array("Email Verification mail sent to borrower ",'email, To', $email, $To);
				$_SESSION['bEmailVerifiedPending']=true;
				*/
				if(!empty($referrer))
				{
					$userinfo = $database->getUserInfo($referrer);
					$referDetail=$database->getReferrals($userinfo['country'], false);
					if(!empty($referDetail))
					{
						$comm=$database->addCommission($id, $userinfo['userid'], $referDetail['id']);
						if($comm)
						{
							$params=array();
							$params['applicant_name'] = $namea." ".$nameb;
							$To=$params['bname'] = $userinfo['name'];
							$params['amount'] = $referDetail['ref_commission'];
							$params['referral_link'] = SITE_URL."index.php?p=50";
							$Subject = $this->formMessage($lang['mailtext']['borrower_referral_sub'], $params);
							if($referDetail['percent_repay']==0)
							{
								$message = $this->formMessage($lang['mailtext']['borrower_referral_body_1'], $params);
							}
							else
							{
								$params['repaid_percent'] = $referDetail['percent_repay'];
								$message = $this->formMessage($lang['mailtext']['borrower_referral_body_2'], $params);
							}
							$this->mailSending($From, $To, $userinfo['email'], $Subject, $message,$templet);
						}
					}
				}
				$this->updateBorrowerDocument($id, $documents);
			}
			return $retVal ;
		}
	}
	function editprofile_b($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile, $income, $about, $bizdesc, $photo, $id, $bnationid, $bloanhist, $language, $community_name_no, $documents)
	{
		global $database, $form, $mailer,$validation ;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateBorrowerEdit($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile, $income, $about, $bizdesc, $bnationid, $bloanhist, $community_name_no, $documents);

		if($form->num_errors>0){
			return 1;
		}
		else
		{
			$rtn=$database->updateBorrower($uname,$namea,$nameb, $pass1, $post, $city,$country,$email, $mobile, $income, $about, $bizdesc,$id,$bnationid,$bloanhist,$language, $community_name_no);
			$this->updateBorrowerDocument($id, $documents);
			return $rtn;
		}
	}
	function updateBorrowerDocument($id, $documents)
	{
		global $database;
		$front_national_id='';
		$back_national_id='';
		$address_proof='';
		$legal_declaration='';
		if(is_uploaded_file($documents['front_national_id']['tmp_name']))
		{
			$path_info = pathinfo($documents['front_national_id']['name']);
			$ext=$path_info['extension'];
			$front_national_id= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			move_uploaded_file($documents['front_national_id']['tmp_name'],DOCUMENT_DIR.$front_national_id);
			$database->updateBorrowerDocument($id, 'frontNationalId', $front_national_id);
		}
		if(is_uploaded_file($documents['back_national_id']['tmp_name']))
		{
			$path_info = pathinfo($documents['back_national_id']['name']);
			$ext=$path_info['extension'];
			$back_national_id= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			move_uploaded_file($documents['back_national_id']['tmp_name'],DOCUMENT_DIR.$back_national_id);
			$database->updateBorrowerDocument($id, 'backNationalId', $back_national_id);
		}
		if(is_uploaded_file($documents['address_proof']['tmp_name']))
		{
			$path_info = pathinfo($documents['address_proof']['name']);
			$ext=$path_info['extension'];
			$address_proof= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			move_uploaded_file($documents['address_proof']['tmp_name'],DOCUMENT_DIR.$address_proof);
			$database->updateBorrowerDocument($id, 'addressProof', $address_proof);
		}
		if(is_uploaded_file($documents['legal_declaration']['tmp_name']))
		{
			$path_info = pathinfo($documents['legal_declaration']['name']);
			$ext=$path_info['extension'];
			$legal_declaration= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			move_uploaded_file($documents['legal_declaration']['tmp_name'],DOCUMENT_DIR.$legal_declaration);
			$database->updateBorrowerDocument($id, 'legalDeclaration', $legal_declaration);
		}
	}
	function loanApplication($amount, $interest, $period, $gperiod, $loanuse,$tnc)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['invalid_loanamt']);
		}
		else
		{
			$rate=$database->getCurrentRate($this->userid);
			$maxBorrowerAmt= ceil($database->getAdminSetting('maxBorrowerAmt'));  /* It is in native currency */
			$minBorrowerAmt= ceil(convertToNative($database->getAdminSetting('minBorrowerAmt'), $rate));
			if($minBorrowerAmt>$amount){
				$form->setError("amount", $lang['error']['greater_loanamt']." <u>".$minBorrowerAmt."</u>");
			}
			if($maxBorrowerAmt<$amount){
				$form->setError("amount", $lang['error']['lower_loanamt']." <u>".$maxBorrowerAmt."</u>");
			}
		}
		if(empty($interest)){
			$form->setError("interest", $lang['error']['invalid_interest']);
		}
		else
		{
			$fee = $database->getAdminSetting('fee');
			if($interest < $fee)
				$form->setError("interest", $lang['error']['greater_interest']." ". $fee);
		}
		if(empty($period)){
			$form->setError("period", $lang['error']['invalid_repaytime']);
		}
		else if(!eregi("^[0-9]", $period)){
			$form->setError("period", $lang['error']['invalid_repaytime']);
		}
		if(strlen($gperiod)<1){
			$form->setError("gperiod", $lang['error']['invalid_gracetime']);
		}
		else
		{
			if(!eregi("^[0-9]+", $gperiod)){
				$form->setError("gperiod", $lang['error']['invalid_gracetime']);
			}
			else if($gperiod >=$period){
				$form->setError("gperiod", $lang['error']['lower_gracetime']." ".trim($period));
			}
		}
		if(empty($loanuse)){
			$form->setError("loanuse", $lang['error']['empty_loanuse']);
		}
		if(empty($tnc)){
			$form->setError("agree", $lang['error']['empty_tnc']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		return 1;
	}
	function editLoanApplication($loanid, $amount, $interest, $loanuse)
	{
		global $database, $form;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$userid=$this->userid;
		$loandata=$database->getLastloan($userid);
		$bidsIntr=$database->getMinMaxBidIntr($loanid);
		$totBidsAmt=$database->getTotalBidAmount($loanid);
		$rate=$database->getCurrentRate($userid);
		$OldRate=$database->getExRateById($loandata['applydate'], $loandata['borrowerid']);
		$totBidsAmtNative=convertToNative($totBidsAmt, $OldRate);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['invalid_loanamt']);
		}
		else
		{
			$rate=$database->getCurrentRate($userid);
			$maxBorrowerAmt= ceil($database->getAdminSetting('maxBorrowerAmt')); /* It is in native currency */
			$minBorrowerAmt= ceil(convertToNative($database->getAdminSetting('minBorrowerAmt'), $rate));
			if($minBorrowerAmt>$amount){
				$form->setError("amount", $lang['error']['greater_loanamt']." <u>".$minBorrowerAmt."</u>");
			}
			if($loandata['Amount'] < $amount)
			{
				if($maxBorrowerAmt < $amount)
				{
					if($loandata['Amount'] > $maxBorrowerAmt){
						$form->setError("amount", $lang['error']['lower_loanamt']." <u>".$loandata['Amount']."</u>");
					}
					else{
						$form->setError("amount", $lang['error']['lower_loanamt']." <u>".$maxBorrowerAmt."</u>");
					}
				}
			}
			elseif($loandata['Amount'] > $amount)
			{
				$AmountUsd=convertToDollar($amount, $OldRate);
				if($loandata['reqdamt'] <= $totBidsAmt){
					$form->setError("amount", $lang['error']['greater_loanamt']." <u>".$loandata['Amount']."</u>");
				}
				else if($AmountUsd < $totBidsAmt){
					$form->setError("amount", $lang['error']['greater_loanamt']." <u>".$totBidsAmtNative."</u>");
				}
			}
		}
		if(empty($interest)){
			$form->setError("interest", $lang['error']['invalid_interest']);
		}
		else
		{
			$fee = $database->getAdminSetting('fee');
			if($interest < $fee)
			{
				if(($bidsIntr['max'] + $fee) > $fee)
					$form->setError("interest", $lang['error']['greater_interest_lender']." ". ($bidsIntr['max'] + $fee));
				else
					$form->setError("interest", $lang['error']['greater_interest']." ". $fee);
			}
			else if($interest < $loandata['interest'])
			{
				if(!empty($bidsIntr['max']) && ($bidsIntr['max'] + $fee) >$interest)
					$form->setError("interest", $lang['error']['greater_interest_lender']." ". ($bidsIntr['max'] + $fee));
			}
		}
		if(empty($loanuse)){
			$form->setError("loanuse", $lang['error']['empty_loanuse']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$ret=$database->updateLoanApp($userid, $loanid, $amount, $interest, $loanuse);
			return $ret;
		}
	}
	function confirmLoanApp($amount, $interest, $period, $gperiod, $loanuse,$tnc)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$loanid= $database->loanApplication($this->userid, $amount, $interest, $period, $gperiod, $loanuse,$tnc);
		if($loanid)
		{
			unset($_SESSION['la']);
			unset($_SESSION['loanapp']);
			$loanCount= $database->getLoanCount($this->userid);
			$userid=$this->userid;
			if($loanCount)
			{
				$oldLoanid=$database->getLastRepaidloanId($userid);
				$bname= $database->getNameById($userid);
				$lenders= $database->getLendersEmailForLoanApp($oldLoanid);
				$repay_date= $database->getRepaidDate($userid, $oldLoanid);
				foreach($lenders as $lender)
				{
					$this->sendNewLoanAppMailToLender($loanid, $lender['Email'], $lender['FirstName'].' '.$lender['LastName'], $userid, $bname, $repay_date);
				}
			}
			return 1;
		}
		else
		{
			return 0;
		}
	}
	function getStatusBar($ud,$ld, $promote=0)
	{
		global $database;
		$state=$database->getUserLoanStatus($ud,$ld);
		if(!empty($state))
		{
			$woff=0;
			$stage=$state['active'];
			$reqAmount=$state['reqdamt'];
			$Amount=$state['Amount'];
			$text="<div class='progress'>";
			if(($stage == LOAN_OPEN) || ($stage == LOAN_FUNDED))
			{
				$p=($database->getTotalBid($ud, $ld)/($reqAmount))*100 ; // divided by reqAmount as it is in doller
				$p_org=$p;
				$p1=number_format($p, 0, ".", ",")."%";
				if($p>=100)
				{
					$p='100%';
					$p1='100%';
					$msg='Raised';
					$imgClass= 'fundingLoanBar';
					$bgcolor='#CCCCCC';
				}
				else
				{
					$p=number_format($p).'%';
					$msg=' Raised';
					$imgClass= 'fundingLoanBar';
					$bgcolor='#CCCCCC';
				}
			}
			else if(($stage == LOAN_ACTIVE) || ($stage == LOAN_REPAID) || ($stage == LOAN_DEFAULTED))
			{
				$res=$database->getTotalPayment($ud, $ld);
				if($res['amttotal'] > 0) {
					$p= $res['paidtotal']/$res['amttotal']*100;
				} else {
					$p=100;
				}
				$p_org=$p;
				$p1=number_format($p, 0, ".", ",")."%";
				if($p>=100)
				{
					$p='100%';
					$p1='100%';
					$msg=' Repaid';
					$imgClass= 'repaidLoanBar';
					$bgcolor='#CCCCCC';
				}
				else
				{
					$p=number_format($p).'%';
					if($stage == LOAN_DEFAULTED)
						$woff=(100-number_format($p)).'%';
					$msg=' Repaid';
					$imgClass= 'repaidLoanBar';
					$bgcolor='#CCCCCC';
				}
			}
			else
			{
				$p_org=100;
				$p='100%';
				$p1='';
				if(($stage == LOAN_DEFAULTED))
					$msg='Written Off';
				else if($stage == LOAN_CANCELED)
					$msg='Cancelled';
				else if($stage == LOAN_EXPIRED)
					$msg='Expired';
				$imgClass= 'expiredLoanBar';
				$bgcolor='#CCCCCC';
			}
			if($promote==1)
			{
				$text="<table style='width:100%'>";
				if(($stage == LOAN_OPEN) || ($stage == LOAN_FUNDED))
					$text=$text."<tr><td align='left' height='4' bgcolor='".$bgcolor."' ><table width='".$p."'><tr><td bgcolor='#009900'></td></tr></table></td></tr>";
				else if(($stage == LOAN_ACTIVE) || ($stage == LOAN_REPAID))
					$text=$text."<tr><td align='left' height='4' bgcolor='".$bgcolor."' ><table width='".$p."'><tr><td bgcolor='#999999'></td></tr></table></td></tr>";
				else
					$text=$text."<tr><td align='left' height='4' bgcolor='".$bgcolor."' ><table width='".$p."'><tr><td bgcolor='#FE2828'></td></tr></table></td></tr>";
				if($stage == LOAN_DEFAULTED)
				{
					$text=$text."<tr><td align='center'>".$p1." ".$msg.",<br/>".$woff." Written Off</td></tr>";
				}
				else
				{
					$text=$text."<tr><td align='center'>".$p1." ".$msg." </td></tr>";
				}
				$text=$text."</table>";
				return $text;
			}
			else if($promote==2)
			{
				return $p1." ".$msg;
			}
			else if($promote==3)
			{
				return $p1;
			}
			else if($promote==4)
			{
				return $p1." ".$msg.",<br/>".$woff." Written Off";
			}
			else if($promote==5)
			{
				return $p_org;
			}
			else
			{
				$text=$text."<div class='".$imgClass."' style='width:".$p."'></div></div>";
			}
			if($stage == LOAN_DEFAULTED)
			{

				$text=$text."<strong>".$p1." ".$msg.",<br/>".$woff." Written Off</strong>";
			}
			else
			{
				$text=$text."<strong>".$p1." ".$msg."</strong>";
			}
			return $text;
		}
		else
		{
			return '';
		}
	}
	function acceptBids($loanid, $bid=0)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$userId = $this->userid;
		if($bid != 0)
			$userId = $bid;

		$bids=$database->getLoanBids($userId, $loanid);
		if(empty($bids))
			return 0;
		$lamount=$database->getOpenLoanAmount($userId, $loanid);
		$bidamount=0.00;
		$interest=0.00;
		$count=0;
		$temp=0.00;
		$temp1=0.00;
		$arr=array();
		$bidids=array();
		$rate = $database->getCurrentRate($userId);
		if(empty($rate))
			return 0;
		foreach($bids as $bid )
		{
			if(convertToNative($bidamount, $rate) < $lamount)
			{
				$bida=$bid['bidamount'];
				$bidint=$bid['bidint'];
				$bidid=$bid['bidid'];
				$lenderid=$bid['lenderid'];
				if(convertToNative(($bidamount+$bida) , $rate) <= $lamount)
				{
					$bidamount = $bidamount + $bida;
					$temp=$bidint*$bida;
					$interest=$interest+$temp;
					$bidids[$count]['bidid']=$bidid;
					$bidids[$count]['bidamount']=$bida;
					$bidids[$count]['bidrate']=$bidint;
					$count++;
				}
				else
				{
					$temp1=$lamount - convertToNative(($bidamount), $rate);
					$bida=convertToDollar($temp1, $rate);
					$bidamount=$bidamount+$bida;
					$temp=$bidint*$bida;
					$interest=$interest+$temp;
					$bidids[$count]['bidid']=$bidid;
					$bidids[$count]['bidamount']=$bida;
					$bidids[$count]['bidrate']=$bidint;
					break;
				}
			}
		}
		$arr['amt']=    $bidamount ;//is USD
		$arr['int']=    ($interest/$bidamount) ;
		$arr['bidids']= $bidids;
		$arr['loanid']= $loanid;
		return $arr;
	}
	function processBids($array, $bid=0)
	{
		//process a list to show which loans are approved back to proceess as a text or array
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$userId = $this->userid;
		if($bid != 0)
			$userId = $bid;
		$rr=$array['bidids'];
		$result=$database->processBids($rr);
		if($result==DB_OK)
		{
			//all value set properly
			$state = LOAN_FUNDED;
			$borrowerid=$userId;
			$result1=$database->updateActiveLoan($borrowerid,$state);
			if($result1==0)
				return 0;
			$loanid=$array['loanid'];
			$rate=$array['int'];
			$result2=$database->updateLoanRate($loanid, $rate);
			if($result2==DB_OK)
			{
				foreach($rr as $row)
				{
					$deat=$database->getEmailBybidid($row['bidid']);
					$From=EMAIL_FROM_ADDR;
					$templet="editables/email/simplemail.html";
					require ("editables/mailtext.php");
					$Subject=$lang['mailtext']['AcceptBid-subject'];
					$To=$params['name'] = $deat['name'];
					$params['amount'] = number_format($deat['amount'],2,".",",");
					$params['intr'] = number_format($row['bidrate'],2,".",",");
					$params['bname'] = $database->getNameById($borrowerid);
					$params['link'] = WEBSITE_ADDRESS.'?p=14&u='.$borrowerid.'&l='.$loanid ;
					$message = $this->formMessage($lang['mailtext']['AcceptBid-msg'], $params);
					$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
				}
				return 1;
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 0;
		}
	}
	function getSchedule($amount, $rate, $period, $grace, $loneAcceptDate, $webrate)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		//Principal + (Number of years of repayment period * ((Principal * Aggregate annual Lender interest rate) + (Principal * % annual fee charged by website)))
		$UserCurrency = $database->getUserCurrency($this->userid);
		$interest=(($period)/12)*(($amount*($rate/100)));
		$totalamt=$amount+$interest;
		$totalremaining = $totalamt;
		$pinterest=$interest/($period);
		$pamount=$amount/($period-$grace);
		$pamount=round($pamount, 4);
		$pamount1=($pamount);
		$dfamt=round($pamount-$pamount1, 2)*($period-$grace);

		$pinterest1=($pinterest);
		$dfint=round($pinterest-$pinterest1, 2)*($period);
		$text="<table class='zebra-striped'>
				<thead>
					<tr>
						<th>Months after disbursement date</th>
						<th>Amount(".$UserCurrency.")</th>
						<th>Balance</th>
					</tr>
				</thead>
				<tbody>";
		$count=0;
		$tint=0;
		$tprin=0;
		$ttotl=0;
		$period +=1;
		for($i=0; $i<$period; $i++)
		{
			if($count < $grace){
				$tint=$tint+$pinterest1;
			}
			else if($count >= $grace)
			{
				if($count==$period)
				{
					$pamount1=$pamount1+$dfamt;
					$pinterest1=$pinterest1+$dfint;
				}
				$pamt1=number_format($pamount1, 2, ".", ",");
				$pint1=number_format($pinterest1, 2, ".", ",");
				$ptot=number_format(round_local($totalamt/($period - $grace)), 2, ".", ",");
				$date=date('m/d/Y',strtotime('+ '.$count.' month ' , $loneAcceptDate));
				$totalremaining = $totalremaining - $totalamt/($period - $grace);
				if(abs($totalremaining) < 0.5)
					$totalremaining = 0;
				$count1 = $count;
				$text=$text."<tr>";
				$text=$text."<td>$count1 </td>";
				$text=$text."<td>$ptot</td>";
				$text=$text."<td>". number_format(round_local($totalremaining), 2, '.', ',')."</td>";
				$text=$text."</tr>";
				$tint=$tint+$pinterest1;
				$tprin=$tprin+$pamount1;
				$ttotl=$ttotl+$pamount1+$pinterest1;
			}
			$count++;
		}
		$tint1=number_format($tint, 2, ".", ",");
		$tprin1=number_format($tprin, 2, ".", ",");
		$ttotl1=number_format(round_local($totalamt) , 2, ".", ",");
		$text=$text."</tbody><tfoot><tr>
						<td><strong>Total Repayment</strong></td>
						<td><strong>$ttotl1</strong></td>
						<td></td>
					</tr></tfoot></table>";
		return $text;
	}
	function processOldLoans()
	{
		global $database, $form,$mailer1;
		$loans = null;
		$database->setExpireInLoan($loans);
		for($i =0; $i < count($loans);  $i++ )
		{
			$result = array();
			$result=$this->acceptBids($loans[$i]['lid'], $loans[$i]['bid'] );
			$r2=$this->processBids($result, $loans[$i]['bid']);
		}
	}
	function getRescheduleDates($loanid, $installment_date=0)
	{
		global $database;
		$time= time();
		$lonedata=$database->getLoanDetails($loanid);
		$org_repay_period= ($lonedata['original_period']==0)? $lonedata['period']:$lonedata['original_period'];
		$lastDuedate=$database->getLastDueDate($loanid);
		$nextDuedate= $database->getNextDueDate($loanid);
		$nextDuedateOrg=$nextDuedate;
		if(empty($nextDuedate))
		{
			$i=1;
			while(1)
			{
				$date=strtotime('+ '.$i.' month ' , $lastDuedate);
				if($date > $time){
					$nextDuedate=$date;
					break;
				}
				$i++;
			}

		}
		if($installment_date !=0)
		{
			if(empty($nextDuedateOrg))
			{
				$remainPeriod=-round(($installment_date- $lastDuedate)/(30*24*60*60));
			}
			else
			{
				if($installment_date >$lastDuedate)
					$remainPeriod=-round(($installment_date- $lastDuedate)/(30*24*60*60));
				else
					$remainPeriod=round(($lastDuedate- $installment_date)/(30*24*60*60));
			}
		}
		$max_repay_period= $org_repay_period * EXTEND_PERIOD_MULTIPLY;
		$maxDuedate=strtotime('+ '.($max_repay_period-1).' month ' , $nextDuedate);
		$rescheduleDates=array();
		$nextDuedateOrg=$nextDuedate;
		for($i=1; $i<=6; $i++)
		{
			// 6 for we will show 6 dates to borrower for rescheduling
			if($maxDuedate >=$nextDuedate)
			{
				$rescheduleDates[$i]=$nextDuedate;
				$nextDuedate=strtotime('+ '.$i.' month ' , $nextDuedateOrg);
			}
		}
		$allDates['rescheduleDates']=$rescheduleDates;
		$allDates['nextDuedate']=$nextDuedate;
		$allDates['maxDuedate']=$maxDuedate;
		$allDates['max_repay_period']=$max_repay_period;
		if(isset($remainPeriod))
			$allDates['remainPeriod']=$remainPeriod;
		return $allDates;
	}
	function reScheduleLoan($period,$installment_amount, $installment_date,$original_period,$reschedule_reason,$confirmReScheduleLoan,$loanid)
	{
		global $database,$form;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($original_period))
			$original_period=$period;
		$flag=0;
		$userid=$this->userid;
		$allDates= $this->getRescheduleDates($loanid, $installment_date);
		$brw2 = $database->getLoanDetails($loanid);
		$amount=$brw2['AmountGot'];
		$tmpcurr = $database->getUserCurrency($userid);
		$rate=$brw2['finalrate'];
		$period=$brw2['period'];
		$gperiod=$brw2['grace'];
		$fee=$brw2['WebFee'];
		$rescheduleDetail=array();
		if($confirmReScheduleLoan==0)
		{
			if(empty($installment_amount)){
				$form->setError("installment_amount", $lang['error']['empty_amount']);
				$flag=1;
			}
			else if(!is_numeric($installment_amount)){
				$form->setError("installment_amount", $lang['error']['invalid_format_amount']);
				$flag=1;
			}
			if(empty($installment_date)){
				$form->setError("installment_date", $lang['error']['empty_date']);
				$flag=1;
			}
			else
			{
				if(!in_array($installment_date, $allDates['rescheduleDates'])){
					$form->setError("installment_date", $lang['error']['invalid_date']);
					$flag=1;
				}
			}
			if(strlen($reschedule_reason) <300)
				$form->setError("reschedule_reason", $lang['error']['min_length_comment']);
		}
		if(!$flag && $confirmReScheduleLoan==0)
		{
			$maxDuedate=$allDates['maxDuedate'];
			$remainPeriod=0;
			$installment_date_temp=$installment_date-36000;
			$forgiveAmount=$database->getForgiveAmount($userid,$loanid);
			$ratio=$database->getPrincipalRatio($loanid);
			if($forgiveAmount)
				$amountAfterForgive= $amount - ($forgiveAmount * $ratio);
			else
				$amountAfterForgive= $amount;

			$total=$database->getTotalPayment($userid, $loanid);
			$remainAmt=$total['amttotal']-$total['paidtotal'];

			$periodFromToday=floor(((1200*$remainAmt)- ($amountAfterForgive  * ($rate + $fee) * $allDates['remainPeriod'])) / ((1200*$installment_amount)-($amountAfterForgive  * ($rate + $fee))));
			if(($allDates['max_repay_period'] < $periodFromToday) || $periodFromToday < 0){
				$form->setError("installment_amount", $lang['error']['toless_amount']);
			}
			elseif($periodFromToday <=$allDates['remainPeriod'])
			{
				$form->setError("installment_amount", $lang['error']['tolarge_amount']);
			}
			else
			{
				$rescheduleDetail['possible_periods']=$period- $allDates['remainPeriod'] + $periodFromToday;
				$rescheduleDetail['original_period']=$original_period;
				$rescheduleDetail['installment_amount']=$installment_amount;
				$rescheduleDetail['installment_date']=$installment_date;
			}
		}
		if($form->num_errors > 0)
			return false;
		else
		{
			if($confirmReScheduleLoan==0){
				$rescheduleDetail['reschedule_reason']=$reschedule_reason;
				$_SESSION['rescheduleDetail']=$rescheduleDetail;
				return true;
			}
			else
			{
				$database->startDbTxn();
				$borrower_id=$this->userid;
				$new_period=$_SESSION['rescheduleDetail']['possible_periods'];
				$reschedule_reason=$_SESSION['rescheduleDetail']['reschedule_reason'];
				$reschedule_id=$database->reschedule($loanid,$borrower_id,$reschedule_reason,$new_period);
				if($reschedule_id !=0)
				{
					$reSchedule=$this->generateReSchedule($borrower_id, $loanid, $new_period, $_SESSION['rescheduleDetail']['installment_amount'], $_SESSION['rescheduleDetail']['installment_date']);
					$res1=$database->setReschedule($borrower_id, $loanid,$reschedule_id,$reSchedule);
					if($res1)
					{
						$res2=$database->updateLoanPeriod($borrower_id, $loanid, $period, $new_period);
						if($res2)
						{
							$total=$database->getTotalPayment($borrower_id, $loanid);
							if(abs($reSchedule[0]['fullTotal']- $total['amttotal']) < 1)
							{
								$database->commitTxn();
								unset($_SESSION['rescheduleDetail']);
								$lendersArray = $database->getLendersAndAmount($loanid, true);
								for($i =0; $i < count($lendersArray); $i++)
								{
									$this->sendRescheduleMailToLender($lendersArray[$i]['lenderid'],$borrower_id,$new_period,$reschedule_reason, false);
								}
								$this->sendRescheduleMailToLender(ADMIN_ID,$borrower_id,$new_period,$reschedule_reason, true);
								$res3=$database->subFeedback1($borrower_id,$borrower_id,$reschedule_reason,0,0,$reschedule_id);
								return true;
							}
							else
							{
								Logger_Array("cvError",'Fulltotal amount mismatch with updated total amount', $loanid, $reSchedule[0]['fullTotal'], $total['amttotal'],$new_period);
							}
						}
						else
						{
							Logger_Array("cvError",'could not updated loanperiod in loanapplic table', $loanid);
						}
					}
					else
					{
						Logger_Array("cvError",'could not updated new schedule in repaymentschedule table', $loanid);
					}
				}
				else
				{
					Logger_Array("cvError",'could not inserted data in reschedule table', $loanid);
				}
				$database->rollbackTxn();
				return false;
			}
		}
	}
	function generateReSchedule($userid, $loanid, $new_period, $installment_amount, $installment_date)
	{
		global $database,$form;
		$oldSchedule=$database->getSchedulefromDB($userid, $loanid);
		$installment_date_margin=$installment_date-36000;
		//margin of 10 hours handing time zone differnce
		$j=-1;
		$k=0;
		$n=0;
		$schedule = array();
		$index=0;
		$fullTotal=0;
		$instAmt=0;
		foreach($oldSchedule as $row)
		{
			if($row['amount'] ==0)
			{
				$schedule[$index] = $row;
				$index++;
				$j++;
			}
			else if($row['amount'] !=0 && $row['paidamt'] !=NULL && $row['amount']==$row['paidamt'])
			{
				$schedule[$index] = $row;
				$fullTotal +=$row['amount'];
				$index++;
				$j++;
			}
			else if($row['amount'] !=0 && $row['paidamt'] !=NULL && $row['amount'] > $row['paidamt'])
			{
				$schedule[$index] = $row;
				$schedule[$index]['amount']=$row['paidamt'];
				$schedule[$index]['update']=1;
				$instAmt +=$row['amount']-$row['paidamt'];
				$fullTotal +=$row['paidamt'];
				$index++;
				$j++;
			}
			else if($row['amount'] !=0 && $row['paidamt'] ==NULL && $row['duedate'] < $installment_date_margin)
			{
				$schedule[$index] = $row;
				$schedule[$index]['amount']=0;
				$schedule[$index]['paidamt']=NULL;
				$schedule[$index]['update']=1;
				$instAmt +=$row['amount'];
				$index++;
				$j++;
			}
			else
			{
				$k++;
				$instAmt +=$row['amount'];
			}
			$n++;
		}
		$lonedata=$database->getLoanfund($userid, $loanid);
		$forgiveAmount=$database->getForgiveAmount($userid,$loanid);
		$ratio=$database->getPrincipalRatio($loanid);
		$amount=$lonedata['AmountGot'];
		$rate=$lonedata['finalrate'];
		$webrate=$lonedata['WebFee'];
		$period=$lonedata['period'];
		$original_period=$lonedata['original_period'];
		if($forgiveAmount)
			$amountAfterForgive= $amount - ($forgiveAmount * $ratio);
		else
			$amountAfterForgive= $amount;
		$interestNew=(($new_period - $period)/12)*(($amountAfterForgive*($rate/100))+($amountAfterForgive*($webrate/100)));
		$totalAmountNew=$instAmt + $interestNew;
		$fullTotal +=$totalAmountNew;
		$totalRemainingPeriod= $k +  $new_period - $period +0;
		$period += 1;
		$duedate=$oldSchedule[$j]['duedate'];
		$count=1;
		$flag=0;
		$totalRemainingPeriodOrg=$totalRemainingPeriod;
		for($i=0; $i<$totalRemainingPeriodOrg; $i++)
		{
			$j++;
			if(isset($oldSchedule[$j]))
			{
				if($totalAmountNew >$installment_amount)
				{
					$newAmount=$installment_amount;
					$totalAmountNew = $totalAmountNew-$installment_amount;
				}
				else
				{
					$newAmount=$totalAmountNew;
					$totalAmountNew = 0;
				}
				$newPaidAmount=NULL;
				$newPaidDate=NULL;
				$schedule[$index] = array('id'=>$oldSchedule[$j]['id'],'userid'=>$oldSchedule[$j]['userid'],'loanid'=>$oldSchedule[$j]['loanid'],'duedate'=>$oldSchedule[$j]['duedate'],'amount' => $newAmount,'paiddate' => $newPaidDate,'paidamt' => $newPaidAmount,'update'=>1);
				$duedate=$oldSchedule[$j]['duedate'];
				$flag=1;
				$index++;
			}
			else if($flag==0 && strtotime('+ '.$count.' month ' , $duedate) < $installment_date_margin)
			{
				$schedule[$index] = array('duedate'=> strtotime('+ '.$count.' month ' , $duedate), 'amount' => 0,'paiddate' => NULL,'paidamt' => NULL);
				$count++;
				$index++;
				$totalRemainingPeriod--;
			}
			else
			{
				if($totalAmountNew >$installment_amount)
				{
					$newAmount=$installment_amount;
					$totalAmountNew = $totalAmountNew-$installment_amount;
				}
				else
				{
					$newAmount=$totalAmountNew;
					$totalAmountNew = 0;
				}
				$newPaidAmount=NULL;
				$newPaidDate=NULL;
				$schedule[$index] = array('duedate'=> strtotime('+ '.$count.' month ' , $duedate), 'amount' => $newAmount,'paiddate' => $newPaidDate,'paidamt' => $newPaidAmount);
				$count++;
				$index++;
			}
		}
		$schedule[0]['fullTotal']=$fullTotal;
		return $schedule;
	}
	function checkReferralCommission($applicant_id, $percentRepay)
	{
		global $database;
		$time=time();
		$commission= $database->getPendingCommissionByApplicantId($applicant_id);
		if(!empty($commission))
		{
			if($commission['percent_repay'] <= $percentRepay)
			{
				$loanid=$database->getActiveLoanid($commission['referrer_id']);
				if($loanid)
				{
					$CurrencyRate = $database->getCurrentRate($commission['referrer_id']);
					$repayment=$database->getTotalPayment($commission['referrer_id'], $loanid);
					$balance= $repayment['amttotal'] - $repayment['paidtotal'];
					if($balance >= $commission['ref_commission'])
					{
						$database->startDbTxn();
						$comm_admin= -1 * convertToDollar($commission['ref_commission'], $CurrencyRate);
						$result2= $database->setTransaction(ADMIN_ID,$comm_admin,'Referral Program Debit',$loanid,$CurrencyRate,REFERRAL_DEBIT);
						if($result2)
						{
							$result= $this->madePayment($commission['referrer_id'], $loanid, $time,$commission['ref_commission'], false, REFERRAL_CREDIT);
							if($result==0 || $result==-1){
								$database->rollbackTxn();
							}
							else
							{
								$result1= $database->updateCommission($commission['id'], $commission['ref_commission'], $time, $loanid);
								if($result1)
									$database->commitTxn();
								else
									$database->rollbackTxn();
							}
						}
						else
							$database->rollbackTxn();
					}
					else
					{
						$database->startDbTxn();
						$comm_admin= -1 * convertToDollar($balance, $CurrencyRate);
						$result2= $database->setTransaction(ADMIN_ID,$comm_admin,'Referral Program Debit',$loanid,$CurrencyRate,REFERRAL_DEBIT);
						if($result2)
						{
							$result= $this->madePayment($commission['referrer_id'], $loanid, $time, $balance, true, REFERRAL_CREDIT);
							if($result==0 || $result==-1){
								$database->rollbackTxn();
							}
							else
							{
								$result1= $database->updateCommission($commission['id'], $balance, $time, $loanid);
								if(!$result1)
									$database->rollbackTxn();
								else
								{
									$database->commitTxn();
									$From=EMAIL_FROM_ADDR;
									$templet="editables/email/simplemail.html";
									require("editables/mailtext.php");
									$Subject=$lang['mailtext']['borrower_referral_admin_sub'];
									$params['bname'] = $database->getNameById($commission['referrer_id']);
									$params['applicant_name'] = $database->getNameById($applicant_id);
									$params['commission'] = $commission['ref_commission'];
									$params['credit_amount'] = $balance;
									$params['due_amount'] = $commission['ref_commission']- $balance;
									$message = $this->formMessage($lang['mailtext']['borrower_referral_admin_body_2'], $params);
									$reply=$this->mailSending($From, 'Admin', ADMIN_EMAIL_ADDR, $Subject, $message,$templet);
								}
							}
						}
						else
							$database->rollbackTxn();
					}
				}
				else
				{
					Logger_Array("Borrower Referral Credit Failed",'applicant id, referrer id', $applicant_id, $commission['referrer_id']);
					$reason="No active loan, Mail sent to admin.";
					$database->updateCommissionFailed($commission['id'], $reason);
					$From=EMAIL_FROM_ADDR;
					$templet="editables/email/simplemail.html";
					require("editables/mailtext.php");
					$Subject=$lang['mailtext']['borrower_referral_admin_sub'];
					$params['bname'] = $database->getNameById($commission['referrer_id']);
					$params['applicant_name'] = $database->getNameById($applicant_id);
					$params['commission'] = $commission['ref_commission'];
					$message = $this->formMessage($lang['mailtext']['borrower_referral_admin_body_1'], $params);
					$reply=$this->mailSending($From, 'Admin', ADMIN_EMAIL_ADDR, $Subject, $message,$templet);
				}
			}
		}
	}
	/* -------------------Borrower Section End----------------------- */


	/* -------------------Lender Section Start----------------------- */

	function register_l($username, $pass1, $pass2, $email, $fname, $lname, $about, $photo, $city, $country, $hide_Amount, $loan_comment, $tnc, $user_guess, &$id, $card_code, $frnds_emails, $frnds_msg, $loan_app_notify, $loan_repayment_credited, $subscribe_newsletter, $referral_code)
	{
		global $session, $database, $form, $mailer, $validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateLenderReg($username, $pass1, $pass2, $fname, $lname, $email, $frnds_emails, $city, $country, $tnc, $user_guess, $card_code, $referral_code);

		if($form->num_errors > 0){
			return 1;  //Errors with form
		}
		else
		{
			$photon='exist';
			if(!$photo || strlen($photo)<1)
				$photon="none";
			$retVal = $database->addLender($username, $pass1, $email, $fname, $lname, $about, $photon, $city, $country, $hide_Amount, $loan_comment, $tnc, $loan_app_notify, $loan_repayment_credited, $subscribe_newsletter);
			$id = $database->getUserId($username);
			if($referral_code || strlen($referral_code)>1){
				$amount=$database->getReferralCodeamount($referral_code);
				$txn_id = $database->setTransaction($id, $amount,'Referral Code Redemption',0, 0, REFERRAL_CODE,1);
				$cookval=md5(time());
				$refretVal = $database->addReferralCode($referral_code,$id,$cookval,$txn_id);
				setcookie("xmtpysp", $cookval, time()+COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			}
			if(!empty($id))
			{
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require ("editables/mailtext.php");
				$Subject=$lang['mailtext']['LenderReg-subject'];
				$To=$params['name'] = $fname." ".$lname;
				$message = $this->formMessage($lang['mailtext']['LenderReg-msg'], $params);
				$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet);

				/*$Subject=$lang['mailtext']['email_verification_sub'];
				$To=$params['name'] = $fname." ".$lname;
				$activate_key =	$database->getActivationKey($id);
				$link = SITE_URL."index.php?p=51&ident=$id&activate=$activate_key";
				$params['verify_link'] = $link;
				$message = $this->formMessage($lang['mailtext']['email_verification_body'], $params);
				$this->mailSending($From, $To, $email, $Subject, $message,$templet);
				$_SESSION['lEmailVerifiedPending']=true;*/

				/* these 4 lines added by chetan for redeem gift card in new lender registration */
				if(strlen($card_code=trim($card_code)) > 0)
				{
					$res = $this->redeemCard($card_code, $id);
					$_SESSION['giftRedeemResult']=$res;
					$_SESSION['giftRedeemError']=$form->error('cardRedeemError');
				}
				if(strlen($frnds_emails=trim($frnds_emails))>0)
				{
					$lender_name = $fname." ".$lname;
					$this->sentInviteMails($id,$frnds_emails,$frnds_msg,$lender_name);
				}
				if($subscribe_newsletter == 1){
					$this->subscribeLender($email, $fname, $lname);
				}
		}
			return $retVal;
		}
	}
	function editprofile_l($username, $pass1, $pass2, $email, $fname, $lname, $about, $photo, $city, $country, $hide_Amount, $comment, $id, $loan_app_notify, $loan_repayment_credited, $subscribe_newsletter)
	{
		global $session, $database, $form, $mailer, $validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateLenderEdit($username, $pass1, $pass2, $fname, $lname, $email, $city, $country);

		if($form->num_errors > 0){
			return 1;  //Errors with form
		}
		else
		{
			$photon=$photo;
			if(!$photo || strlen($photo=trim($photo))<1){
				$photon="none";
			}
			$LenderDetails=$database->getLenderDetails($id);
			$rtn=$database->updateLender($username, $pass1, $email, $fname, $lname, $about, $photon, $city, $country, $hide_Amount, $comment, $id, $loan_app_notify, $loan_repayment_credited, $subscribe_newsletter);
			if($rtn==0)
			{
				if($LenderDetails['subscribe_newsletter']==0 && $subscribe_newsletter==1)
					$this->subscribeLender($email, $fname, $lname);
				else if($LenderDetails['subscribe_newsletter']==1 && $subscribe_newsletter==0)
					$this->unSubscribeLender($email);
			}
			return $rtn;
		}
	}
	function repaymentfeedback($borrowerid,$loanid,$feedback,$pcomment,$addmore,$cid)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($this->userid)){
			$form->setError("feedback_userid", $lang['error']['login_to_feedback']);
		}
		else
		{
			if(empty($feedback)){
				$form->setError("feedback", $lang['error']['prev_loandetail']);
			}
			if(empty($pcomment)){
				$form->setError("comment", $lang['error']['prev_loancomment']);
			}
		}
		if($form->num_errors > 0){
			return 1;
		}
		$result=$database->repaymentfeedback($this->userid,$borrowerid,$loanid,$feedback,$pcomment,$addmore,$cid);
		if(!$result){
			$form->setError("dberror", $lang['error']['error_website']);
			return 1;
		}
		else
			return 0;
	}
	function amountToUseForBid($userid)
	{
		global $database, $form;
		$amtInAcct = $database->getTransaction($userid,0);
		$amtInActiveBids = $database->amountInActiveBids($userid);
		$amtAvailable = $amtInAcct - $amtInActiveBids;
		return $amtAvailable;
	}
	function TotalamountToUseForBid()
	{	
		global $database, $form;
		$amtInAcct =$database->getTotalLenderAmount();
		$lenders=$database->getAllLenderId();
		$totalAmtAvailable=0;
		$amtInActiveBids=0;
		foreach($lenders as $lender){
		$userid=$lender['userid'];
		$amtInActiveBids += $database->amountInActiveBids($userid);
		}
		$amtAvailable = $amtInAcct - $amtInActiveBids;
		$totalAmtAvailable+=$amtAvailable;
		return $totalAmtAvailable;
	}
	function placeBid($loanid, $brwid, $amount, $interest, $up=0)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$redirectPayment=false;
		$availableAmt=0;
		if(empty($this->userid))
		{
			$field = ($up) ? "bid_userid1" : "bid_userid";
			$form->setError($field, $lang['error']['login_to_bid']);
		}
		else
		{
			$field = ($up) ? "pamount1" : "pamount";
			$availableAmt = $this->amountToUseForBid($this->userid);
			$ramount=$database->getOpenLoanAmount($brwid, $loanid);
			$damount=convertToDollar($ramount, $database->getCurrentRate($brwid));
			$BidAmt=$database->getTotalBid($brwid,$loanid);
			if(empty($amount)){
				$form->setError($field, $lang['error']['invalid_bidamt']);
			}
			else if(!eregi("^[0-9/.]", $amount)){
				$form->setError($field, $lang['error']['invalid_bidamt']);
			}
			else if($database->getMinimumFund() > $amount){
				$form->setError($field, $lang['error']['greater_bidamt']." USD ". number_format($database->getMinimumFund(),2, '.', ','));
			}
			else if($damount < $amount){
				$form->setError($field, $lang['error']['lower_bidamt']." USD ". number_format($damount,2, '.', ','));
			}
			else if($availableAmt < $amount){
				//$form->setError($field, $lang['error']['insuffi_amount']." USD ". number_format($availableAmt,2, '.', ','));
				$redirectPayment=true;
			}
			$avint = $database->getAvgBidInterest($brwid, $loanid);
			$loan =$database->getLoanDetailbyLoneID($loanid);
			$field = ($up) ? "pinterest1" : "pinterest";
			if($interest < 0 ){
				$form->setError($field, $lang['error']['invalid_bidint']);
			}
			else if($interest > $loan['interest'] - $loan['WebFee']){
				$form->setError($field, $lang['error']['lower_bidint']." ". number_format($loan['interest'] - $loan['WebFee'],2, '.', ',')."%");
			}
			else if($interest > $avint && $avint >0 && $BidAmt >= $damount ){
				$form->setError($field, $lang['error']['lower_bidint']." ". number_format($avint,2, '.', ',')."%");
			}
			else if(!eregi("^[0-9/.]", $interest)){
				$form->setError($field, $lang['error']['invalid_bidint']);
			}
		}
		if($form->num_errors >0){
			return 3;
		}
		if($redirectPayment) {
			$id = $database->addBidPayment($loanid, $this->userid, $brwid, $amount, $interest, $up);
			if($id) {
				$_SESSION['bidPaymentId']=$id;
				return 2;
			} else {
				$field = ($up) ? "pamount1" : "pamount";
				$form->setError($field, $lang['error']['insuffi_amount']." USD ". number_format($availableAmt,2, '.', ','));
				return 3;
			}			
		}
		$bids1=$database->getLoanBids($brwid, $loanid);
		if(!empty($bids1))
		{
			$totBidAmt = 0;
			$totBidAmt1 = 0;
			$acceptedAmt = 0;
			$acceptedAmt1 = 0;
			$bidamount1 =0;
			$z = 0;
			foreach($bids1 as $rows1)
			{
				$bidamount1=$rows1['bidamount'];
				$totBidAmt1 += $bidamount1;
				if($totBidAmt1 >= $damount)
				{
					$acceptedAmt1 =  $damount - ($totBidAmt1 - $bidamount1);
					if($acceptedAmt1 < 0)
						$acceptedAmt1 =0;
				}
				else
				{
					$acceptedAmt1 = $bidamount1;
				}
				$bids1[$z]['acceptedAmt']=$acceptedAmt1;
				$z++;
			}
			foreach ($bids1 as $key => $row)
			$date1[$key] = $row['biddate'];
			array_multisort($date1, SORT_ASC, $bids1);
		}
		$result=$database->lenderBid($this->userid, $loanid, $brwid, $amount, $interest);
		if($result)
		{
			$bids=$database->getLoanBids($brwid, $loanid);
			if($bids)
			{
				$totBidAmt = 0;
				$totBidAmt1 = 0;
				$acceptedAmt = 0;
				$acceptedAmt1 = 0;
				$bidamount1 =0;
				$z = 0;
				foreach($bids as $rows1)
				{
					$bidamount1=$rows1['bidamount'];
					$totBidAmt1 += $bidamount1;
					if($totBidAmt1 >= $damount)
					{
						$acceptedAmt1 =  $damount - ($totBidAmt1 - $bidamount1);
						if($acceptedAmt1 < 0)
							$acceptedAmt1 =0;
					}
					else
					{
						$acceptedAmt1 = $bidamount1;
					}
					$bids[$z]['acceptedAmt']=$acceptedAmt1;
					$z++;
				}
				foreach ($bids as $key => $row)
					$date[$key] = $row['biddate'];
				array_multisort($date, SORT_ASC, $bids);

				$bname = $database->getNameById($brwid);
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require ("editables/mailtext.php");
				$j=0;
				foreach($bids as $rows)
				{
					$bidddid=$rows['bidid'];
					$brrid=$rows['borrowerid'];
					$lendid=$rows['lenderid'];
					$lname=$rows["Firstname"].' '.$rows['LastName'];
					$lusername=$rows['username'];
					$bidamount=$rows['bidamount'];
					$kamount=convertToNative($bidamount, $CurrencyRate);
					$bidint=$rows['bidint'];
					$biddate=$rows['biddate'];
					$acceptedAmt = $rows['acceptedAmt'];
					$totBidAmt += $bidamount;
					if(round(($bids1[$j]['acceptedAmt'] - $bids[$j]['acceptedAmt']),2) >0.00 || $j==count($bids))
					{
						if(round(($bidamount - $acceptedAmt),2) >0.00  && round($acceptedAmt,2) >0.00)
						{
							$res = $database->getEmail($lendid);
							$lenderEmail = $res['email'];
							$To=$params['lname'] = $database->getNameById($lendid);
							$params['bid_down_amt'] = number_format($acceptedAmt, 2, ".", ",");
							$params['bid_amt'] = number_format($bidamount, 2, ".", ",");
							$params['borrower_link'] = SITE_URL."index.php?p=14&u=$brwid&l=$loanid";
							$params['bname'] = $bname;
							$params['bid_interest'] = number_format($bidint, 2, ".", ",");
							$params['out_bid_amt'] = number_format(($bidamount-$acceptedAmt), 2, ".", ",");

							$Subject=$this->formMessage($lang['mailtext']['bid_down_sub'], $params);
							$message = $this->formMessage($lang['mailtext']['bid_down_body'], $params);

							$reply=$this->mailSending($From, $To, $lenderEmail, $Subject, $message,$templet);
						}
						else if(round($acceptedAmt,2) ==0.00)
						{
							$res = $database->getEmail($lendid);
							$lenderEmail = $res['email'];
							$To=$params['lname'] = $database->getNameById($lendid);
							$params['out_bid_amt'] = number_format($bidamount, 2, ".", ",");
							$params['bid_amt'] = number_format($bidamount, 2, ".", ",");
							$params['borrower_link'] = SITE_URL."index.php?p=14&u=$brwid&l=$loanid";
							$params['bname'] = $bname;
							$params['bid_interest'] = number_format($bidint, 2, ".", ",");

							$Subject=$this->formMessage($lang['mailtext']['bid_out_sub'], $params);
							$message = $this->formMessage($lang['mailtext']['bid_out_body'], $params);

							$reply=$this->mailSending($From, $To, $lenderEmail, $Subject, $message,$templet);
						}
					}
					$j++;
				}
			}
			if($up) {
				$_SESSION['lender_bid_success1']=1;
			} else {
				$_SESSION['lender_bid_success2']=1;
			}
			$_SESSION['lender_bid_success_amt']=$amount;
			$_SESSION['lender_bid_success_int']=$interest;
			return 0;
		}
		else{
			return 1;
		}
	}
	function editbid($loanid, $brwid,$bidid,$amount,$interest)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$biddetail=$database->getBidByBidid($bidid);
		$lastbidamt=$biddetail['bidamount'];
		$incramt=$amount-$lastbidamt;
		$lastbidint=$biddetail['bidint'];
		$availableAmt = $this->amountToUseForBid($this->userid);
		$ramount=$database->getOpenLoanAmount($brwid, $loanid);
		$damount=convertToDollar($ramount, $database->getCurrentRate($brwid));
		if(empty($amount)){
			$form->setError('pamount', $lang['error']['invalid_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError('pamount', $lang['error']['invalid_amount']);
		}
		else if($incramt <0){
			$form->setError('pamount', $lang['error']['lower_newbidamt']." ".$lastbidamt);
		}
		else if($damount < $amount){
			$form->setError('pamount', $lang['error']['lower_bidamt']." USD ". $damount);
		}
		else if($availableAmt < $incramt){
			$form->setError('pamount', $lang['error']['insuffi_amount']." USD". $availableAmt);
		}
		if(empty($interest)){
			$form->setError('pinterest', $lang['error']['invalid_bidint']);
		}
		else
		{
			if(!eregi("^[0-9/.]", $interest)){
				$form->setError('pinterest', $lang['error']['invalid_bidint']);
			}
			else{
				//if value is greater then  priveous interest
				if($interest>$lastbidint)
					$form->setError('pinterest', $lang['error']['lower_newbidint']." ".$lastbidint);
			}
		}
		if($form->num_errors > 0){
			return 3;
		}
		$result=$database->editbid($bidid,$amount,$interest);
		if($result){
			return 0;
		}
		else{
			return 1;
		}
	}
	function otherwithdraw($OtherCurr, $OtherBname,$OtherBAddress, $OtherCity,$OtherCountry, $OtherAno, $OtherName,$amount)
	{
		global $database, $form,$mailer1;
		global $database, $form,$mailer1;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$availAmt = $this->amountToUseForBid($this->userid);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError("amount", $lang['error']['invalid_amount']);
		}
		else
		{
			$availAmt = $this->amountToUseForBid($this->userid);
			if($amount>$availAmt)
				$form->setError("amount", $lang['error']['lower_amount']." (USD <b> ".number_format($availAmt, 2, ".", "")."</b>)");
		}
		if(empty($OtherBname)){
			$form->setError("OtherBname", $lang['error']['empty_bankname']);
		}
		if(empty($OtherBAddress)){
			$form->setError("OtherBAddress", $lang['error']['empty_address']);
		}
		if(empty($OtherCity)){
			$form->setError("OtherCity", $lang['error']['empty_bankcity']);
		}
		if(empty($OtherName)){
			$form->setError("OtherName", $lang['error']['empty_accountname']);
		}
		if(empty($OtherAno)==0){
			$form->setError("OtherAno", $lang['error']['empty_accountno']);
		}
		else if(!eregi("^[0-9/.]", $OtherAno) ){
			$form->setError("OtherAno", $lang['error']['invalid_accountno']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$result=$database->otherwithdraw($OtherCurr, $OtherBname,$OtherBAddress, $OtherCity,$OtherCountry, $OtherAno, $OtherName,$amount,$this->userid);
			$amount*= -1;
			$CurrencyRate=0.00;
			$ret=$database->setTransaction($this->userid,$amount,'Funds withdrawal from lender account',0, $CurrencyRate,FUND_WITHDRAW);

			if($result==0){//invalid AMOUNT
				return 2;
			}
			else
			{
				///send new mail to admin about the request
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require ("editables/mailtext.php");
				$Subject=$lang['mailtext']['withdraw-subject'];
				$To=$params['name'] = ADMIN_EMAIL_ADDR;
				$params['Amount'] = $amount;
				$message = $this->formMessage($lang['mailtext']['withdraw-msg'], $params);
				$reply=$this->mailSending($From, $To, ADMIN_EMAIL_ADDR, $Subject, $message,$templet);
				return 1;
			}
		}
	}
	function withdraw($amount, $paypalemail)
	{
		global $database, $form,$mailer1;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$availAmt = $this->amountToUseForBid($this->userid);
		$amount_org = $amount;
		if(empty($amount)){
			$form->setError("amount", $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError("amount", $lang['error']['invalid_amount']);
		}
		else
		{
			$availAmt = $this->amountToUseForBid($this->userid);
			if($amount>$availAmt)
				$form->setError("amount", $lang['error']['lower_amount']." (USD <b> ".number_format($availAmt, 2, ".", "")."</b>)");
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$result=$database->withdraw($amount,$this->userid, $paypalemail);
			$amount*= -1;
			$CurrencyRate=0.00;
			$ret=$database->setTransaction($this->userid,$amount,'Funds withdrawal from lender account',0, $CurrencyRate,FUND_WITHDRAW);

			if($ret==0){//invalid AMOUNT
				return 2;
			}
			else
			{
				///send new mail to admin about the request
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require ("editables/mailtext.php");
				$Subject=$lang['mailtext']['withdraw-subject'];
				$To=$params['name'] = ADMIN_EMAIL_ADDR;
				$params['Amount'] = $amount_org;
				$message = $this->formMessage($lang['mailtext']['withdraw-msg'], $params);
				$reply=$this->mailSending($From, $To, ADMIN_EMAIL_ADDR, $Subject, $message,$templet);

				$res = $database->getEmail($this->userid);
				$Subject=$lang['mailtext']['withdraw_request_sub'];
				$To=$params['name'] = $res['name'];
				$params['date'] = date("M j, Y",time());
				$params['amount'] = $amount_org;
				$params['paypal_email'] = $paypalemail;
				$message = $this->formMessage($lang['mailtext']['withdraw_request_body_out'], $params);
				$lenderEmail = $res['email'];
				$reply=$this->mailSending($From, $To, $lenderEmail, $Subject, $message,$templet);

				return 1;
			}
		}
	}
	function PaySimplewithdraw($PaysimpleName, $PaysimpleAddress1,$PaysimpleAddress2, $PaysimpleCity,$PaysimpleState, $PaysimpleZip, $PaysimplePno,$amount)
	{
		global $database, $form,$mailer1;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$availAmt = $this->amountToUseForBid($this->userid);
		$amount_org = $amount;
		if(empty($amount)){
			$form->setError("PaysimpleAmt", $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError("PaysimpleAmt", $lang['error']['invalid_amount']);
		}
		else
		{
			$availAmt = $this->amountToUseForBid($this->userid);
			if($amount>$availAmt)
				$form->setError("PaysimpleAmt", $lang['error']['lower_amount']." (USD <b> ".number_format($availAmt, 2, ".", "")."</b>)");
		}
		if(empty($PaysimplePno)){
			$form->setError("PaysimplePno", $lang['error']['empty_phone']);
		}
		else if(!eregi("^[0-9/.]", $PaysimplePno) ){
			$form->setError("PaysimplePno", $lang['error']['invalid_phone']);
		}
		if(empty($PaysimpleAddress1)){
			$form->setError("PaysimpleAddress1", $lang['error']['empty_address']);
		}
		if(empty($PaysimpleCity)){
			$form->setError("PaysimpleCity", $lang['error']['empty_city']);
		}
		if(empty($PaysimpleState)){
			$form->setError("PaysimpleState", $lang['error']['empty_state']);
		}
		if(empty($PaysimpleZip)){
			$form->setError("PaysimpleZip", $lang['error']['empty_zip']);
		}
		else if(!eregi("^[0-9/.]", $PaysimpleZip)){
			$form->setError("PaysimpleZip", $lang['error']['invalid_zip']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$result=$database->PaySimplewithdraw($PaysimpleName, $PaysimpleAddress1,$PaysimpleAddress2, $PaysimpleCity,$PaysimpleState, $PaysimpleZip, $PaysimplePno,$amount,$this->userid);

			$amount*= -1;
			$CurrencyRate=0.00;
			$result=$database->setTransaction($this->userid,$amount,'Funds withdrawal from lender account',0, $CurrencyRate, FUND_WITHDRAW);

			if($result==0){//invalid AMOUNT
				return 2;
			}
			else
			{
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require ("editables/mailtext.php");
				$Subject=$lang['mailtext']['withdraw-subject'];
				$To=$params['name'] = ADMIN_EMAIL_ADDR;
				$params['Amount'] = $amount_org;
				$message = $this->formMessage($lang['mailtext']['withdraw-msg'], $params);
				$reply=$this->mailSending($From, $To, ADMIN_EMAIL_ADDR, $Subject, $message,$templet);

				//mail sent to the lender
				$res = $database->getEmail($this->userid);
				$Subject=$lang['mailtext']['withdraw_request_sub'];
				$To=$params['name'] = $res['name'];
				$params['date'] = date("M j, Y",time());
				$params['amount'] = $amount_org;
				$params['address1'] = $PaysimpleAddress1;
				$params['address2'] = $PaysimpleAddress2;
				$params['city'] = $PaysimpleCity;
				$params['state'] = $PaysimpleState;
				$params['zip'] = $PaysimpleZip;
				$message = $this->formMessage($lang['mailtext']['withdraw_request_body_us'], $params);
				$lenderEmail = $res['email'];
				$reply=$this->mailSending($From, $To, $lenderEmail, $Subject, $message,$templet);

				return 1;
			}
		}
	}
	function payotherwithdrawadmin($amount,$id,$rowid)
	{
		global $database, $form,$mailer1;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$availAmt = $this->amountToUseForBid($id);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError("amount", $lang['error']['invalid_amount']);
		}
		else if($amount > $availAmt){
			$form->setError("amount", $lang['error']['lower_amount']." (USD ".number_format($availAmt, 2, ".", "").")");
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$result=$database->updateotherwithdraw($rowid);
			if($result==0){//invalid AMOUNT
				return 0;
			}
			else{///send new mail to user about the request of payment accepted
				return 1;
			}
		}
	}
	function paysimplewithdrawadmin($amount,$id,$rowid)
	{
		global $database, $form,$mailer1;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$availAmt = $this->amountToUseForBid($id);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError("amount", $lang['error']['invalid_amount']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$result=$database->updatepaysimplewithdraw($rowid);
			if($result==0){//invalid AMOUNT
				return 0;
			}
			else{///send new mail to user about the request of payment accepted
				return 1;
			}
		}
	}
	function paywithdraw($amount,$id,$rowid)
	{
		global $database, $form,$mailer1;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$availAmt = $this->amountToUseForBid($id);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError("amount", $lang['error']['invalid_amount']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$amount*= -1;
			$CurrencyRate=0.00;
			$ret=1;// As the amount is already deducted $database->setTransaction($id,$amount,'Funds withdrawal from lender account',0, $CurrencyRate);
			if($ret==1)
				$result=$database->updatewithdraw($rowid);
			if($result==0){//invalid AMOUNT
				return 0;
			}
			else
			{	///send new mail to user about the request of payment accepted
				$Detail=$database->getEmail($userid);
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require ("editables/mailtext.php");
				$Subject=$lang['mailtext']['paywithdraw-subject'];
				$To=$params['name'] = $Detail['name'];
				$params['Amount'] = $amount;
				$message = $this->formMessage($lang['mailtext']['paywithdraw-msg'], $params);
				$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
				return 1;
			}
		}
	}
	function promotLoan($uid, $lid, $frnds_emails, $frnds_msg, $amt_req, $amt_need, $interest, $fbrating, $fbrating_count, $location, $borrower_fname, $borrower_lname, $loan_use, $loan_type)
	{
		global $database, $session,$form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if($this->userlevel == LENDER_LEVEL)
		{
			if(empty($frnds_emails))
			{
				$form->setError("emailError", $lang['error']['empty_emails']);
				return 0;
			}
			$email_ids =  explode(",",$frnds_emails);
			for($i=0; $i<count($email_ids); $i++)
			{
				if(!eregi("^[[:alnum:]][a-z0-9_.-]*@[a-z0-9.-]+\.[a-z]{2,4}$", trim($email_ids[$i])))
				{
					$form->setError("emailError", $lang['error']['invalid_emails']);
					return 0;
				}
			}
			if($form->num_errors == 0)
			{
				return $this->sendPromotLoanMail($uid,$lid,$email_ids,$frnds_msg,$amt_req,$amt_need,$interest,$fbrating,$fbrating_count, $location,$borrower_fname,$borrower_lname,$loan_use,$loan_type);
			}
		}
		else if($this->userlevel == GUEST_LEVEL){
			$form->setError("logedinError", $lang['error']['login_sendmail']);
			return 0;
		}
		else
		{
			$form->setError("logedinError", $lang['error']['unautho_sendmail']);
			return 0;
		}
	}
	function get_contacts($email,$pass,$provider)
	{
		global $database, $session,$form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(!$provider)
		{
			$form->setError("emailError", $lang['error']['empty_provider']);
			return 0;
		}
		if(!$email || strlen($email=trim($email))<1)
		{
			$form->setError("emailError", $lang['error']['empty_email']);
			return 0;
		}
		if(!eregi("^[[:alnum:]][a-z0-9_.-]*@[a-z0-9.-]+\.[a-z]{2,4}$", trim($email)))
		{
			$form->setError("emailError", $lang['error']['invalid_email']);
			return 0;
		}
		if(!$pass || strlen($pass)<1)
		{
			$form->setError("emailError", $lang['error']['empty_password']);
			return 0;
		}
		if($form->num_errors == 0)
		{
			include('inviter/openinviter.php');
			$inviter=new OpenInviter();
			$oi_services=$inviter->getPlugins();
			$inviter->startPlugin($provider);
			$internal=$inviter->getInternalError();
			if ($internal)
			{
				$form->setError("emailError", $lang['error']['error_occure']);
				return 0;
			}
			elseif (!$inviter->login($email,$pass))
			{
				$form->setError("emailError", $lang['error']['invalid_userpass']);
				return 0;
			}
			elseif (false===$contacts=$inviter->getMyContacts())
			{
				echo "Unable to get contacts ! Please try again";
				return 0;
			}
			$_SESSION['contacts']=$contacts;
			return 1;

		}
	}
	function invite_frnds($frnds_emails,$frnds_msg, $loanid,$userName,$userEmail)
	{
		global $database, $session,$form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($this->userid))
		{
				if(!$userName || strlen($userName=trim($userName))==0)
					$form->setError("user_name", $lang['error']['invite_user_name']);
				if(!$userEmail || strlen($userEmail=trim($userEmail))==0)
					$form->setError("user_email", $lang['error']['invite_user_email']);
				else
					$validation->checkEmail($userEmail, "user_email");
		}
		else if($this->userlevel != LENDER_LEVEL)
		{
			$form->setError("loginError", $lang['error']['unautho_sendmail']);
		}
		if(empty($frnds_emails)){
				$form->setError("emailError", $lang['error']['empty_emails']);
			}
			if(!empty($frnds_emails)){
			$email_ids =  explode(",",$frnds_emails);
			if(!empty($email_ids)){
			for($i=0; $i<count($email_ids); $i++)
			{
				if(!eregi("^[[:alnum:]][a-z0-9_.-]*@[a-z0-9.-]+\.[a-z]{2,4}$", trim($email_ids[$i])))
				{
					$form->setError("emailError", $lang['error']['invalid_emails']);
				}
			}
		}
	}
	if(!empty($userEmail) && !eregi("^[[:alnum:]][a-z0-9_.-]*@[a-z0-9.-]+\.[a-z]{2,4}$", trim($userEmail))) {
			$form->setError("user_email", $lang['error']['invalid_email']);
		}
		if($form->num_errors >0){
			$_SESSION['frnds_emails']=$frnds_emails;
			$_SESSION['frnds_msg']=$frnds_msg;
			return 0;
		}
		else
		{	
			$lender_name= (!empty($userName)) ? $userName : $this->fullname;
			$lender_email = (!empty($userEmail)) ? $userEmail : null;
			unset($_SESSION['frnds_emails']);
			unset($_SESSION['frnds_msg']);
			$id = $this->userid;
			if(empty($loanid)){
				$rep = $this->sentInviteMails($id,$frnds_emails,$frnds_msg,$lender_name ,$lender_email);
				return $rep;
			}
			else
			{
				$loanDetail=$database->getLoanDetails($loanid);
				$totBid=$database->getTotalBid($loanDetail['borrowerid'],$loanDetail['loanid']);
				if($loanDetail['reqdamt'] > $totBid)
				{
					$stilneed=number_format(($loanDetail['reqdamt']-$totBid),2, '.', ',');
					$int = number_format(($database->getAvgBidInterest($loanDetail['borrowerid'],$loanDetail['loanid'])), 2, '.', ',');
				}
				else
				{
					$stilneed=0;
					$int = number_format(($loanDetail['interest'] - $loanDetail['WebFee']), 2, '.', ',');
				}
				$reqdamt= number_format($loanDetail['reqdamt'],2, '.', ',');
				$report=$database->loanReport($loanDetail['borrowerid']);
				$f=number_format($report['feedback']);
				$cf=$report['Totalfeedback'];
				$brw=$database->getBorrowerDetails($loanDetail['borrowerid']);
				$location=$brw['City'].', '.$database->mysetCountry($brw['Country']);
				if($loanDetail['tr_loanuse']==null || $loanDetail['tr_loanuse']=="")
					$loan_use=$loanDetail['loanuse'];
				else
					$loan_use=$loanDetail['tr_loanuse'];
				return $this->sendPromotLoanMail($loanDetail['borrowerid'], $loanDetail['loanid'], $email_ids, $frnds_msg, $reqdamt, $stilneed, $int, $f, $cf, $location, $brw['FirstName'], $brw['LastName'], $loan_use, $loanDetail['active'],$lender_name,$lender_email);
			}
		}
	}
	function giftCardOrder($order_type, $order_cost, $cards, $recipients, $tos, $froms, $msgs, $senders, $date)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		$ip=$_SERVER['REMOTE_ADDR'];
		$userid = $this->userid;
		$total_cost =0;
		for($i=0; $i<count($order_cost); $i++)
		{
			$total_cost += $order_cost[$i];
		}
		$res = $database->setGiftTransaction($userid,$order_type, $order_cost, $total_cost, $cards, $recipients, $tos, $froms, $msgs, $senders, $date, $ip);
		if($res)
		{
			header("Location: index.php?p=27");
		}
		else
		{
			echo "There was some problem please try again <a href='index.php?p=26'>click here</a>";
		}
	}
	function redeemCard($card_code, $id=0)
	{
		global $database, $session, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$res = $database->CheckGiftCardCode($card_code);
		if($res == 3){
			$form->setError("cardRedeemError", $lang['error']['dup_cardcode']);
			return $res;
		}
		else if($res ==2){
			$form->setError("cardRedeemError", $lang['error']['invalid_cardcode']);
			return $res;
		}
		else if($res ==0){
			$form->setError("cardRedeemError", $lang['error']['invalid_cardcode']);
			return $res;
		}
		else if($res ==1)
		{
			$result = $database->CheckGiftCardClaimed($card_code);
			if($result == 1){
				$form->setError("cardRedeemError", $lang['error']['redemed_cardcode']);
				return 0;
			}
			else
			{
				$exp_date = $database->getGiftCardExpireDate($card_code);
				$currentdate = time();
				if($exp_date < $currentdate){
					$exdate = date ( 'M j, Y', $exp_date);
					$form->setError("cardRedeemError", $lang['error']['expired_cardcode']." ".$exdate);
					return 0;
				}
				else
				{
					$amount = $database->GetGiftCardAmount($card_code);
					if($id == 0){
						$userid  = $this->userid;    /* this id is taken from session in case existing lender wants to redeem gift card  */
					}
					else
					{
						$userid  = $id;   /* this id is taken from register_l function in case new lender registration   */
						$_SESSION['giftRedeemAmt']=$amount;    /* this amount set in session in case new lender registration   */
					}
					$res1 = $database->setTransaction($userid, $amount,'Gift Card Redemption',0, 0, GIFT_REDEEM);
					$res2 = $database->setGiftCardClaimed($card_code);
					if($res1 == 0){
						$form->setError("cardRedeemError", $lang['error']['error_transaction']);
						return 0;
					}
					else
						return 1;
				}
			}
		}
	}
	public function registerEmail($email)
	{
		global $database, $form, $validation;
		$validation->checkEmail($email, "email");
		if($form->num_errors > 0)
			return 0;
		$result=$database->registerEmail($email);
		if($result==1)
		{
			$_SESSION['registerEmail']=1;
			return 1;
		}
		else
			return 0;
	}
	function forgiveShare($loan_id,$borrower_id)
	{
		global $database,$session;
		if(!$database->isLenderInThisLoan($loan_id,$session->userid))
		{
			$_SESSION['forgive']=2; /* invalid loan id or lender has not funded for this loan */
			return 0;
		}
		if($database->isLenderForgivenThisLoan($loan_id,$session->userid))
		{
			$_SESSION['forgive']=3; /* lender already forgiven this loan */
			return 0;
		}
		$totalLenderReceivedAmount=$database->getLenderReceivedAmountInThisLoan($loan_id,$session->userid);
		$totalLenderAmountWithInterest=$database->getLenderAmountWithInterestInThisLoan($loan_id,$session->userid);
		$forgiveAmount=$totalLenderAmountWithInterest-$totalLenderReceivedAmount;
		$exRate=$database->getCurrentRate($borrower_id);
		if($exRate > 0)
			$damount=$forgiveAmount / $exRate;
		else
			$damount=0;/* Exceptional case here we will store doller amount zero */
		$database->startDbTxn();
		$forgiven_loans_id=$database->forgiveShare($loan_id,$borrower_id,$session->userid,$forgiveAmount,$damount);
		if($forgiven_loans_id !=0)
		{
			$res2=$database->updateScheduleAfterForgive($loan_id,$borrower_id,$forgiveAmount,$forgiven_loans_id);
			if($res2)
			{
				$res3=$database->isAllLenderForgivenThisLoan($loan_id);
				$flag=1;
				if($res3)
				{
					$flag=0;
					$res4=$database->getTotalPayment($borrower_id, $loan_id);
					$remainingShare=$res4['amttotal']-$res4['paidtotal'];
					if($remainingShare > 0)
					{
						if($exRate > 0)
							$damount1=$remainingShare / $exRate;
						else
							$damount1=0;/* Exceptional case here we will store doller amount zero */

						$forgiven_loans_id=$database->forgiveShare($loan_id,$borrower_id,ADMIN_ID,$remainingShare,$damount1);
						if($forgiven_loans_id !=0)
						{
							$res5=$database->updateScheduleAfterForgive($loan_id,$borrower_id,$remainingShare,$forgiven_loans_id);
							if($res5)
							{
								$rest6=$database->loanpaidback($borrower_id,$loan_id);
								if($rest6)
									$flag=1;
							}
							else
							{
								$_SESSION['forgive']=7; /* some problem in updating as repaid loan */
							}
						}
						else
						{
							$_SESSION['forgive']=5; /* some problem in inserting record in forgive_loans table */
						}
					}
					else
						$flag=1;
				}
				if($flag==1)
				{
					$database->commitTxn();
					$this->sendForgiveMailToLender($session->userid,$borrower_id,$loan_id,$damount);
					$TotalPayment=$database->getTotalPayment($borrower_id,$loan_id);
					$repayAmount=$TotalPayment['amttotal']-$TotalPayment['paidtotal'];
					$schedule=$this->generateScheduleTable($borrower_id,$loan_id, 1);
					$this->sendForgiveMailToBorrower($borrower_id,$loan_id,$repayAmount,$schedule['schedule']);
					$_SESSION['forgive']=1; /* done */
					/* check for referral program */
					$repayment=$database->getTotalPayment($borrower_id, $loan_id);
					$p= $repayment['paidtotal']/$repayment['amttotal']*100;
					$p= number_format($p);
					$this->checkReferralCommission($borrower_id, $p);
					return 1;
				}
				else
				{
					$_SESSION['forgive']=4; /* some problem in forgiving remaining share when all lenders have forgiven */
				}
			}
			else
			{
				$_SESSION['forgive']=6; /* some problem in updating repay schedule */
			}
		}
		else
		{
			$_SESSION['forgive']=5; /* some problem in inserting record in forgive_loans table */
		}
		$database->rollbackTxn();
		return 0;
	}
	function generateScheduleTable($ud, $ld, $displyall=0, $disburseRate=0)
	{
		global $database;
		$path=	getEditablePath('loanstatn.php');
		include(FULL_PATH."editables/".$path);
		$schedule = $database->getSchedulefromDB($ud, $ld);
		$actualSchedule = $database->getRepaySchedulefromDB($ud, $ld);
		$gracePeriod = $database->gerGracePeriod($ld);
		$UserCurrency = $database->getUserCurrency($ud);
		if(!empty($disburseRate))
			$CurrencyRate=$disburseRate;
		else
			$CurrencyRate = $database->getCurrentRate($ud);
		$rtnArray=array();
		if(empty($schedule))
		{
			$rtnArray['schedule']='';
			$rtnArray['due']=0;
			$rtnArray['amtPaidTillShow']=0;
		}
		else
		{
			if($displyall)
			{
				$tmpcurr=$UserCurrency;
			}
			else
			{
				$tmpcurr='USD';
			}
			$text="<table width = 100% class='zebra-striped'>
			<tr>
				<th>".$lang['loanstatn']['date']."</th>
				<th>".$lang['loanstatn']['due_amount']."</th>
				<th>".$lang['loanstatn']['datepaid']."</th>
				<th>".$lang['loanstatn']['paid_amount']."</th>
			</tr>";
			$printSchedule=array();
			$paidBalance=0;
			$totalDueAmt=0;
			$totalDueAmtUsd=0;
			$totalPaidAmt=0;
			$totalPaidAmtUsd=0;
			$amtDueTill = 0;
			$amtPaidTill = 0;
			for($i = 0, $j=0; $i < count($schedule); $i++)
			{
				$totalDueAmt += $schedule[$i]['amount'];
				$printSchedule[$i]['dueAmt']=$schedule[$i]['amount'];
				$printSchedule[$i]['dueDate']=$schedule[$i]['duedate'];
				if($schedule[$i]['duedate'] < time())
				{
					$amtDueTill+=$schedule[$i]['amount'];
				}
				$inst=0;
				while($paidBalance >0)
				{
					$inst=$schedule[$i]['amount'];
					if($inst >0)
					{
						if($inst <= $paidBalance)
						{
							$printSchedule[$i]['sub'][$actualSchedule[$j-1]['paiddate']]=$inst;
							$paidBalance=number_format(($paidBalance-$inst), 6, '.', '');
							break;
						}
						else
						{
							$printSchedule[$i]['sub'][$actualSchedule[$j-1]['paiddate']]=$paidBalance;
							$inst = number_format(($inst - $paidBalance), 6, '.', '');
							$paidBalance=0;
						}
					}
					else
						break;
				}
				if($paidBalance==0)
				{
					for($k=0; $j < count($actualSchedule); $j++)
					{
						if($inst==0)
							$inst=$schedule[$i]['amount'];

						if($inst >0)
						{
							if($inst <= $actualSchedule[$j]['paidamt'])
							{
								//$printSchedule[$i]['sub'][$actualSchedule[$j]['paiddate']]=$inst;
								/*Pranjal Change 26 Jan When there are 2 small payments on the same date the schedule does not show correct data Example loain id 206*/
								$printSchedule[$i]['sub'][$actualSchedule[$j]['paiddate']]+=$inst;
								$paidBalance=number_format(($actualSchedule[$j]['paidamt']-$inst), 6, '.', '');
								$j++;
								break;
							}
							else
							{
								$printSchedule[$i]['sub'][$actualSchedule[$j]['paiddate']]=$actualSchedule[$j]['paidamt'];
								$inst = number_format(($inst - $actualSchedule[$j]['paidamt']), 6, '.', '');
							}
						}
						else
						{
							break;
						}
					}
				}
				if($i==(count($schedule)-1) && $paidBalance > 0)
				{
					$printSchedule[$i]['sub'][$actualSchedule[count($actualSchedule)-1]['paiddate']] +=$paidBalance;
				}
			}
			$totalDueAmtUsd += convertToDollar($totalDueAmt ,($CurrencyRate));
			$amtDueTillUsd += convertToDollar($amtDueTill ,($CurrencyRate));
			for($i = 0; $i < count($printSchedule); $i++)
			{
				if($i < $gracePeriod)
				{
					continue;
				}
				$text= $text. "<tr> ";
				$text=$text."<td style='text-align:left; width:20%'>".date('M d, Y',$printSchedule[$i]['dueDate'])."</td>";
				if($displyall)
				{
					$text=$text."<td style='text-align:left; width:20%'>".number_format(round_local($printSchedule[$i]['dueAmt']), 0, '.', ',')."</td>";
				}
				else
				{
					$text=$text."<td style='text-align:left; width:20%'>".number_format(convertToDollar($printSchedule[$i]['dueAmt'] ,($CurrencyRate)), 2, '.', ',')."</td>";
				}
				if(isset($printSchedule[$i]['sub']))
				{
					$j=0;
					foreach($printSchedule[$i]['sub'] as $key=>$value)
					{
						$totalPaidAmt +=$value;
						if($key < time())
						{
							$amtPaidTill += $value;
						}
						if($j >0)
						{
							$text= $text. "<tr> ";
							$text=$text."<td style='text-align:left; width:20%'>&nbsp;</td>";
							$text=$text."<td style='text-align:left; width:20%'>&nbsp;</td>";
						}
						$text=$text."<td style='text-align:left; width:20%'>".date('M d, Y',$key)."</td>";
						if($displyall)
						{
							$amtPaidShow=number_format(round_local($value), 0, '.', ',');
							$text=$text."<td style='text-align:left; width:20%'>".$amtPaidShow."</td>";
						}
						else
						{
							$amtPaidShow=convertToDollar($value ,($CurrencyRate));
						}
						if(count($printSchedule[$i]['sub']) > 1)
						{
							if($j%2==0)
								$amtPaidShow= round_up($amtPaidShow,2);
							else
								$amtPaidShow= round_down($amtPaidShow,2);
						}
						if(!$displyall)
						{
							$text=$text."<td style='text-align:left; width:20%'>".number_format($amtPaidShow, 2, '.', ',')."</td>";
						}
						$text=$text." </tr>";
						if($j >0)
						{
							$text= $text. "</tr> ";
						}
						$j++;
					}
				}
				else
				{
					$text=$text."<td style='text-align:left; width:20%'>&nbsp;</td>";
					$text=$text."<td style='text-align:left; width:20%'>&nbsp;</td>";
					 $text=$text." </tr>";
				}
			}
			$totalPaidAmtUsd=convertToDollar($totalPaidAmt ,($CurrencyRate));
			$amtPaidTillUsd=convertToDollar($amtPaidTill ,($CurrencyRate));
			$text=$text."<tfoot>
					<tr>
					<th>".$lang['loanstatn']['tot_amount']."</th>";
					if($displyall)
					{
						$text=$text."<th>".number_format(round_local($totalDueAmt), 0, '.', ',')."</th>";
					}
					else
					{
						$text=$text."<th>".number_format($totalDueAmtUsd, 2, '.', ',')."</th>";
					}
					$text=$text."<th>".$lang['loanstatn']['tot_paid_amount']."</th>";
					if($displyall)
					{
						$text=$text."<th>".number_format(round_local($totalPaidAmt), 0, '.', ',')."</th>";
					}
					else
					{
						$text=$text."<th>".number_format($totalPaidAmtUsd, 2, '.', ',')."</th>";
					}
					$text=$text."</tr></tfoot>";
			$text=$text."</table>";
			$rtnArray['schedule']=$text;
			if($displyall)
			{
				$due=$amtDueTill-$amtPaidTill;
				$amtPaidTillShow=$amtPaidTill;
				$amtRemaining=$totalDueAmt- $totalPaidAmt;
			}
			else
			{
				$due=$amtDueTillUsd-$amtPaidTillUsd;
				$amtPaidTillShow=$amtPaidTillUsd;
				$amtRemaining=$totalDueAmtUsd- $totalPaidAmtUsd;
			}
			if($due < 0 )
				$due = 0;
			if($amtRemaining < 0 )
				$amtRemaining = 0;
			$rtnArray['amtPaidTillShow']=$amtPaidTillShow;
			$rtnArray['amtRemaining']=$amtRemaining;
			$rtnArray['due']=$due;
		}
		return $rtnArray;
	}
	function feedbackReminder()
	{	
		
		global $database,$form;
		$loans=$database->getRepaidLoansForFeedbackReminder();
		foreach($loans as $loan)
		{
			$value= 7 * 24 * 60 *60;
			$reminder=intval($loan['datediff']/$value);
			if($loan['feedback_reminder'] < $reminder)
			{
				$lenders=$database->getLendersForFeedbackReminder($loan['loanid']);
				if(!empty($lenders))
				{
					$bname= $database->getNameById($loan['borrowerid']);
					$repay_date= $database->getRepaidDate($loan['borrowerid'], $loan['loanid']);
					$i=0;
					foreach($lenders as $lender)
					{
						$this->sendFeedbackReminderMailToLender($loan['loanid'], $lender['Email'], $lender['FirstName'].' '.$lender['LastName'], $loan['borrowerid'], $bname, $repay_date);
						$i++;
					}
					$database->updateFeedbackReminder($loan['loanid'], $reminder);
					Logger_Array("Feedback Reminder Mails",'Total mails sent, loanid', $i, $loan['loanid']);
				}
			}
		}
	}

	function subscribeLender($email,$fname,$lname)
	{
		require_once 'mail_chimp/MCAPI.class.php';
		require_once 'mail_chimp/config.inc.php'; //contains apikey
		$api = new MCAPI($apikey);
		$merge_vars = array('FNAME'=>$fname, 'LNAME'=>$lname);

		// By default this sends a confirmation email - you will not see new members
		// until the link contained in it is clicked!
		$retval = $api->listSubscribe($listId, $email, $merge_vars);
		if($api->errorCode){
			Logger_Array("Unable to load listSubscribe",'Error Code, Error Message', $api->errorCode, $api->errorMessage);
		} else {
			Logger_Array("Subscribed - look for the confirmation email",'retval',$retval);
		}
	}

	function unSubscribeLender($email)
	{
		require_once 'mail_chimp/MCAPI.class.php';
		require_once 'mail_chimp/config.inc.php'; //contains apikey
		$api = new MCAPI($apikey);
		$retval = $api->listUnsubscribe( $listId,$email);
		if ($api->errorCode)
		{
			Logger_Array("Unable to load listSubscribe",'Error Code, Error Message', $api->errorCode, $api->errorMessage);
		}
		else
		{
			Logger_Array("Unsubscribed",'retval',$retval);
		}
	}
	function sendShareEmail($to_email, $note, $uid, $lid, $email_sub, $loan_use, $sendme)
	{	
		global $database, $session,$form;
		traceCalls(__METHOD__, __LINE__);
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($to_email))
		{
			$form->setError("to_email", $lang['error']['empty_emails']);
			return 0;
		}
		$email_ids =  explode(",",$to_email);
		for($i=0; $i<count($email_ids); $i++)
		{
			if(!eregi("^[[:alnum:]][a-z0-9_.-]*@[a-z0-9.-]+\.[a-z]{2,4}$", trim($email_ids[$i])))
			{
				$form->setError("to_email", $lang['error']['invalid_emails']);
				return 0;
			}
		}
		if($form->num_errors == 0)
		{
			$this->sendShareMail($email_ids, $note, $uid, $lid, $email_sub, $loan_use, $sendme);
			return 1;
		}
	}
	/* -------------------Lender Section End----------------------- */


	/* -------------------Partner Section Start----------------------- */

	function register_p($username, $pass1, $pass2, $pname, $address, $city, $country, $email, $emails_notify, $website, $desc, $user_guess, &$id, $language)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validatePartnerReg($username, $pass1, $pass2, $pname, $address, $city, $country, $email, $emails_notify, $desc, $user_guess);

		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->addPartner($username, $pass1, $pname, $address, $city, $country, $email, $emails_notify, $website, $desc, $language);
		if($result==0)
		{
			$id = $database->getUserId($username);

			$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			$path=	getEditablePath('mailtext.php',$language);
			require ("editables/".$path);
			
			$Subject=$lang['mailtext']['PartnerReg-subject'];
			$To=$params['name'] = $pname;
			$params['username'] = $username;
			$params['password'] = $pass1;
			$message = $this->formMessage($lang['mailtext']['PartnerReg-msg'], $params);
			$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet);

			/*$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			$path=	getEditablePath('mailtext.php',$language);
			require ("editables/".$path);
			
			$Subject=$lang['mailtext']['email_verification_sub'];
			$To=$params['name'] = $pname;
			$activate_key =	$database->getActivationKey($id);
			$link = SITE_URL."index.php?p=51&ident=$id&activate=$activate_key";
			$params['verify_link'] = $link;
			$message = $this->formMessage($lang['mailtext']['email_verification_body'], $params);
			$reply= $this->mailSending($From, $To, $email, $Subject, $message,$templet);
			if($reply)
				Logger_Array("Email Verification mail sent to partner ",'email, To', $email, $To);
			$_SESSION['pEmailVerifiedPending']=true;*/
			return true;
		}
		return false;
	}
	function editprofile_p($username, $pass1, $pass2, $pname, $address, $city, $country, $email, $emails_notify, $website, $ppostcomment, $desc, $id, $language)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validatePartnerEdit($id, $username, $pass1, $pass2, $pname, $address, $city, $country, $email, $emails_notify, $desc);

		if($form->num_errors > 0){
			return 0;
		}

		$result=$database->updatePartner($username, $pass1, $pname, $address, $city, $country, $email, $emails_notify, $website, $ppostcomment, $desc,$id,$language);
		if($result==0){
			return true;
		}
		return false;
	}

	/* -------------------Partner Section End----------------------- */

	/* -------------------Mail section Start----------------------- */

	function mailSending($From, $To, $email, $Subject, $message,$templet,$replyTo=null)
	{	
		require_once ("includes/mailsender.php");
		$r = mailSender($From, $To, $email, $Subject, $message,$templet, '' , '' , '' , $replyTo);
		if(!empty($r))
			return 1;
		return 0;
	}
	function mailSendingHtml($From, $To, $email, $Subject, $message,$attachment,$templet,$html,$card_info)
	{
		require_once ("includes/mailsender.php");
		$r = mailSender($From, $To, $email, $Subject, $message,$attachment,$templet,$html,$card_info);
		if(!empty($r))
			return 1;
		return 0;
	}
	function formMessage($msg, $params)
	{
		foreach($params as $key => $value)
		{
			 $msg = str_replace( '%'.$key.'%', $value, $msg);
		}
		return $msg;
	}
	public function sendBulkMails($emailadd, $selected_radio, $emailmssg, $emailsubject)
	{
		global $database, $form;
		$path=	getEditablePath('error.php');
		include_once("editables/".$path);
		$field = "emailmessage";
		if(!$emailmssg || strlen($emailmssg=trim($emailmssg))==0){
			$form->setError($field, $lang['error']['empty_emailmsg']);
		}
		$field = "emailsubject";
		if(!$emailsubject || strlen($emailsubject=trim($emailsubject))==0){
			$form->setError($field, $lang['error']['empty_emailsub']);
		}
		$field = "emailaddress";
		if($selected_radio == 'Others' && (!$emailadd ||  strlen($emailadd=trim($emailadd))==0)){
			$form->setError($field, $lang['error']['empty_emailids']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		if($selected_radio == 'Others')
		{
			$emailids=explode(",",$emailadd);
			foreach($emailids as $rows)
			{
				require ("editables/mailtext.php");
				$otheremail = $rows;
				$From       = EMAIL_FROM_ADDR;
				$templet    = "editables/email/simplemail.html";
				$Subject    = $emailsubjct;
				$To         = $otheremail;
				$reply      = $this->mailSending($From, $To, $otheremail, $emailsubject, $emailmssg,$templet);
			}
			return 1;
		}
		else if($selected_radio == 'Borrower')
		{
			$emailids=$database->getBorrowersEmail();
		}
		else if($selected_radio == 'Lender')
		{
			$emailids=$database->getLendersEmail();
		}
		else if($selected_radio == 'Partner')
		{
			$emailids=$database->getPartnersEmail();
		}
		else if($selected_radio == 'All')
		{
			$emailids=$database->getAllEmails();
		}
		foreach($emailids as $rows)
		{
			require ("editables/mailtext.php");
			$otheremail = $rows['Email'];
			$From       = EMAIL_FROM_ADDR;
			$templet    = "editables/email/simplemail.html";
			$Subject    = $emailsubjct;
			$To         = $otheremail;
			$reply      = $this->mailSending($From, $To, $otheremail, $emailsubject, $emailmssg,$templet);
		}
		return 1;
	}
	function sendPromotLoanMail($uid, $lid, $email_ids, $frnds_msg, $amt_req, $amt_need, $interest, $fbrating, $fbrating_count, $location, $borrower_fname, $borrower_lname, $loan_use, $loan_type,$lender_name=null,$lender_email=null)
	{
		global $database, $session,$form;
		$date=time();
		$ids=$database->saveInviteEmails($this->userid, $this->fullname, $email_ids, $date);
		$frnds_msg = nl2br(stripslashes(strip_tags(trim($frnds_msg))));
		require("editables/mailtext.php");
		if(!empty($lender_email))
			$From=$lender_email;
		else
			$From = EMAIL_FROM_ADDR;
		$emailsubject = $lang['mailtext']['promote_subject'];
		$templet="editables/email/promotemail.html";
		$To = "";
		$promote_info = array();
		$promote_info['user_msg'] = $frnds_msg;
		$promote_info['image_src'] = SITE_URL."library/getimagenew.php?id=$uid&width=300&height=300";
		if($loan_type==LOAN_OPEN)
			$promote_info['lend_image_src'] = SITE_URL."images/layout/border/lend-image.png";
		else
			$promote_info['lend_image_src'] = SITE_URL."images/layout/border/status-image.png";
		$promote_info['borrower_name'] = $borrower_fname." ".$borrower_lname;
		$promote_info['fbrating'] = $fbrating;
		$promote_info['fbrating_count'] = $fbrating_count;
		$promote_info['location'] = $location;
		$promote_info['amount_req'] = $amt_req;
		$promote_info['interest'] = $interest;
		$statusbar=$this->getStatusBar($uid,$lid,1);
		$promote_info['statusbar'] = $statusbar;
		$params = array();
		$params['name'] = $this->fullname;
		$params['stil_need_amt'] = $amt_need;
		$params['borrower_name'] = $borrower_fname;
		if(!empty($lender_name)){
			$param1['name']=$lender_name;
			$params['lender_name'] = $lender_name;
		}
		else{
			$param1['name'] = $this->fullname;
			$params['lender_name'] = $this->fullname;
		}
		$emailsubject = $this->formMessage($emailsubject, $param1);
		for($i=0; $i<count($email_ids); $i++)
		{
			if(strlen($loan_use) >200)
				$promote_info['loan_use'] = substr($loan_use,0,200).".... <a href='".SITE_URL."index.php?p=14&u=$uid&l=$lid&refid=$ids[$i]'>Read More</a>";
			else
				$promote_info['loan_use'] = $loan_use;
			$promote_info['image_link'] = SITE_URL."index.php?p=14&u=$uid&l=$lid&refid=$ids[$i]";
			$promote_info['site_link'] = SITE_URL."index.php?p=14&u=$uid&l=$lid&refid=$ids[$i]";
			$promote_info['borrower_link'] = SITE_URL."index.php?p=14&u=$uid&l=$lid&refid=$ids[$i]";
			$promote_info['fbrating_link'] = SITE_URL."index.php?p=14&u=$uid&l=$lid&refid=$ids[$i]";
			$promote_info['lend_link'] = SITE_URL."index.php?p=14&u=$uid&l=$lid&refid=$ids[$i]";
			$params['lender_reg_link'] = SITE_URL."index.php?p=1&sel=2&refid=$ids[$i]";
			$params['loan_prof_link'] = SITE_URL."index.php?p=14&u=$uid&l=$lid&refid=$ids[$i]";
			$params['zidisha_link'] = SITE_URL."index.php?refid=$ids[$i]";
			if($loan_type==LOAN_OPEN)
				$emailmssg = $this->formMessage($lang['mailtext']['promote_body1'], $params);
			else if($loan_type==LOAN_FUNDED || $loan_type==LOAN_ACTIVE)
				$emailmssg = $this->formMessage($lang['mailtext']['promote_body2'], $params);
			$emailmssg .= $this->formMessage($lang['mailtext']['promote_body3'], $params);

			/*  0 for no attachment, 2 for HTML mail */

			$reply=$this->mailSendingHtml($From, $To,$email_ids[$i], $emailsubject, $emailmssg,0,$templet,2,$promote_info);
		}
		return $reply;
	}
	function sentInviteMails($id,$frnds_emails,$frnds_msg,$lender_name ,$lender_email=null)
	{

		global $database, $session,$form;
		traceCalls(__METHOD__, __LINE__);
		$frnds_msg = nl2br(stripslashes(strip_tags(trim($frnds_msg))));
		$email_ids =  explode(",",$frnds_emails);
		$date=time();
		$ids=$database->saveInviteEmails($id,$lender_name, $email_ids, $date);
		require("editables/mailtext.php");
		if(!empty($lender_email))
			$From=$lender_email;
		else
			$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		$Subject=$lang['mailtext']['invite_subject'];
		$To = '';
		$params = array();
		$params['name'] = $lender_name;
		$params['user_msg']= $frnds_msg;
		$Subject = $this->formMessage($lang['mailtext']['invite_subject'], $params);
		for($i=0; $i<count($email_ids); $i++)
		{
			$params['zidisha_link']= SITE_URL."index.php?refid=$ids[$i]";
			$message = $this->formMessage($lang['mailtext']['invite_body'], $params);
			$reply=$this->mailSending($From, $To, $email_ids[$i], $Subject, $message,$templet);
		}
		return $reply;
	}
	function sendGiftCardMailsToSender($order_id)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		$order_detail = $database->GetOrderDetailSender($order_id);
		if(!empty($order_detail))
		{
			require("editables/mailtext.php");

			$From = EMAIL_FROM_ADDR;
			$emailsubject = $lang['mailtext']['gift_order_subject'];
			$emailmssg = $lang['mailtext']['gift_order_msg_header'];
			$templet="editables/email/simplemail.html";
			$To = "";
			$rec_email = "";
			foreach($order_detail as $row)
			{
				if($row['sender'] != $rec_email && $rec_email != "")
				{
					$emailmssg .= $lang['mailtext']['gift_order_msg_footer'];
					$reply=$this->mailSending($From, $To, $rec_email, $emailsubject, $emailmssg,$templet);
					$emailmssg = $lang['mailtext']['gift_order_msg_header'];
				}
				if($row['order_type']=='email')
					$delv_method = "Email";
				if($row['order_type']=='print')
					$delv_method = "Print";

				$params['date'] = date("M j, Y",$row['date'])." at ".date("h:i A",$row['date']);
				$params['amount'] = number_format($row['card_amount'], 2, '.', ',');
				$params['delv_method'] = $delv_method;
				$params['to_name'] =  $row['to_name'];
				$params['from_name'] =  $row['from_name'];
				$params['msg'] = $row['message'];
				$params['rec_email'] =  $row['recipient_email'];
				$params['date_sent'] =  date("M j, Y",$row['date'])." at ".date("h:i A",$row['date']);

				$emailmssg .= $this->formMessage($lang['mailtext']['gift_order_msg_body'], $params);
				if($row['order_type'] == 'email')
					$emailmssg .= $this->formMessage($lang['mailtext']['gift_order_msg_body_2'], $params);
				$rec_email = $row['sender'];
			}
				/* in following last two lines sending mail to last sender  */
			$emailmssg .= $lang['mailtext']['gift_order_msg_footer'];
			$reply=$this->mailSending($From, $To, $rec_email, $emailsubject, $emailmssg,$templet);
		}
		return true;
	}
	function sendGiftCardMailsToReciever($order_id, $id=0)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		$order_detail = $database->GetOrderDetailReciever($order_id);
		require ("editables/mailtext.php");
		foreach($order_detail as $row)
		{
			$flag=0;
			if($id ==0)
				$flag=1;
			else if($row['id']==$id)
			{
				$flag=1;
			}
			if($flag)
			{
				$card_info = array();
				$card_info['card_amount'] = number_format($row['card_amount']);
				$card_info['to_name'] = $row['to_name'];
				$card_info['from_name'] = $row['from_name'];
				$card_info['message'] = $row['message'];
				$card_info['card_code'] = $row['card_code'];
				$card_info['exp_date'] = date ( 'F j, Y', $row['exp_date']);
				$card_info['card_link'] = SITE_URL."cardimage.php?id_no=".$row['txn_id']."&card_code=".$row['card_code'];
				$From = EMAIL_FROM_ADDR;
				$emailsubject = $lang['mailtext']['gift_card_subject'];
				$templet="editables/email/giftmail.html";
				$To = "";
				$params['link_1'] = SITE_URL."index.php?p=1&sel=2";
				$params['link_2'] = SITE_URL."index.php?p=17";
				$emailmssg = $this->formMessage($lang['mailtext']['gift_card_msg_body'], $params);
																							/*  0 for no attachment, 1 for HTML mail */
				$reply=$this->mailSendingHtml($From, $To, $row['recipient_email'], $emailsubject, $emailmssg,0,$templet,1,$card_info);
				if($reply)
					Logger_Array("Gift Card mail sent",'email, To', $row['recipient_email'], $To);
			}
		}
	}
	public function sendFundUploadMail($userid,$amount)
	{
		global $database,$form;
		$Detail=$database->getEmail($userid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['lender_upload_amt_sub'];
		$To=$params['lname'] = $Detail['name'];
		$params['amount'] = number_format(truncate_num($amount,2), 2, ".", "");
		$params['zidisha_link'] = SITE_URL;
		$message = $this->formMessage($lang['mailtext']['lender_upload_amt_body'], $params);
		$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
	}
	public function sendDonationMail($userid,$donation, $email=null, $name=null)
	{
		global $database,$form;
		if($name==null)
		{
			$Detail=$database->getEmail($userid);
			$To=$params['lname'] = $Detail['name'];
			$email=$Detail['email'];
		}
		else
		{
			$To=$params['lname'] =$name;
		}
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['lender_donation_sub'];
		$params['date'] = date("M d, Y ",time());
		$params['donation_amt'] = number_format(truncate_num($donation,2), 2, ".", "");
		$params['zidisha_link'] = SITE_URL;
		$message = $this->formMessage($lang['mailtext']['lender_donation_body'], $params);
		$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet);
		if($reply)
			Logger_Array("Send Donation Mail",'email, userid, name, donation', $email, $userid, $name,$donation);
		else
			Logger_Array("Sorry unable to send donation mail",'email, userid, name, donation', $email, $userid, $name,$donation);
	}
	public function sendDonationReminderMailToAdmin($donation)
	{
		global $database;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['donation_information_sub'];
		$params['donation'] = number_format(truncate_num($donation,2), 2, ".", "");
		$message = $this->formMessage($lang['mailtext']['donation_information_body'], $params);
		$reply=$this->mailSending($From, 'Admin', ADMIN_EMAIL_ADDR, $Subject, $message,$templet);
	}
	public function sendMobileChangeMail($userid)
	{
		global $database,$form;
		$phone_log=$database->getTelephoneNoByUserId($userid);
		$table="<table border=1><tr><th>Sr.no.</th><th>Telephone</th><th>Date</th></tr>";
		$i=1;
		foreach($phone_log as $row)
		{
			$table .="<tr>";
			$table .="<td>".$i."</td>";
			$table .="<td>".$row['phoneno']."</td>";
			$table .="<td>".date("M d, Y ",$row['date'])."</td>";
			$table .="</tr>";
			$i++;
		}
		$table .="</table>";
		$Detail=$database->getEmailB($userid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['borrower_mobile_change_sub'];
		$To=$params['bname'] = $Detail['name'];
		$params['username'] = $this->username;
		$CountryDetail=$database->getUserCityCountry($userid);
		$params['country'] =$database->mysetCountry($CountryDetail['Country']);
		$params['data'] =$table;
		$message = $this->formMessage($lang['mailtext']['borrower_mobile_change_body'], $params);
		$reply=$this->mailSending($From, $To, EMAIL_TO_MAIL, $Subject, $message,$templet);
	}
	public function sendCommentMails($loanid, $userid, $comment, $cid)
	{
		global $database;
		$lender_email=$database->getLenderEmailByLoanid($loanid);
		$p_detail=$database->getBorrowerPartner($userid);
		$p_email='';
		if(!empty($p_detail['email']) && $p_detail['postcomment'] == 1)
		{
			$p_email=$p_detail['email'];

			$p_name=$p_detail['name'];
		}
		$res_BEmail=$database->getEmailB($userid);
		$b_email=$res_BEmail['email'];
		$b_name=$res_BEmail['name'];
		$From=EMAIL_FROM_ADDR;
		global $session;
		$templet="editables/email/simplemail.html";
		$imgs = $database->getCommentFile(0,$userid,$cid);
		$cmts = $database->getCommentFromId($cid);

		require ("editables/mailtext.php");
		$p['bname'] = $b_name;
		$emailsubject=  $this->formMessage($lang['mailtext']['comment-subject'], $p);
		$msg = nl2br($comment);
		$imgtag = '';
		for($i = 0; $i < sizeof($imgs); $i++)
		{
			/*  $imgtag .= '<img src="' . 'https://www.zidisha.org/includes/image.php?imgid='.urlencode($imgs[$i]['uploadfile']) . '">';*/
			/*	$imgtag .="<img src='".SITE_URL."includes/image.php?imgid=".urlencode($imgs[$i]['uploadfile'])."'>";*/
			$imgtag .="<a target='_blank' href='".SITE_URL."images/uploadComment/".$imgs[$i]['uploadfile']."'><img src='".SITE_URL."images/uploadComment/".$imgs[$i]['uploadfile']."' width='100' style='border:none'></a>";
			$imgtag .="<br>";
		 }

		//MESSAGE TO ADMIN
		$To=ADMIN_FROM_NAME;
		$adminemail=ADMIN_EMAIL_ADDR;
		$params['name'] = 'Admin';
		$params['link'] = WEBSITE_ADDRESS.'?p=14&l='.$loanid.'&u='.$userid ;
		$params['message'] = $msg;
		$params['images'] =  $imgtag;
		$params['date'] =  date("M d, Y ",$cmts['pub_date']);
		$params['mname'] = $database->getUserNameById($cmts['senderid']);
		$ulevel=$database->getUserLevel($params['mname']);
		if($ulevel==BORROWER_LEVEL)
			$params['mname']=$database->getNameById($cmts['senderid']);
		$emailmssg=$this->formMessage($lang['mailtext']['comment-msg'], $params);

		$reply=$this->mailSending($From,$To,$adminemail , $emailsubject, $emailmssg,$templet);

		//MESSAGE TO PARTNER
		/*if($p_email!='')
		{
			$To=$p_name;
			$params['name'] = $To;
			$params['link'] = WEBSITE_ADDRESS.'?p=14&l='.$loanid.'&u='.$userid;
			$emailmssg=$this->formMessage($lang['mailtext']['comment-msg'], $params);
			$partner_email=$p_email;
			$reply=$this->mailSending($From,$To,$partner_email , $emailsubject, "hello partner message",$templet);
		}*/

		//MESSAGE TO BORROWER
		if($b_email!='')
		{
			$To=$b_name;
			$params['zidisha_link']= SITE_URL."index.php";
			$params['name'] = $To;
			$params['link'] = WEBSITE_ADDRESS.'?p=14&l='.$loanid.'&u='.$userid;
			$emailmssg=$this->formMessage($lang['mailtext']['comment-msg_b'], $params);
			$borroweremail=$b_email;
			$bemailsubject=$lang['mailtext']['comment-subject_b'];
			$reply=$this->mailSending($From,$To,$borroweremail , $bemailsubject, $emailmssg,$templet);
		}

		//MESSAGE TO LENDER
		foreach($lender_email as $rows)
		{
			$lenderemail=$rows['Email'];
			$To=$rows['FirstName'] .' ' . $rows['LastName'];
			$params['name'] = $To;
			$params['link'] = WEBSITE_ADDRESS.'?p=14&l='.$loanid.'&u='.$userid ;
			$emailmssg=$this->formMessage($lang['mailtext']['comment-msg'], $params);
			if($lenderemail){
				$reply=$this->mailSending($From,$To,$lenderemail , $emailsubject, $emailmssg,$templet);
			}
		}
	}
	public function sendTranslateCommentMails($cid, $comment)
	{
		global $database;
		$cmts = $database->getCommentFromId($cid);
		$loanDetail=$database->getLastloan($cmts['receiverid']);
		if(!empty($loanDetail))
		{
			$loanid=$loanDetail['loanid'];
			$userid=$cmts['receiverid'];
			$lender_email=$database->getLenderEmailByLoanid($loanid);
			$p_detail=$database->getBorrowerPartner($userid);
			$res_BEmail=$database->getEmailB($userid);
			$From=EMAIL_FROM_ADDR;

			$templet="editables/email/simplemail.html";
			require ("editables/mailtext.php");

			$To=ADMIN_FROM_NAME;
			$adminemail=ADMIN_EMAIL_ADDR;
			$params['bname'] = $res_BEmail['name'];
			$params['lname'] = 'Admin';
			$params['link'] = WEBSITE_ADDRESS.'?p=14&l='.$loanid.'&u='.$userid ;
			$params['comment'] = nl2br($comment);
			$params['date'] =  date("F j, Y",$cmts['pub_date']);
			$params['sender'] = $database->getUserNameById($cmts['senderid']);
			$ulevel=$database->getUserLevel($params['mname']);
			if($ulevel==BORROWER_LEVEL)
				$params['sender']=$database->getNameById($cmts['senderid']);
			$emailsubject=  $this->formMessage($lang['mailtext']['translate_comment_lender_sub'], $params);
			$emailmssg=$this->formMessage($lang['mailtext']['translate_comment_lender_body'], $params);
			$reply=$this->mailSending($From,$To,$adminemail , $emailsubject, $emailmssg,$templet);

			//MESSAGE TO PARTNER
			if(!empty($p_detail['email']) && $p_detail['postcomment'] == 1)
			{
				$params['lname'] = $To= $p_detail['name'];
				$emailmssg=$this->formMessage($lang['mailtext']['translate_comment_lender_body'], $params);
				$reply=$this->mailSending($From,$To,$p_detail['email'] , $emailsubject, $emailmssg, $templet);
			}

			//MESSAGE TO LENDER
			foreach($lender_email as $rows)
			{
				$params['lname']= $To =$rows['FirstName'] .' ' . $rows['LastName'];
				$emailmssg=$this->formMessage($lang['mailtext']['translate_comment_lender_body'], $params);
				if($lenderemail)
					$reply=$this->mailSending($From,$To,$rows['Email'] , $emailsubject, $emailmssg,$templet);
			}
		}
	}
	public function sendForgiveMailToLender($userid,$borrower_id,$loan_id,$damount)
	{
		global $database,$form;
		$Detail=$database->getEmail($userid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['forgive_lender_sub'];
		$To=$params['lname'] = $Detail['name'];
		$params['bname'] = $database->getNameById($borrower_id);
		$params['borrower_link'] = SITE_URL."index.php?p=14&u=$borrower_id&l=$loan_id";
		$params['amount'] = number_format($damount, 2, ".", "");
		$message = $this->formMessage($lang['mailtext']['forgive_lender_body'], $params);
		$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
	}
	public function sendForgiveMailToBorrower($borrower_id,$loan_id,$repayAmount,$schedule)
	{
		global $database,$form;
		$Detail=$database->getEmailB($borrower_id);
		$UserCurrency = $database->getUserCurrency($borrower_id);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['forgive_borrower_sub'];
		$To=$params['bname'] = $Detail['name'];
		$params['borrower_link'] = SITE_URL."index.php?p=14&u=$borrower_id&l=$loan_id";
		$params['repay_amount'] = $UserCurrency." ".round($repayAmount);
		$params['repay_table'] = $schedule;
		$message = $this->formMessage($lang['mailtext']['forgive_borrower_body'], $params);
		$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
	}
	public function sendVerificationMailToPartner($partnerid,$borrowerid)
	{
		global $database,$form;
		$Detail=$database->getEmailP($partnerid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['borrower_verification_request_sub'];
		$To=$params['pname'] = $Detail['name'];
		$params['activation_link'] = SITE_URL."index.php?p=7&id=$borrowerid";
		$message = $this->formMessage($lang['mailtext']['borrower_verification_request__body'], $params);
		$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
	}
	public function sendRescheduleMailToLender($lenderid,$borrower_id,$new_repay_period,$reschedule_reason, $admin=false)
	{
		global $database,$form;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Subject=$lang['mailtext']['reschedule_lender_sub'];
		$params['bname'] = $database->getNameById($borrower_id);
		$params['new_repay_period'] = $new_repay_period;
		$params['comment'] = stripslashes(nl2br($reschedule_reason));
		if(!$admin)
		{
			$Detail=$database->getEmail($lenderid);
			$To=$params['lname'] = $Detail['name'];
			$message = $this->formMessage($lang['mailtext']['reschedule_lender_body'], $params);
			$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
		}
		else
		{
			$To=$params['lname'] = 'Admin';
			$message = $this->formMessage($lang['mailtext']['reschedule_lender_body'], $params);
			$reply=$this->mailSending($From, $To, ADMIN_EMAIL_ADDR, $Subject, $message,$templet);
		}
	}
	public function sendRescheduleCommentMailToLender($lenderid,$borrower_id,$new_repay_period,$reschedule_reason, $date)
	{
		global $database,$form;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Detail=$database->getEmail($lenderid);
		$To=$params['lname'] = $Detail['name'];
		$Subject=$lang['mailtext']['reschedule_comment_lender_sub'];
		$params['bname'] = $database->getNameById($borrower_id);
		$params['new_repay_period'] = $new_repay_period;
		$params['date'] = date('F j, Y',$date);
		$params['comment'] = stripslashes(nl2br($reschedule_reason));
		$message = $this->formMessage($lang['mailtext']['reschedule_comment_lender_body'], $params);
		$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
	}
	public function sendDefaultedLoanMailToLender($lenderid,$borrower_name,$percent_repaid,$rqst_amt)
	{
		global $database,$form;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$Detail=$database->getEmail($lenderid);
		$To=$params['lname'] = $Detail['name'];
		$Subject=$lang['mailtext']['default_loan_lender_sub'];
		$params['bname'] = $borrower_name;
		$params['percent_repaid'] = $percent_repaid;
		$params['rqst_amt'] = number_format($rqst_amt, 0, '.', '');
		$message = $this->formMessage($lang['mailtext']['default_loan_lender_body'], $params);
		$reply=$this->mailSending($From, $To, $Detail['email'], $Subject, $message,$templet);
	}
	public function sendNewLoanAppMailToLender($loan_id, $lemail, $lname, $borrower_id, $borrower_name, $repay_date)
	{
		global $database,$form;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$To=$params['lname'] = $lname;
		$params['bname'] = $borrower_name;
		$params['repay_date'] = date('F j, Y',$repay_date);
		$params['link'] = SITE_URL."index.php?p=14&u=$borrower_id&l=$loan_id";
		$Subject = $this->formMessage($lang['mailtext']['new_loan_app_lender_sub'], $params);
		$message = $this->formMessage($lang['mailtext']['new_loan_app_lender_body'], $params);
		$reply=$this->mailSending($From, $To, $lemail, $Subject, $message,$templet);
		Logger_Array("New Loan App Mail",'lender email, loanid, borrower id', $lemail, $loan_id, $borrower_id);
	}
	public function sendFeedbackReminderMailToLender($loan_id, $lemail, $lname, $borrower_id, $borrower_name, $repay_date)
	{
		global $database,$form;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$To=$params['lname'] = $lname;
		$params['bname'] = $borrower_name;
		$params['repay_date'] = date('F j, Y',$repay_date);
		$params['link'] = SITE_URL."index.php?p=12&u=$borrower_id&l=$loan_id#e1";
		$Subject = $this->formMessage($lang['mailtext']['feedback_reminder_lender_sub'], $params);
		$message = $this->formMessage($lang['mailtext']['feedback_reminder_lender_body'], $params);
		$reply=$this->mailSending($From, $To, $lemail, $Subject, $message,$templet);
	}
	function reInvite_frnds()
	{
		global $database, $session,$form;
		traceCalls(__METHOD__, __LINE__);
		$emails = $database->reSendInviteMail();
		if($emails != 0)
		{
			require("editables/mailtext.php");
			$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			$To = "";
			$params = array();
			$i=0;
			foreach($emails as $row)
			{
				$params['name'] = $row['lender'];
				$Subject = $this->formMessage($lang['mailtext']['reinvite_subject'], $params);
				$params['zidisha_link']= SITE_URL."index.php?refid=".$row['id'];
				$message = $this->formMessage($lang['mailtext']['reinvite_body'], $params);
				$reply=$this->mailSending($From, $To, $row['email'], $Subject, $message,$templet);
				$i++;
			}
			Logger_Array("Reinvite Mails",'Total mails sent', $i);
		}
	}
	function newLoanApplication()
	{
		/* Function will use only from cron jobs */
		global $database;
		$res=$database->getEvents(NEW_LOAN_APPLICATION);
		foreach($res as $row)
		{
			$event_fields=explode(',', $row['event_fields']);
			$loanid=$event_fields[0];
			$oldLoanid=$event_fields[1];
			$userid=$event_fields[2];
			$bname= $database->getNameById($userid);
			$lenders= $database->getLendersEmailForLoanApp($oldLoanid);
			$repay_date= $database->getRepaidDate($userid, $oldLoanid);
			$i=0;
			foreach($lenders as $lender)
			{
				$this->sendNewLoanAppMailToLender($loanid, $lender['Email'], $lender['FirstName'].' '.$lender['LastName'], $userid, $bname, $repay_date);
				$i++;
			}
			Logger_Array("New Loan App Mails",'Total mails sent, loanid', $i, $loanid);
			$database->updateEvent($row['id']);
		}
	}
	public function sendWelcomeMailToBorrower($userid, $name, $email)
	{
		global $database;
		$language= $database->getPreferredLang($userid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		$path=	getEditablePath('mailtext.php',$language);
		require ("editables/".$path);
		
		$Subject=$lang['mailtext']['BorrowerReg-subject'];
		$To=$params['name'] = $name;
		$message = $this->formMessage($lang['mailtext']['BorrowerReg-msg'], $params);
		$this->mailSending($From, $To, $email, $Subject, $message,$templet);
	}
	public function sendWelcomeMailToLender($name, $email)
	{
		global $database;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		
		$Subject=$lang['mailtext']['LenderReg-subject'];
		$To=$params['name'] = $name;
		$message = $this->formMessage($lang['mailtext']['LenderReg-msg'], $params);
		$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet);
	}
	public function sendWelcomeMailToPartner($name, $email)
	{
		global $database;
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		
		$Subject=$lang['mailtext']['PartnerReg-subject'];
		$To=$params['name'] = $name;
		$message = $this->formMessage($lang['mailtext']['PartnerReg-msg'], $params);
		$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet);
	}
	public function sendShareMail($email_ids, $note, $uid, $lid, $email_sub, $loan_use, $sendme)
	{	
		
		global $database,$form;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$From=EMAIL_FROM_ADDR;
		if(!empty($this->userid)) {
			$Detail=$database->getEmail($this->userid);
			$To = "";
			$params['note'] = (empty($note)) ? "" : nl2br($note)."<br/><br/>";
			$params['zidisha_link']= SITE_URL."index.php";
			$imgtag .="<div style='border: 1px solid #DFDCDC; padding:5px'><img src='".SITE_URL."images/client/".$uid.".jpg' width='100' style='border:none'></div>";
			$params['user_img']= $imgtag;
			$params['loan_use']= $loan_use." <a style='color:#00AEEF' href='".SITE_URL."index.php?p=14&u=".$uid."&l=".$lid."'>More</a>";
			$message = $this->formMessage($lang['mailtext']['share_email_body'], $params);
			foreach($email_ids as $email_id) {
				$reply_to=$Detail['email'];
				$reply=$this->mailSending($Detail['email'], $To, $email_id, $email_sub, $message,$templet,$reply_to);
				$_SESSION['mail_sent']='1';
				}
			if($sendme) {
				$reply=$this->mailSending($From, $To, $Detail['email'], $email_sub, $message,$templet);
			}
		}
	}
	/* -------------------Mail section End----------------------- */
}
$session=new Session;
$form = new Form;
?>