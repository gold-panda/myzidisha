<?php
include("utility.php");
include("database.php");
include("form.php");
include("validation.php");
include("csrf.php");

class Session
{
	var $username;     //Username given on sign-up
	var $userid;       //Random value generated on current login
	var $userlevel;    //The level to which the user pertains
	var $fullname;
	var $time;         //Time user was last active (page loaded)
	var $logged_in;    //True if user is logged in, false otherwise
	var $userinfo = array();  //The array holding all user info
	var $usersublevel;
	/**
	* Note: referrer should really only be considered the actual
	* page referrer in process.php, any other time it may be
	* inaccurate.
	*/
	var $errorcatch = array();

	/* Class constructor */
	function Session()
	{
		traceCalls(__METHOD__, __LINE__);
		$this->startSession();
		$this->time = time();
	}

	/**
	* startSession - Performs all the actions necessary to
	* initialize this session object. Tries to determine if the
	* the user has logged in already, and sets the variables
	* accordingly. Also takes advantage of this page load to
	* update the active visitors tables.
	*/

	function startSession()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		if (!isset($_SESSION)) {
		  session_start();  //Tell PHP to start the session
		}
		$currentCookieParams = session_get_cookie_params();
		$sidvalue = session_id();
		setcookie(
			'PHPSESSID',//name
			$sidvalue,//value
			0,//expires at end of session
			$currentCookieParams['path'],//path
			$currentCookieParams['domain'],//domain
			COOKIE_SECURE, //secure
			true //httponly
		);
		/* Determine if user is logged in */
		$this->logged_in = $this->checkLogin();
		if(!$this->logged_in)
		{
			$this->username = $_SESSION['username'] = GUEST_NAME;
			$this->userlevel = GUEST_LEVEL;
		}
	}

	function redirect($url)
	{   ?>
		<script type="text/javascript">
			window.location="<?php echo $url ?>";
		</script>
<?php
	}

	/**
	* checkLogin - Checks if the user has already previously
	* logged in, and a session with the user has already been
	* established. Also checks to see if user has been remembered.
	* If so, the database is queried to make sure of the user's
	* authenticity. Returns true if the user has logged in.
	*/
	function checkLogin()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		/* Check if user has been remembered */
		if(isset($_COOKIE['cookname']) && isset($_COOKIE['cookid']) && isset($_COOKIE['cookcsrf']))
		{
			$userinfo = $database->getUserInfo($_COOKIE['cookname']);
			if(!empty($userinfo) && $userinfo['salt']===$_COOKIE['cookcsrf'])
			{
				$this->username = $_SESSION['username'] = $_COOKIE['cookname'];
				$this->userid   = $_SESSION['userid']   = $_COOKIE['cookid'];
			}
		}
		/* Username and userid have been set and not guest */
		if(isset($_SESSION['username']) && isset($_SESSION['userid']) && $_SESSION['username'] != GUEST_NAME)
		{
			/* Confirm that username and userid are valid */
			if(!$database->confirmUserID($_SESSION['username'], $_SESSION['userid']) != 0)
			{
				/* Variables are incorrect, user not logged in */
				unset($_SESSION['username']);
				unset($_SESSION['userid']);
				return false;
			}

			/* User is logged in, set class variables */
			$this->userinfo  = $database->getUserInfo($_SESSION['username']);
			$this->username  = $this->userinfo['username'];
			$this->userid    = $this->userinfo['userid'];
			$this->fullname  = $this->userinfo['name'];
			$this->userlevel = $this->userinfo['userlevel'];
			$this->usersublevel = $_SESSION['sublevel'] = $this->userinfo['sublevel'];
			return true;
		}
		/* User not logged in */
		else
		{
			return false;
		}
	}

	/**
	* login - The user has submitted his username and password
	* through the login form, this function checks the authenticity
	* of that information in the database and creates the session.
	* Effectively logging in the user if all goes well.
	*/
	function login($subuser, $subpass, $subremember,$fblogin=0)
	{
		global $database, $form, $lang;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$path=  getEditablePath('loginform.php');
		include_once("editables/".$path);
		$field="username";
		unset($_SESSION['fb_'.FB_APP_ID.'_code']);
		unset($_SESSION['fb_'.FB_APP_ID.'_access_token']);
		unset($_SESSION['fb_'.FB_APP_ID.'_user_id']);
		unset($_SESSION['FB_Detail']);
		unset($_SESSION['FB_Error']);
		if(!$subuser || strlen($subuser=trim($subuser))==0 || $subuser==$lang['loginform']['username_login']){
			$form->setError($field, $lang['error']['empty_username']);
		}
		$field="password";
		if(!$subpass || strlen($subpass=trim($subpass))==0){
			$form->setError($field, $lang['error']['empty_password']);
		}
		$confirmed=$database->confirmUserPass($subuser, $subpass);
			if(!$confirmed){
				if(strstr($subuser, '@')){
					$result=$database->confirmUserEmailPass($subuser, $subpass);

					if($result){
							$subuser=$result;
							}else {
						$form->setError("username", $lang['error']['invalid_password']);
					}
				}
				else {
				$form->setError("username", $lang['error']['invalid_password']);
			}
		}

		if($form->num_errors > 0)
			return 0;

		$userinfo = $database->getUserInfo($subuser);
		$active = $database->confirmLenderActive($userinfo['userid']);
		if($userinfo['userlevel'] != BORROWER_LEVEL) {
			if(!$userinfo['emailVerified'])
			{
				$form->setError("username", $lang['error']['not_verified_email']);
			}
		}
		/*Dont allow inactive lenders to login*/
		if($userinfo['userlevel'] == LENDER_LEVEL && !$active)
		{
			$form->setError("username", $lang['error']['inactive_account']);
		}
		if($form->num_errors > 0)
			return 0;

		/* Username and password correct, register session variables */
		$this->userinfo  = $userinfo;
		$this->username  = $_SESSION['username'] = $this->userinfo['username'];
		$this->fullname  = $this->userinfo['name'];
		$this->userid    = $_SESSION['userid'] = $this->userinfo['userid'];
		$this->userlevel = $this->userinfo['userlevel'];
		$this->usersublevel = $_SESSION['sublevel'] = $this->userinfo['sublevel'];
		$language= $userinfo['lang'];
		if($language !='en')
			$_SESSION['language']=$language;
		/* Insert userid into database and update active users table */
		if($this->usersublevel !=READ_ONLY_LEVEL) {
			$database->setLoginTime($this->userid, $this->time);
		}
		if($subremember)
		{
			setcookie("cookname", $this->username, time()+COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookid",   $this->userid, time()+COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookcsrf",   $userinfo['salt'], time()+COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
		}
		return 1;

	}
	function loginAsUser($userId)
	{
		global $database, $form;
		$userinfo = $database->getUserById($userId);
		/* Username and password correct, register session variables */
		$this->userinfo  = $userinfo;
		$this->username  = $_SESSION['username'] = $this->userinfo['username'];
		$this->fullname  = $this->userinfo['name'];
		$this->userid    = $_SESSION['userid'] = $userId;
		$this->userlevel = $this->userinfo['userlevel'];
		$database->setLoginTime($this->userid, time());
		return 1;
	}
	/**
	* logout - Gets called when the user wants to be logged out of the
	* website. It deletes any cookies that were stored on the users
	* computer as a result of him wanting to be remembered, and also
	* unsets session variables and demotes his user level to guest.
	*/
	function logout()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		if(isset($_COOKIE['cookname']) && isset($_COOKIE['cookid']))
		{
			setcookie("cookname", "", time()-COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookid",   "", time()-COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
			setcookie("cookcsrf",   "", time()-COOKIE_EXPIRE, COOKIE_PATH, '', COOKIE_SECURE, true);
		}
		/* Unset PHP session variables */
		unset($_SESSION['username']);
		unset($_SESSION['userid']);
		unset($_SESSION['language']);
		unset($_SESSION['frnds_emails']);
		unset($_SESSION['frnds_msg']);
		unset($_SESSION['la']);
		unset($_SESSION['loanapp']);
		unset($_SESSION['sublevel']);
		unset($_SESSION['CodeByIp']);
		unset($_SESSION['Nodonationincart']);
		unset($_SESSION['pcomment']);
		unset($_SESSION['feedback']);
		/* Reflect fact that user has logged out */
		$this->logged_in = false;
		$this->username  = GUEST_NAME;
		$this->userlevel = GUEST_LEVEL;
		session_destroy();
	}

	
	function getNextLoanValue($loanValue, $loanPercent){
		$value= ($loanValue*$loanPercent)/100;
		return $value;
	}
	/**
	* register - Gets called when the user has just submitted the
	* registration form. Determines if there were any errors with
	* the entry fields, if so, it records the errors and returns
	* 1. If no errors were found, it registers the new user and
	* returns 0. Returns 2 if registration failed.
	*/


	/* -------------------Admin Section Start----------------------- */

function activateBorrower($borrowerid, $pcomment, $addmore, $cid, $ofclName = null, $OfclNumber = null)
	{
		global $database, $form, $validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateActivateBorrower($pcomment, $ofclName, $OfclNumber);
		if($form->num_errors > 0){
			return 1;
		}
		$result=$database->activateBorrower($this->userid, $borrowerid, $pcomment, $addmore, $cid, $ofclName, $OfclNumber);
		if(!$result)
		{
			$form->setError("dberror", $lang['error']['error_website']);
			return 1;
		}
		else if($result)
		{
			$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			$bdetail=$database->getEmailB($borrowerid);
			require("editables/mailtext.php");
			$language= $database->getPreferredLang($borrowerid);
			$path=  getEditablePath('mailtext.php',$language);
			require ("editables/".$path);
			$Subject=$lang['mailtext']['ActivateBorrower-subject'];
			$replyTo = SERVICE_EMAIL_ADDR;
			$To=$params['name'] = $bdetail['name'];
			$prurl = getUserProfileUrl($this->userid);
			$params['link'] = SITE_URL.$prurl ;
			$message = $this->formMessage($lang['mailtext']['ActivateBorrower-msg'], $params);
			if($addmore == 0)
				$reply=$this->mailSending($From, $To, $bdetail['email'], $Subject, $message,$templet, $replyTo);
			return 0;
		}
	}
	function deactivateBorrower($bid,$set)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return= $database->deactivateBorrower($bid, $set);
		$deat=$database->getEmailB($bid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$language= $database->getPreferredLang($bid);
		$path=  getEditablePath('mailtext.php',$language);
		require ("editables/".$path);
		$Subject=$emailtext['DeactivateBorrower-subject'];
		$To=$params['name'] = $deat['name'];
		if($set){
			$params['status'] = 'Activeted';
		}
		else{
			$params['status'] = 'Deactiveted';
		}
		$prurl = getUserProfileUrl($bid);
		$params['link'] = SITE_URL.$prurl ;
		$message = $this->formMessage($lang['mailtext']['DeactivateBorrower-msg'], $params);
		$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
		return $return;
	}
	function activateLender($lid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->activateLender($lid);
		return $return;
	}
	function deactivateLender($lid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->deactivateLender($lid);
		return $return;
	}
	function activatePartner($pid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->activatePartner($pid);
		$deat=$database->getEmailP($pid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$language= $database->getPreferredLang($pid);
		$path=  getEditablePath('mailtext.php',$language);
		require ("editables/".$path);
		$Subject=$lang['mailtext']['ActivatePartner-subject'];
		$To=$params['name'] = $deat['name'];
		$params['status'] = 'Activated';
		$prurl = getUserProfileUrl($pid);
		$params['link'] = SITE_URL.$prurl ;
		$message = $this->formMessage($lang['mailtext']['ActivatePartner-msg'], $params);
		$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
		return $return;
	}
	function deactivatePartner($pid)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return= $database->deactivatePartner($pid);
		$deat=$database->getEmailP($pid);
		$From=EMAIL_FROM_ADDR;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$language= $database->getPreferredLang($pid);
		$path=  getEditablePath('mailtext.php',$language);
		require ("editables/".$path);
		$Subject=$lang['mailtext']['ActivatePartner-subject'];
		$To=$params['name'] = $deat['name'];
		$params['status'] = 'Deactiveted';
		$prurl = getUserProfileUrl($pid);
		$params['link'] = SITE_URL.$prurl ;
		$message = $this->formMessage($lang['mailtext']['ActivatePartner-msg'], $params);
		$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
		return $return;
	}
	function setExchangeRate($amount,$currency)
	{
		global $form, $database;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$field="exrateamt";
		if(!$amount || strlen($amount)<1){
			$form->setError($field, $lang['error']['empty_rate']);
			return 0;
		}
		$result=$database->addRates($amount,$currency, time());
		if($result){
			return 1;
		}
		else
		{
			$form->setError("exrateamt", $lang['error']['error_website']);
			return 0;
		}
	}
	function saveRegistrationFee($currency,$amount)
	{
		global $database,$form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$field="currency";
		if(!$currency || $currency=='sel'){
			$form->setError($field, $lang['error']['empty_currency']);
		}
		$field= "amount";
		if(strlen($amount)<1){
			$form->setError($field, $lang['error']['empty_amount']);
		}
		else if(!eregi("^[0-9/.]", $amount)){
			$form->setError($field, $lang['error']['invalid_amount']);
		}
		if($form->num_errors >0){
			return 0;
		}
		$currency_details=explode("#",$currency);
		$currency_id=$currency_details[0];
		$currency_name=$currency_details[1];
		$currency_code=$currency_details[2];

		$saveinfo= $database->saveRegistrationFee($currency_id,$currency_name,$currency_code,$amount);
		if($saveinfo==1)
		{
			return $saveinfo;
		}
		$field="currency";
		if($saveinfo==2)
		{
			$form->setError($field, $lang['error']['already_currency']);
			return 0;
		}
	}
	function setEditAmount($amount,$currencyid)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$result=$database->setEditAmount($amount,$currencyid);
		if($result){
			return 1;
		}
		else{
			return 0;
		}
	}
	function setMinFund($amount)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("../editables/".$path);
		$field='mamount';
		if(!$amount || strlen($amount)<0){
			$form->setError($field, $lang['error']['invalid_minamt']);
		}
		else if(!is_numeric($amount)){
			$form->setError($field, $lang['error']['invalid_minamt']);
		}
		if($form->num_errors > 0){
			return 3;
		}
		$result=$database->setMinFund($amount);
		if($result){
			return 0;
		}
		else{
			return 1;
		}
	}
	function deleteBorrower($bid)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->getBorrowerById($bid);
			$result=0;
			if(!empty($res))
			{
				$result = $database->deleteBorrower($bid);
			}
			return $result;
		}
	}
	function deletePartner($pid)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->getPartnerDetails($pid);
			$result=0;
			if(!empty($res))
			{
				$result = $database->deletePartner($pid);
			}
			return $result;
		}
	}
	function deleteLender($lid)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->getLenderDetails($lid);
			$result=0;
			if(!empty($res))
			{
				$result = $database->deleteLender($lid);
			}
			return $result;
		}
	}
	function makeLoanDefault($borrowerid,$loanid)
	{

		global $database;
		$result = $database->setDefultInLoan($borrowerid,$loanid);
		if($result)
		{
			$lendersArray = $database->getLendersAndAmount($loanid, true);
			$borrower_name=$database->getNameById($borrowerid);
			$loanDetail=$database->getLoanDetails($loanid);
			$percent_repaid= $this->getStatusBar($borrowerid,$loanid, 3);
			for($i =0; $i < count($lendersArray); $i++)
			{
				$this->sendDefaultedLoanMailToLender($lendersArray[$i]['lenderid'],$borrower_name,$percent_repaid,$loanDetail['reqdamt']);
			}
		}
		return $result;
	}
	function makeLoanUndoDefault($borrowerid,$loanid)
	{
		global $database;
		$result = $database->undoDefultInLoan($borrowerid,$loanid);
		return $result;
	}
	function makeLoanCancel($borrowerid,$loanid)
	{
		global $database;
		$result = $database->setCancelInLoan($borrowerid,$loanid);
		return $result;
	}
	function forgetpassword($submail, $subuser=0)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$validation->checkEmail($submail, "forgetemail");
		if($subuser ===GUEST_NAME)
		{
			$field="forgetusername";
			$form->setError($field, $lang['error']['select_username']);
			return 2;
		}
		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->forgotPassword($submail, $subuser);
		if($result==0)
		{
			$field="forgeterror";
			$form->setError($field, $lang['error']['doesnot_email']);
			return 0;
		}
		else if($result==2)
		{
			return 2;
		}
		else if($result==3)
		{
			$field="forgeterror";
			$form->setError($field, $lang['error']['error_occure']);
			return 0;
		}
		else
		{   ///send new pass to user's email
			$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			require("editables/mailtext.php");
			$language= $database->getPreferredLang($result['userid']);
			$path=  getEditablePath('mailtext.php',$language);
			require ("editables/".$path);
			$Subject=$lang['mailtext']['ForgotPassowrd-subject'];
			$To=$params['name'] = $result['uname'];
			$params['username'] = $result['username'];
			$params['password'] = $result['pass'];
			$message = $this->formMessage($lang['mailtext']['ForgotPassowrd-msg'], $params);
			$reply=$this->mailSending($From, $To, $result['email'], $Subject, $message,$templet);
			return 1;
		}
	}
	function madePayment($borrowerid,$loanid,$date,$amount, $sendMail=true, $sub_type=0)
	{
		global $database, $form, $validation;
		$rtn = 0;
		$validation->checkAmount($amount, "paidamt");
		$validation->checkDated($date, "paiddate");
		$path=  getEditablePath('error.php');
		include(FULL_PATH."editables/".$path);
		$now = time();
		if($now < strtotime($date)) {
			$form->setError('paiddate', $lang['error']['invalid_date']);
		}

		if($form->num_errors > 0)
		{
			return 0;
		}
		if(is_numeric($date) && (int)$date == $date)
			$paidd = $date;
		else
			$paidd = strtotime($date);
		/*Divide the payment in the lenders and the web site fee
			1. Get the web site fee %
			2. Get who all lended and how much
			3. substract he website fee out of this installment
			4. remaining money should be divided in lenders according to their proportion and added
			5. If the loan gets completed with this payment set the loan status to complete
		*/
		$CurrencyRate=$database->getExRateById($paidd,$borrowerid);
		$totalOldFee = $database->getWebsiteFeeTotal($loanid);
		/*  get loanapplic data(row) of this loan id    */
		$lonedata=$database->getLoanfund($borrowerid, $loanid);
		$loanAmt=$lonedata['AmountGot']; /*The amount entered by admin on disbursement */
		$rate=$lonedata['finalrate'];   /*  Avearege interest rate of all lenders   */
		$feerate = $lonedata['WebFee'];
		$extra_period = $database->getLoanExtraPeriod($borrowerid, $loanid);
		$period=$lonedata['period'] + $extra_period;    /* Actual repayment perieds which do not includes grace periods */
		$grace=$lonedata['grace'];  /* grace periods before repayment starts */

		$feelender=((($period)*$loanAmt*($rate))/1200); /* total interest amount of lenders for this loan */
		$feeamount_org=((($period)*$loanAmt*($feerate))/1200);/* zidisha fee amount for this loan */
		$tamount_org=$loanAmt + $feelender + $feeamount_org; /* Total amount to be pay for by borrower */

		$totalPayment = $database->getTotalPayment($borrowerid, $loanid);
		$forgiveAmount= $database->getForgiveAmount($borrowerid,$loanid);
		$feeamount = round(((($feeamount_org - $totalOldFee) * $amount) / ($tamount_org - $totalPayment['paidtotal'] - $forgiveAmount)),4);
		$tamount=$loanAmt + $feelender;
		$pInCurrInstallment = ($loanAmt/$tamount) * ($amount-$feeamount);
		$lendersArray = $database->getLendersAndAmount($loanid, true);
		$totalDollarFee = convertToDollar($feeamount, $CurrencyRate);
		if($rtn==0)
		{	
		
			$rest1= $database->setTransactionAmount(ADMIN_ID,$totalDollarFee,'Fee',$loanid, $CurrencyRate, FEE, $paidd);
			if($rest1==0)
				$rtn=1;
		}
		$total =0;
		for($i =0; $i < count($lendersArray); $i++)
		{
			$total += $lendersArray[$i]['amount'];
		}
		for($i =0; $i < count($lendersArray); $i++)
		{
			$lenderPrincipal = ($lendersArray[$i]['amount']/$total)*$pInCurrInstallment;
			$lenderInterest = ($lenderPrincipal * $lendersArray[$i]['intr'] * $period)/1200;
			$amountToLender = $lenderPrincipal +  $lenderInterest;
			$dollarAmountToLender = convertToDollar($amountToLender, $CurrencyRate);
			if($rtn==0)
			{
				$rest2= $database->setTransaction($lendersArray[$i]['lenderid'],$dollarAmountToLender,'Loan repayment received',$loanid, $CurrencyRate,LOAN_BACK_LENDER,0,$paidd, $sub_type);
				if($rest2==0)
					$rtn=1;
			}
		}
		/*amount coming into acount is +ve  going out of account is -ve*/
		$amtEntered = $amount;
		if($rtn==0)
		{	
			$rest3= $database->setTransactionAmount($borrowerid, $amtEntered,'Loan installment',$loanid, $CurrencyRate,LOAN_BACK, $paidd);
			if($rest3==0)
					$rtn=1;
		}
		if($rtn==0)
		{
			$rest4= $this->setMadePayment($borrowerid, $loanid, $amount, $paidd);
			if($rest4==0) {
				$rtn=1;
			}else {
				$database->setOntimeRepayCredit($rest4, $borrowerid, $amount);  //$rest4 contains the ids we inserted data in repayment table we will check every entry if inserted ontime.
			}

		}
		$bname=$database->getEmailB($borrowerid);
		$b_name=$bname['name'];

		$loandetail=$database->getLoanDetailsNew($borrowerid, $loanid);
		$totalAmt = $loandetail['totalAmt'];
		$totalPaidAmt = $loandetail['totalPaidAmt'];
		if($rtn==0)
		{
			if ( (abs($totalAmt) - abs($totalPaidAmt) <= 1))
			{
				$rest5=$database->loanpaidback($borrowerid,$loanid);
				if($rest5==0)
					$rtn=1;
				//email for these guys to come and provide review on the loan
				for($i =0; $i<count($lendersArray); $i++)
				{
					//mail for  giving feed back to each and every lender
					$r=$database->getEmail($lendersArray[$i]['lenderid']);
					$From=EMAIL_FROM_ADDR;
					$templet="editables/email/simplemail.html";
					require ("editables/mailtext.php");
					$Subject=$lang['mailtext']['RepayFeedback-subject'];
					$To=$params['name'] = $r['name'];
					$loanprurl = getLoanprofileUrl($borrowerid, $loanid);
					$params['link'] = SITE_URL.$loanprurl.'#e1' ;
					$params['bname'] = $b_name;
					$message = $this->formMessage($lang['mailtext']['RepayFeedback-msg'], $params);
					$reply=$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
				}
			}
		}
		if($rtn==0)
		{
			if($sendMail)
			{
				for($i =0; $i < count($lendersArray); $i++)
				{
					$r=$database->getEmailAndPreference($lendersArray[$i]['lenderid']);
					if($r['email_loan_repayment'])
					{
						$availableAmt = $this->amountToUseForBid($lendersArray[$i]['lenderid']);
						$availAmt = number_format(truncate_num(round($availableAmt, 4), 2) , 2, '.', ',');
						$lenderPrincipal = ($lendersArray[$i]['amount']/$total)*$pInCurrInstallment;
						$lenderInterest = ($lenderPrincipal * $lendersArray[$i]['intr'] * $period)/1200;
						$amountToLender = $lenderPrincipal +  $lenderInterest;
						$dollarAmountToLender = convertToDollar($amountToLender, $CurrencyRate);
						$From=EMAIL_FROM_ADDR;
						$templet="editables/email/simplemail.html";
						require ("editables/mailtext.php");
						$Subject=$lang['mailtext']['RecivedPayment-subject'];
						$To=$params['name'] = $r['name'];
						$params['avail_amount'] = $availAmt;
						$params['amount'] = number_format(truncate_num(round($dollarAmountToLender, 4), 2), 2, ".", ",");
						$params['bname'] = $b_name;
						$params['lend_link'] = WEBSITE_ADDRESS.'?p=2';
						$loanprurl = getLoanprofileUrl($borrowerid, $loanid);
						$params['link'] = SITE_URL.$loanprurl ;
						$message = $this->formMessage($lang['mailtext']['RecivedPayment-msg'], $params);
						$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
					}
				}
			}
		}
		if($rtn==0)
			return 1;
		else
		{
			$validation->setCustomError("failure", "error_website");
			return -1;
		}
	}
	function setMadePayment($borrowerid, $loanid, $amount, $date)
	{
		global $database, $form;
		$rtn=0;
		$res1= $database->getSchedulefromDB($borrowerid, $loanid);
		$amountbal = $amount;
		$jj=0;
		for($k=0; $k<count($res1); $k++)
		{
			if($res1[$k]['amount'] > 0)
			{
				$idIndex=$k;
				$jj=$k;
				$installment = $res1[$k]['amount'];
				break;
			}
		}
		$j=-1;
		for($i=0; $i<count($res1); $i++)
		{
			if(isset($res1[$i]['paidamt'])  && $res1[$i]['paidamt'] !=0 && $res1[$i]['paidamt'] !=NULL)
			{
				$idIndex=$i;
				$j=$i;
			}
		}
		$maxid = $res1[count($res1) - 1]['id'];
		$diff1 = 0;
		if($j > -1)
		{
			$diff1 = $res1[$j]['amount'] - $res1[$j]['paidamt'];
		}
		else
		{
			/* this case means there is no paid amount in table */
			$diff1=0;
			$idIndex--; //The id needs to be decremented as it is incremented below
			$j=$jj-1;
		}
		if($diff1 > 0)
		{
			if($diff1 >= $amountbal)
			{
				if($rtn==0)
				{
					$result=$database->madePayment($res1[$idIndex]['id'],$amountbal, $date);
					if($result==0)
						$rtn=1;
					else {
						$repayids[] = $res1[$idIndex]['id'];
					}
				}
			}
			else
			{
				for($bal=$amountbal; $bal >0;)
				{
					if($res1[$idIndex]['id']==$maxid)
					{
						if($rtn==0)
						{
							$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
							if($result==0)
								$rtn=1;
							else {
								$repayids[] = $res1[$idIndex]['id'];
							}

							$bal=0;
						}
					}
					else
					{
						if($diff1 > 0)
						{
							if($rtn==0)
							{
								 $result=$database->madePayment($res1[$idIndex]['id'],$diff1, $date);
								 if($result==0)
									$rtn=1;
								 else {
									$repayids[] = $res1[$idIndex]['id'];
								}

								 $bal = $bal - $diff1;
								 $idIndex++;
								 $j++;
								 $diff1=0;
							}
						}
						else
						{
							$installment=$res1[$j]['amount'];
							if($bal <= $installment)
							{
								if($rtn==0)
								{
									$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
									if($result==0)
										$rtn=1;
									else {
										$repayids[] = $res1[$idIndex]['id'];
									}

									$bal=0;
								}
							}
							else
							{
								if($rtn==0)
								{
									$result=$database->madePayment($res1[$idIndex]['id'],$installment, $date);
									if($result==0)
										$rtn=1;
									else {
										$repayids[] = $res1[$idIndex]['id'];
									}
									$bal = $bal - $installment;
									$idIndex++;
									$j++;
								}
							}
						}
					}
				}
			}
		}
		else
		{
			if($res1[$idIndex]['id'] < $maxid)
			{
				$idIndex++;
				$j++;
			}
			for($bal=$amountbal; $bal >0;)
			{
				if($res1[$idIndex]['id']==$maxid)
				{
					if($rtn==0)
					{
						$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
						if($result==0)
							$rtn=1;
						else {
							$repayids[] = $res1[$idIndex]['id'];
						}
						
						$bal=0;
					}
				}
				else
				{
					$installment=$res1[$j]['amount'];
					if($bal <= $installment)
					{
						if($rtn==0)
						{
							$result=$database->madePayment($res1[$idIndex]['id'],$bal, $date);
							if($result==0)
								$rtn=1;
							else {
								$repayids[] = $res1[$idIndex]['id'];
							}
							$bal=0;
						}
					}
					else
					{
						if($rtn==0)
						{
							$result=$database->madePayment($res1[$idIndex]['id'],$installment, $date);
							if($result==0)
								$rtn=1;
							else {
								$repayids[] = $res1[$idIndex]['id'];
							}
							$bal = $bal - $installment;
							$idIndex++;
							$j++;
						}
					}
				}
			}
		}
		if($rtn==0)
		{
			$result=$database->madePayment_Actual($amount, $date, $loanid, $borrowerid,$res1[$idIndex]['id']);
			if($result==0)
				$rtn=1;
		}
		if($rtn==0)
			return $repayids;
		else
			return 0;
	}
	// Oct-2012 Anupam ,last argument $date_disbursed added since now admin will select disbursed date from the loan transaction page 
	function updateActiveLoan($pid, $loanid,$a_amount,$reg_fee, $date_disbursed=0)
	{
		global $database, $lang; //Anupam 25-Jan-2013 added for test cases
		traceCalls(__METHOD__, __LINE__);
		$state=LOAN_ACTIVE;
		if($loanid==0)
			return 2;//activeLoanID in borrowers is not set
		// Anupam 1-9-2013 check if already disbursed for erroneously posted form more than one time
		$disbdate = $database->getLoanDisburseDate($loanid);
		if(!empty($disbdate)) {
			return 0;
		}
		/*
			Verify if the lenders account has enough money if
			not do not go ahead. Notify admin about the Lenders who do not have
			sufficient fund. Ask lenders to come and pay. or reopen the bid.
			get the money from Lenders account ($)
			pay it to borrowers account local currency
		*/
		$lendersArray = $database->getLendersAndAmount($loanid);
		$CurrencyRate = $database->getCurrentRate($pid);
		if(empty($CurrencyRate))
			return 0;
		$proceed =1;
		/*	Now we are adding transactions for bids in transaction table so no need to check available balance and add duplication transaction
			So do not uncomment below commented code
		*/
		/*for($i =0; $i < count($lendersArray); $i++)
		{
			//Pranjal modified below since this is where we are making bid active so we need to count the total
			//available amount as some amount is stuck in this bid too
			$amt = $database->getTransaction($lendersArray[$i]['lenderid'],0); //$this->amountToUseForBid($lendersArray[$i]['lenderid']);
			$dollaramount = $lendersArray[$i]['amount'];
			if($amt < $dollaramount){
				$proceed =0; //do not check the amount for now
				break;
			}
		}*/
		if($proceed)
		{
			/*	Now we are adding transactions for bids in transaction table so no need to check available balance and add duplication transaction So do not uncomment below commented code
			*/
			/*for($i =0; $i < count($lendersArray); $i++)
			{
				$dollaramount = $lendersArray[$i]['amount'] * -1; //amount going out of account is -ve
				$res1=$database->setTransaction($lendersArray[$i]['lenderid'],$dollaramount,'Loan fund disbursement',$loanid, $CurrencyRate, LOAN_SENT_LENDER);
				if($res1==0)
					return 0; // in case if failed any lender transaction
			}*/
			//Pranjal add the amount as added by admin in native currency
			$res2= $database->updateGotAmount($loanid, $a_amount);
			if($res2==0)
				return 0;
			$loanamount = -1 *$a_amount;
			$res3= $database->setTransactionAmount($pid,$loanamount,'Got amount from loan',$loanid, $CurrencyRate, DISBURSEMENT, $date_disbursed);
			if($res3==0)
				return 0;
			if(!empty($reg_fee))
			{
				$res7=$database->setTransaction(ADMIN_ID,$reg_fee,'Registration Fee',$loanid, $CurrencyRate, REGISTRATION_FEE);
				if($res7==0)
					return 0; // in case if failed registration fee transaction
				$reg_fee1 = -1 * $reg_fee;
				$res8=$database->setTransaction($pid,$reg_fee1,'Registration Fee',$loanid, $CurrencyRate, REGISTRATION_FEE);
				if($res8==0)
					return 0; // in case if failed registration fee transaction
			}
			$installment_day= $database->getInstallmentDate($loanid);
			$difference=0;
			if(!empty($installment_day) && $installment_day!=0){
				$difference = $this->getDateDifferecneFromToday($installment_day, $date_disbursed);
			}
			$res4= $database->updateLoanStatus($loanid,$state, $difference);
			if($res4==0)
				return 0;
			$res5= $database->updateActiveLoan($pid,$state);
			if($res5==0)
				return 0;
			$res6= $this->setSchedule($pid, $loanid, $date_disbursed);
			if($res6==0)
				return 0;
			else
			{
				require ("editables/mailtext.php");
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				$Subject=$lang['mailtext']['ActiveBid-subject'];
				for($i =0; $i < count($lendersArray); $i++)
				{
					$r=$database->getEmail($lendersArray[$i]['lenderid']);
					$To=$params['name'] = $r['name'];
					$params['bname'] = $database->getNameById($pid);
					$params['ddate'] = date('M d, Y',  time());
					$params['amtlocal'] = number_format($a_amount, 0, ".", ",") .' ' . $database->getUserCurrencyName($pid);
					$params['link'] = WEBSITE_ADDRESS.'?p=14&l='.$loanid ;
					$message = $this->formMessage($lang['mailtext']['ActiveBid-msg'], $params);
					$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
				}
				$r = $database->getEmailB($pid);
				$Subject=$lang['mailtext']['loan_disburse_sub'];
				$To=$params['bname'] = $r['name'];
				$currency='';
				$currency_amt=$database->getReg_CurrencyAmount($pid);
				foreach($currency_amt as $row)
				{
					$currency=$row['currency'];
					if(empty($reg_fee))
						$reg_fee=$row['Amount'];
				}
				$params['reg_fee_amt'] = number_format($reg_fee, 0, ".", ",") .' ' .$currency;
				$params['disb_amt'] = number_format($a_amount, 0, ".", ",") .' ' .$currency;
				$params['net_amt'] = number_format(($a_amount - $reg_fee), 0, ".", ",") .' ' .$currency;
				$country = $database->getBorrowerCountryByLoanid($loanid);
				$repayment_instruction=$database->getRepayment_InstructionsByCountryCode($country);
				$repay_ins='';
				if(!empty($repayment_instruction))
					$repay_ins = nl2br($repayment_instruction['description']);
				$params['repay_ins'] = $repay_ins;
				$params['zidisha_link'] = SITE_URL;
				$message = $this->formMessage($lang['mailtext']['loan_disburse_body'], $params);
				$this->mailSending($From, $To, $r['email'], $Subject, $message,$templet);
				return 1;//success
			}
		}
		else
		{
			return 0; //insufficient funds
		}
	}
	function setSchedule($uid, $loanid, $date_disbursed)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$lonedata=$database->getLoanfund($uid, $loanid);
		$extraPeriod=$database->getLoanExtraPeriod($uid, $loanid);
		$loanid=$lonedata['loanid'];
		$amount=$lonedata['AmountGot'];
		$loneAppDate=$lonedata['applydate'];
		$rate=$lonedata['finalrate'];
		$webrate=$lonedata['WebFee'];
		$period=$lonedata['period'];
		$grace=$lonedata['grace'];
		$inst_day = $database->getinstallmentday($uid, $loanid);
		if(empty($inst_day)) {
			$inst_day = date('d',time());
		}
		if(empty($date_disbursed)) {
			$date_disbursed = time();
		}
		$loneAcceptDate = $date_disbursed;
		$currday = date('d',$date_disbursed);
		$currmonth = date('m',$date_disbursed);
		$curryear = date('Y',$date_disbursed);
		if($currday <= $inst_day) {
			$loneAcceptDate	 = mktime(0,0,0,$currmonth,$inst_day,$curryear);
		}else {
			$currmonth = $currmonth+1;
			$loneAcceptDate	 = mktime(0,0,0,$currmonth,$inst_day,$curryear);
		}
		$period_org=$period;
		$period=$period+$extraPeriod;
		$interest=(($period)/12)*(($amount*($rate/100))+($amount*($webrate/100)));
		$totalamt=$amount+$interest;
		$pinterest=$interest/($period);
		$pamount=$amount/($period-$grace);
		$pamount=round($pamount, 4);

		//correct decimal places
		$pamount1=floor($pamount);
		$dfamt=round($pamount-$pamount1, 2)*($period-$grace);


		$pinterest1=floor($pinterest);
		$dfint=round($pinterest-$pinterest1, 2)*($period);

		$count=0;
		$tint=0;
		$tprin=0;
		$ttotl=0;
		$schedule = array();
		$period_org += 1;
		$accptday = date('d',$loneAcceptDate);
	if($accptday!=31) {
		for($i=0; $i<$period_org; $i++)
		{
			if($count < $grace)
			{
				$pint1=number_format($pinterest1, 2, ".", ",");
				$schedule[] = array('date'=>strtotime('+ '.$count.' month ' , $loneAcceptDate), 'total' => 0);
				$tint=$tint+$pinterest1;
			}
			else if($count >= $grace)
			{
				if($count==$period_org){
					$pamount1=$pamount1+$dfamt;
					$pinterest1=$pinterest1+$dfint;
				}
				$schedule[] = array('date'=> strtotime('+ '.$count.' month ' , $loneAcceptDate), 'total' => $totalamt/($period_org - $grace));
				$tint=$tint+$pinterest1;
				$tprin=$tprin+$pamount1;
				$ttotl=$ttotl+$pamount1+$pinterest1;
			}
			$count++;
		}
	}else if($accptday==31) {
		$countonce=0;
		for($i=0; $i<$period_org; $i++) {
				$month = date('m', strtotime('+ '.$count.' months ' , $loneAcceptDate));
				$year  = date('Y', strtotime('+ '.$count.' months ' , $loneAcceptDate));
				$day   = date('d', strtotime('+ '.$count.' months ' , $loneAcceptDate));
				if($day==31&& $countonce==0) {
					$fakedate = strtotime('- 30 days ' , $loneAcceptDate);
					$lastdayofmonth = date('t',$fakedate); 
					if($count < $grace)
					{
						$pint1=number_format($pinterest1, 2, ".", ",");
						$schedule[] = array('date'=>strtotime("$month/$lastdayofmonth/$year"), 'total' => 0);
						$tint=$tint+$pinterest1;
					}
					else if($count >= $grace)
					{
						if($count==$period_org){
							$pamount1=$pamount1+$dfamt;
							$pinterest1=$pinterest1+$dfint;
						}
						$schedule[] = array('date'=> strtotime("$month/$lastdayofmonth/$year"), 'total' => $totalamt/($period_org - $grace));
						$tint=$tint+$pinterest1;
						$tprin=$tprin+$pamount1;
						$ttotl=$ttotl+$pamount1+$pinterest1;
					}
					$countonce++;

				} else {
					$fakedate = strtotime('+1 months ' , $fakedate);
					$lastdayofmonth = date('t',$fakedate);
					$fakemonth = date('m',$fakedate);
					$fakeyear = date('Y',$fakedate);
					//$dated[] = strtotime("$fakemonth/$lastdayofmonth/$fakeyear");
					
					if($count < $grace)
					{
						$pint1=number_format($pinterest1, 2, ".", ",");
						$schedule[] = array('date'=>strtotime("$fakemonth/$lastdayofmonth/$fakeyear"), 'total' => 0);
						$tint=$tint+$pinterest1;
					}
					else if($count >= $grace)
					{
						if($count==$period_org){
							$pamount1=$pamount1+$dfamt;
							$pinterest1=$pinterest1+$dfint;
						}
						$schedule[] = array('date'=> strtotime("$fakemonth/$lastdayofmonth/$fakeyear"), 'total' => $totalamt/($period_org - $grace));
						$tint=$tint+$pinterest1;
						$tprin=$tprin+$pamount1;
						$ttotl=$ttotl+$pamount1+$pinterest1;
					}		

				}
			$count++;
		}
	}
	if(!empty($schedule))
			return $database->setSchedule($uid, $loanid, $schedule);
		else
			return 0;
	}
	function pfreport($date3, $date4)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$date=fixdate;
		$flag=0;
		$field="fromdate";
		$flag=0;
		if(!$date3 || strlen($date3=trim($date3))==0)
		{
			$form->setError($field, $lang['error']['empty_fromdate']);
			$flag=1;
		}
		$field="todate";
		if(!$date4 || strlen($date4=trim($date4))==0)
		{
			$form->setError($field, $lang['error']['empty_todate']);
			$flag=1;
		}
		$result1=datecompare($date,$date3);
		$result2=datecompare($date3,$date4);
		if($result1==false && $flag!=1)
		{
			$field="wrongdate1";
			$form->setError($field, $lang['error']['invalid_fromdate']);
		}
		else if($result2==false && $flag!=1)
		{
			$field="wrongdate2";
			$form->setError($field, $lang['error']['greater_todate']." ".$date3);
		}
		if($form->num_errors > 0)
		{
			return 0;
		}
		else
			return 1;
	}
	function trhistory($date3, $date4)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$date=fixdate;
		if(empty($date3)){
			$form->setError("fromdate", $lang['error']['empty_fromdate']);
		}
		if(empty($date4)){
			$form->setError("todate", $lang['error']['empty_todate']);
		}
		if($form->num_errors > 0)
			return 0;
		$result1=datecompare($date,$date3);
		$result2=datecompare($date3,$date4);
		if(!$result1){
			$form->setError("fromdate", $lang['error']['invalid_fromdate']);
		}
		else if(!$result2){
			$form->setError("todate", $lang['error']['lower_fromdate']);
		}
		if($form->num_errors > 0)
			return 0;
		else
		{
			$_SESSION['date1']=$date3;
			$_SESSION['date2']=$date4;
			return 1;
		}
	}
	function getTranslate($bizdesc, $about, $loanuse, $cmnt, $id, $up_id, $loanid,$lcid=0)
	{
		global $database, $form;  //The database and form object
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if($up_id==1)
		{
			if(empty($this->userid)){
				$form->setError("loginerr", $lang['error']['loginerr']);
				return 0;
			}
			$res = $database->upadateTranslate($bizdesc, $about, $loanuse, 0, $id, $up_id, $loanid);
		}
		if($up_id==2)
		{  
		
			$res = $database->upadateTranslate(0, 0, 0, $cmnt, $id, $up_id, 0);
			if(trim($cmnt) !='')
			{	
				if($reschedule_id=$database->getRescheduleIdFromComment($id))
				{
					$rescheduleResult= $database->getRescheduleData($reschedule_id);
					$lendersArray = $database->getLendersAndAmount($rescheduleResult['loan_id'], true);
					for($i =0; $i < count($lendersArray); $i++)
					{	
						$this->sendRescheduleCommentMailToLender($lendersArray[$i]['lenderid'],$rescheduleResult['borrower_id'],$rescheduleResult['period'],$cmnt, $rescheduleResult['date']);
					}
				}
				else
				{
					$this->sendTranslateCommentMails($id, $cmnt);
				}
			}
		}
		if($up_id==3)
		{
			$res = $database->upadateTranslate(0, 0, 0, $cmnt, 0, $up_id, 0,$lcid);
		}
		if($res==1 || $res==3 || $res==5)
				return $res;
		else
		{
			$form->setError("updateerr", $lang['error']['failed_updation']);
			return $res;
		}
	}
	function donate_card($id,$card_code,$amt)
	{
		global $database, $session;
		traceCalls(__METHOD__, __LINE__);
		if($this->userlevel == ADMIN_LEVEL)
		{
			$res = $database->CheckGiftCardClaimed($card_code);
			if($res == 0)
			{
				$res1 = $database->CheckGiftCardExpired($card_code);
				if($res1 == 1)
				{
					$res2 = $database->donate_card($id,$card_code);
					if($res2 ==1)
					{
						$res3 = $database->setTransaction($this->userid, $amt,'Gift Card Conversion to Donation',0, 0, GIFT_DONATE);
						return 1;
					}
				}
			}
		}
		return 0;
	}
	function addpaymenttolender($userid,$amount,$donation,$autoLending=false)
	{
		global $database,$form;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($userid)){
			$form->setError("userid", $lang['error']['select_username']);
		}
		if(empty($amount) && empty($donation)){
			$form->setError("amount", "please enter any one amount");
		}
		else
		{
			if($amount <0){
				$form->setError("amount", $lang['error']['invalid_amount']);
			}
			if($donation <0){
				$form->setError("donation", $lang['error']['invalid_amount']);
			}
		}
		if($autoLending && $userid) {
			$activated=$database->IsAutoLendingActivated($userid);
			if(!$activated) {
				$form->setError("auto_lending", $lang['error']['autoLendNot_Acitve']);
			}
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			if(empty($amount))
				$amount=0;
			if(empty($donation))
				$donation=0;
			$database->startDbTxn();
			$res=$database->addpaymenttolender($userid,$amount,$donation);
			if($res==0){
				$database->rollbackTxn();
				return 0;
			}
			else
			{   
				if(!$autoLending) {
					$activated=$database->IsAutoLendingActivated($userid);
					if($activated) {
						$res=$database->UpdateLenderCreditForAutoLend($userid , $amount);
						if($res==0) {
							$database->rollbackTxn();
							return 0;
						}
					}
				}

				$database->commitTxn();
				if($amount >0){
					$this->sendFundUploadMail($userid,$amount);
				}
				if($donation >0){
					$this->sendDonationMail($userid,$donation);
				}
				return 1;
			}
		}
	}

	function adddonationtolender($name, $email, $donationamt)
	{
		global $database,$form, $validation;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($name)){
			$form->setError("name", $lang['error']['empty_name']);
		}
		$validation->checkEmail($email, "email");
		if($donationamt < 0 || empty($donationamt)){
			$form->setError("donationamt", $lang['error']['invalid_amount']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$database->startDbTxn();
			$res=$database->adddonationtolender($name, $email, $donationamt);
			if($res==0){
				$database->rollbackTxn();
				return 0;
			}
			else
			{
				$database->commitTxn();
				$this->sendDonationMail(0,$donationamt,$email, $name);
				return 1;
			}
		}
	}
	function changePassword($userid,$password,$cpassword)
	{
		global $database,$form, $validation;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($userid)){
			$form->setError("userid", $lang['error']['select_username']);
		}
		$validation->checkPassword($password, $cpassword, "password");
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$res=$database->changePassword($userid,$password);
			if($res==1){
				$_SESSION['pchange']=1;
			}
			return $res;
		}
	}
	function referral($country,$refCommission, $refPercent)
	{
		global $database,$form;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($country)){
			$form->setError("country", $lang['error']['select_country']);
		}
		if(empty($refCommission)){
			$form->setError("refCommission", $lang['error']['empty_ref_comm']);
		}
		if(empty($refPercent) && $refPercent !='0'){
			$form->setError("refPercent", $lang['error']['empty_per_repay']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else
		{
			$res=$database->referral($country,$refCommission, $refPercent);
			return $res;
		}
	}
	function assignedPartner($partnerid,$borrowerid)
	{
		global $database,$form;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(!$partnerid)
		{
			$field="partnerid".$borrowerid;
			$form->setError($field, $lang['error']['select_partner']);
			return false;
		}
		$res1=$database->assignedPartner($partnerid,$borrowerid);
		if($res1==1)
		{
			$_SESSION['Assigned']=1;
			$this->sendVerificationMailToPartner($partnerid,$borrowerid);
			return true;
		}
		else
			return false;
	}
	function declinedBorrower($borrowerid,$dreason)
	{
		global $database,$form;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		/*if(empty($dreason)){
			$form->setError("dreason", $lang['error']['empty_ineligibility']);
			return false;
		}*/
		$res1=$database->declinedBorrower($borrowerid,$dreason, $this->userid);
		if($res1==1){
			$From=EMAIL_FROM_ADDR;
			$templet="editables/email/simplemail.html";
			$bdetail=$database->getEmailB($borrowerid);
			require ("editables/mailtext.php");
			$language= $database->getPreferredLang($borrowerid);
			$path=  getEditablePath('mailtext.php',$language);
			require ("editables/".$path);
			$Subject=$lang['mailtext']['DeclineBorrower-subject'];
			$To=$params['name'] = $bdetail['name'];
			$message = $this->formMessage($lang['mailtext']['DeclineBorrower-msg'], $params);
			$reply=$this->mailSending($From, $To, $bdetail['email'], $Subject, $message,$templet);

			$_SESSION['Declined']=1;
			return true;
		}
		else
			return false;
	}

	function addRePaymentInstruction($country_code, $description)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateRePaymentInstruction($country_code, $description);

		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->addRePaymentInstruction($country_code, $description);
		if($result)
		{
			return true;
		}
		return false;
	}

	function updateRePaymentInstruction($country_code, $description, $id)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateRePaymentInstruction($country_code, $description);

		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->updateRePaymentInstruction($country_code, $description, $id);
		if($result)
		{
			return true;
		}
		return false;
	}

	function deleteRePaymentInstruction($id)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$result=$database->deleteRePaymentInstruction($id);
		if($result)
		{
			return true;
		}
		return false;
	}
	function setCampaign($code,$value,$max_use,$message,$active)
	{
		global $form, $database;
		if(!$code|| strlen($code)<1)
		$code=getCardCode16(time());
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		$field_name='name';
		$field_value='value';
		$field_max_use='max_use';
		$field_message='message';
		include_once("editables/".$path);
		if(!$value|| strlen($value)<1){
			$form->setError($field_value, $lang['error']['empty_capmaign_value']);
		}
		if(!$max_use|| strlen($max_use)<1){
			$form->setError($field_max_use, $lang['error']['empty_max_use']);
		}
		if(!$message|| strlen($message)<1){
			$form->setError($field_message, $lang['error']['empty_capmaign_msg']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->addCampaign($code,$value,$max_use,$message,$active,time());
		if($result){
			return 1;
		}
		else
		{
		return 0;
		}
	}
	function updateCampaign($code,$value, $max_use,$message, $active,$id)
	{
		global $database, $form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		if(!$code|| strlen($code)<1)
		$code=getCardCode16(time());
		$field_code='code';
		$field_value='value';
		$field_max_use='max_use';
		$field_message='message';
		include_once("editables/".$path);
		if(!$code|| strlen($code)<1){
			$form->setError($field_code, $lang['error']['empty_name']);
		}
		if(!$value|| strlen($value)<1){
			$form->setError($field_value, $lang['error']['empty_capmaign_value']);
		}
		if(!$max_use|| strlen($max_use)<1){
			$form->setError($field_max_use, $lang['error']['empty_max_use']);
		}
		if(!$message|| strlen($message)<1){
			$form->setError($field_message, $lang['error']['empty_capmaign_msg']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		$result=$database->updateCampaign($code, $value,$max_use, $message, $active,$id);
		if($result)
		{
			$_SESSION['update_campaign']=1;
			return true;
		}
		return false;
	}
	function deletecampaign($id)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$result=$database->deletecampaign($id);
		if($result)
		{
			$_SESSION['del_campaign']=1;
			return true;
		}
		return false;
	}
	function ConverToDonation($lid,$amt)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$return=$database->ConverToDonation($lid,$amt,false);
		if($return){
			$loanstoforgiven = $database->getlendersLoantofogive($lid);
			foreach($loanstoforgiven as $loan) {
				$borrowerId = $database->getBorrowerId($loan['loanid']);
				$this->forgiveShare($loan['loanid'], $borrowerId, $lid);
			}
			$_SESSION['donated']=1;
			return true;
		}
		return false;
	}
	function checkDeactivatedAndDonate()
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$lenders=$database->checkDeactivatedAndDonate();
		if(!empty($lenders)){
			foreach($lenders as $lender){
				$avaiamount=$this->amountToUseForBid($lender['userid']);
				if($avaiamount>0){
				$return=$database->ConverToDonation($lender['userid'],$avaiamount,true);
				}
			}
			return true;
	}
		return false;
	}
	function emailedTo($borrowerid,$emailaddress,$ccaddress,$replyTo,$emailsubject,$emailmessage, $sendername)
	{
		global $form,$database,$validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateEmailedTo($borrowerid,$emailaddress,$ccaddress,$replyTo,$emailsubject,$emailmessage,$sendername);
		if($form->num_errors>0)
		{
			return 0;
		}else{
			$res=$database->SetBorrowerReports($borrowerid,$emailaddress,$ccaddress,$replyTo,$emailsubject,$emailmessage, $sendername);
			if(!empty($res)){
					$From=EMAIL_FROM_ADDR;
					if(isset($replyTo) && !empty($replyTo))
						$From=$replyTo;
					$To=$emailaddress;
					$email=$emailaddress;
					$Subject=$emailsubject;
					$message=nl2br($emailmessage);
					$message=$message."<br/>".$sendername."<br/>Zidisha";
					$templet="editables/email/simplemail.html";
					if(isset($ccaddress)){
						$CCemails=explode(',',$ccaddress);
						foreach($CCemails as $CCemail)
						{
							$this->mailSending($From, $CCemail, $CCemail, $Subject, $message,$templet,$replyTo);
						}
					}
				$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet,$replyTo);
				if($reply)
					Logger_Array("Email to borrower  sent  by admin",'email, To', $email, $To);
					return true;
			}
			return false;
		}
	}
	function outstandingReport($outstanDate)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$date=fixdate;
		$flag=0;
		$field="oustandDate";
		if(!$outstanDate || strlen($outstanDate=trim($outstanDate))==0)
		{
			$form->setError($field, $lang['error']['empty_outstandate']);
			$flag=1;
		}
		if($form->num_errors > 0)
		{
			return 0;
		}
		else
			return 1;
	}
	function getDateDifferecneFromToday($installment_day, $disb_date=0) {
		$disbursed_date = date('m/d/Y');
		if(!empty($disb_date)) {
			$disbursed_date = date('m/d/Y', $disb_date);
		}
		$diff=0;
		list($month, $day, $year) = explode('/', $disbursed_date);
		if($day<=$installment_day){
			$diff=$installment_day-$day;
		}
		else{
				$next= date("Y-m-$installment_day", strtotime("+1 months"));
				$diff=date('d',strtotime($next)-strtotime($disbursed_date));
		}
		return $diff;
	}
	function StopRefferalCommision($country)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$stopped = $database->StopRefferalCommision($country);
		if($stopped){
			$_SESSION['CommisionStopped']=1;
			return 1;
		}
		return 0;
	}
	function saveCreditSetting($country, $loanamtlimit,$charlimit, $commentlimit, $type)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$res = $database->saveCreditSetting($country, $loanamtlimit, $charlimit, $commentlimit, $type);
		if($res){
			return 1;
		}
		return 0;
	}
	function isBorrowerAlreadyAccess($brwrid)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$res= $database->isBorrowerAlreadyAccess($brwrid);
		if($res){
			$_SESSION['grant_already_access']= true;
			return true;
		}
	}
	function grantAccessCo($brwrid)
	{	
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$res= $database->grantAccessCo($brwrid);
		if($res){
			$_SESSION['grant_access']= true;
			$_SESSION['granted_accessto'] = $brwrid;
			return true;
		}
	}
	function grantRemoveCo($borrowerid)
	{
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$res= $database->grantRemoveCo($borrowerid);
		if($res){
			$_SESSION['grant_remove']= true;
			$_SESSION['removed_accessfrm'] = $borrowerid;
			return true;
		}
	}
	function review_borrower($is_photo_clear, $is_desc_clear, $is_addr_locatable, $is_number_provided, $is_nat_id_uploaded, $is_rec_form_uploaded, $is_rec_form_offcr_name,$borrowerid,$is_photo_clear_other,$is_desc_clear_other,$is_addr_locatable_other,$is_number_provided_other,$is_nat_id_uploaded_other,$is_rec_form_uploaded_other,$is_rec_form_offcr_name_other,$is_pending_mediation,$is_pending_mediation_other) {
		global $database, $form;
		if($is_photo_clear==-1) {
			$is_photo_clear = $is_photo_clear_other;
		}
		if($is_desc_clear==-1) {
			$is_desc_clear = $is_desc_clear_other;
		}
		if($is_addr_locatable==-1) {
			$is_addr_locatable = $is_addr_locatable_other;
		}
		if( $is_number_provided==-1) {
			 $is_number_provided = $is_number_provided_other;
		}
		if($is_nat_id_uploaded==-1) {
			$is_nat_id_uploaded = $is_nat_id_uploaded_other;
		}
		if($is_rec_form_uploaded==-1) {
			$is_rec_form_uploaded = $is_rec_form_uploaded_other;
		}
		if($is_rec_form_offcr_name==-1) {
			$is_rec_form_offcr_name = $is_rec_form_offcr_name_other;
		}
		if($is_pending_mediation==-1) {
			$is_pending_mediation = $is_pending_mediation_other;
		}

		$res= $database->review_borrower($is_photo_clear, $is_desc_clear, $is_addr_locatable, $is_number_provided, $is_nat_id_uploaded, $is_rec_form_uploaded, $is_rec_form_offcr_name, $borrowerid, $is_pending_mediation);
		if($res){
			$_SESSION['review_complete']= true;
			return 1;
		}else {
			$_SESSION['review_not_complete']= true;
		}
		return 0;
	}
	function remove_payment($payment_id) {
		global $database;
		$database->startDbTxn();
		$res = $database->remove_payment($payment_id);
		if($res!=1) {
			$database->rollbackTxn();
			return 0;
		}else {
			$database->commitTxn();
			return 1;
		}
	}
function verify_borrower($identity_verify, $identity_verify_other, $participate_verification, $participate_verification_other, $app_know_zidisha, $app_know_zidisha_other, $how_contact, $how_contact_other, $recomnd_addr_locatable, $recomnd_addr_locatable_other, $commLead_know_applicant, $commLead_know_applicant_other , $commLead_recomnd_sign, $commLead_recomnd_sign_other, $commLead_mediate, $commLead_mediate_other, $eligible, $additional_comments, $borrowerid, $submit_type, $complete_later, $verifier_name)
	{ 
		global $database, $form, $validation;
			require("editables/brwrlist-i.php");
			$path=  getEditablePath('brwrlist-i.php');
			require ("editables/".$path);
			require("editables/error.php");
			$path=  getEditablePath('error.php');
			require ("editables/".$path);
			if($submit_type==$lang['brwrlist-i']['comlete_later']){
				$complete_later= '1';
				$res= $database->add_verify_borrower($this->userid, $complete_later, $identity_verify, $identity_verify_other, $participate_verification, $participate_verification_other, $app_know_zidisha, $app_know_zidisha_other, $how_contact, $how_contact_other, $recomnd_addr_locatable, $recomnd_addr_locatable_other, $commLead_know_applicant, $commLead_know_applicant_other , $commLead_recomnd_sign, $commLead_recomnd_sign_other, $commLead_mediate, $commLead_mediate_other, $eligible, $additional_comments, $borrowerid, $verifier_name);
				return 2;
			}else{
				$complete_later= '0';
				if(($identity_verify==0 && $identity_verify!='') || ($participate_verification==0 && $participate_verification!='') || ($app_know_zidisha==0 && $app_know_zidisha!='')|| ($how_contact ==0 && $how_contact!='')|| ($commLead_know_applicant ==0 && $commLead_know_applicant!='')|| ($eligible==0 && $eligible!='') || ($commLead_mediate ==0 && $commLead_mediate!='') ||( $recomnd_addr_locatable==0 && $recomnd_addr_locatable!='') || ($commLead_recomnd_sign==0 && $commLead_recomnd_sign!='')){
						if(empty($verifier_name)){
							$form->setError("verifier_name_intrvw", 'please enter name');
						}
						if($form->num_errors > 0){ 
							return 0;
						}else{
							$this->declinedBorrower($borrowerid, $additional_comments);
						}
						$_SESSION['Declined']=1;
						$res_decline= $database->add_verify_borrower($this->userid,$complete_later, $identity_verify, $identity_verify_other, $participate_verification, $participate_verification_other, $app_know_zidisha, $app_know_zidisha_other, $how_contact, $how_contact_other, $recomnd_addr_locatable, $recomnd_addr_locatable_other, $commLead_know_applicant, $commLead_know_applicant_other , $commLead_recomnd_sign, $commLead_recomnd_sign_other, $commLead_mediate, $commLead_mediate_other, $eligible, $additional_comments, $borrowerid, $verifier_name);
						if($res_decline)
						return 0;
				}
				$result= $validation->verify_borrower($identity_verify, $identity_verify_other, $participate_verification, $participate_verification_other, $app_know_zidisha, $app_know_zidisha_other, $how_contact, $how_contact_other, $recomnd_addr_locatable, $recomnd_addr_locatable_other, $commLead_know_applicant, $commLead_know_applicant_other , $commLead_recomnd_sign, $commLead_recomnd_sign_other, $commLead_mediate, $commLead_mediate_other, $eligible, $verifier_name);
				if($form->num_errors > 0){ 
					return 0;
				}else {
						$res= $database->add_verify_borrower($this->userid,$complete_later, $identity_verify, $identity_verify_other, $participate_verification, $participate_verification_other, $app_know_zidisha, $app_know_zidisha_other, $how_contact, $how_contact_other, $recomnd_addr_locatable, $recomnd_addr_locatable_other, $commLead_know_applicant, $commLead_know_applicant_other , $commLead_recomnd_sign, $commLead_recomnd_sign_other, $commLead_mediate, $commLead_mediate_other, $eligible, $additional_comments, $borrowerid, $verifier_name); 
						if($res){
							$From=EMAIL_FROM_ADDR;
							$templet="editables/email/simplemail.html";
							$bdetail=$database->getEmailB($borrowerid);
							require("editables/mailtext.php");
							$language= $database->getPreferredLang($borrowerid);
							$path=  getEditablePath('mailtext.php',$language);
							require ("editables/".$path);
							$Subject=$lang['mailtext']['ActivateBorrower-subject'];
							$replyTo = SERVICE_EMAIL_ADDR;
							$To=$params['name'] = $bdetail['name'];
							$prurl = getUserProfileUrl($this->userid);
							$params['link'] = SITE_URL.$prurl ;
							$message = $this->formMessage($lang['mailtext']['ActivateBorrower-msg'], $params);
							if($submit_type !=$lang['brwrlist-i']['comlete_later']){ 
								$reply=$this->mailSending($From, $To, $bdetail['email'], $Subject, $message,$templet, $replyTo);
								return $res;
							}
						}else{
							$path=  getEditablePath('error.php');
							include_once("editables/".$path);
							$form->setError("dberror", $lang['error']['error_website']);
							return 0;
						}
					}
				}
		}
		function co_org_note($id, $note){
			global $database;
			$res= $database->co_org_note($id, $note);
			return $res;
		}

	function verify_borrower_ByAdmin($is_eligible_ByAdmin, $eligible_no_reason, $borrowerid, $submit_bverification_ByPartner, $verifier_name){
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if($is_eligible_ByAdmin==''){
			$form->setError("is_eligible_ByAdmin", $lang['error']['verify_borrower']);
		}else if($is_eligible_ByAdmin=='0' && (empty($eligible_no_reason) || strlen(trim($eligible_no_reason))<1)){
			$form->setError("eligible_no_reason", $lang['error']['decline_reason']);
		}
		if(empty($verifier_name)){
			$form->setError("verifier_name", 'please enter name');
		}
		if($form->num_errors > 0){ 
			return 0;
		}
		if($is_eligible_ByAdmin=='0'){
			$this->declinedBorrower($borrowerid,$eligible_no_reason);
			$_SESSION['Declined']=true;
			return 0;
		}else if($is_eligible_ByAdmin = '1'){
			$res= $database->verify_borrower_ByAdmin($this->userid, $is_eligible_ByAdmin, $borrowerid, $verifier_name);
			if($res){
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				$bdetail=$database->getEmailB($borrowerid);
				require("editables/mailtext.php");
				$language= $database->getPreferredLang($borrowerid);
				$path=  getEditablePath('mailtext.php',$language);
				require ("editables/".$path);
				$Subject=$lang['mailtext']['ActivateBorrower-subject'];
				$replyTo = SERVICE_EMAIL_ADDR;
				$To=$params['name'] = $bdetail['name'];
				$prurl = getUserProfileUrl($this->userid);
				$params['link'] = SITE_URL.$prurl ;
				$message = $this->formMessage($lang['mailtext']['ActivateBorrower-msg'], $params);
				$reply=$this->mailSending($From, $To, $bdetail['email'], $Subject, $message,$templet, $replyTo);
			}
			return $res;
		}
	}

	function facebook_info($date3, $date4){		
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($date3)){
			$form->setError("fromdate", $lang['error']['empty_fromdate']);
		}
		if(empty($date4)){
			$form->setError("todate", $lang['error']['empty_todate']);
		}
		if($form->num_errors > 0)
			return 0;
		$result2=datecompare($date3,$date4);
		if(!$result2){
			$form->setError("todate", $lang['error']['lower_fromdate']);
		}
		if($form->num_errors > 0)
			return 0;
		else
		{
			$_SESSION['date1']=$date3;
			$_SESSION['date2']=$date4;
			return 1;
		}
	}
/* -------------------Admin Section End----------------------- */


	/* -------------------Borrower Section Start----------------------- */

function register_b($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile,$reffered_by,$income, $about, $bizdesc, $photo, $share_update,$user_guess, &$id, $bnationid, $language, $referrer, $community_name_no, $documents, $submit_type,  $repaidPast, $debtFree, $onbehalf, $behalf_name, $behalf_number, $behalf_email, $behalf_town, $bfamilycont1,$bfamilycont2,$bfamilycont3, $bneighcont1,$bneighcont2,$bneighcont3,$home_no,$rec_form_offcr_name, $rec_form_offcr_num, $refer_member, $volunteer_mentor, $cntct_type, $fb_data, $endorser_name, $endorser_email)
	{	
		global $database, $form, $mailer, $validation;
			
		$completeLater = 0;
		traceCalls(__METHOD__, __LINE__);
		require("editables/register.php");
		$path=  getEditablePath('register.php');
		require ("editables/".$path);
		$fb_data= unserialize(stripslashes(urldecode($fb_data)));
		$web_acc=0;
		Logger_Array("FB LOG - on session 1",'fb_data', serialize($fb_data).$uname);
		if($cntct_type!='1' || $_SESSION['FB_Error']!=false){
//			Logger_Array("FB LOG - on session 2",'fb_data', serialize($fb_data).$uname);
			Logger_Array("cnt",$cntct_type, serialize($_SESSION['FB_Error']));
			$fb_data= '';
			unset($_SESSION['FB_Error']);
		}
		
		if($submit_type == trim($lang['register']['RegisterComplete'])) { 
//			Logger_Array("FB LOG - on session 3",'fb_data', serialize($fb_data).$uname);
			$validation->validateBorrowerReg($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile,$reffered_by, $income, $about, $bizdesc, $photo,  $user_guess, $bnationid, $referrer, $community_name_no, $documents,  $repaidPast, $debtFree, $share_update, $onbehalf, $behalf_name, $behalf_number, $behalf_email, $behalf_town, $bfamilycont1,$bfamilycont2,$bfamilycont3, $bneighcont1,$bneighcont2,$bneighcont3,$home_no, $rec_form_offcr_name, $rec_form_offcr_num, $cntct_type, $fb_data, $endorser_name, $endorser_email);
			}else {
			$completeLater = 1;
			$validation->checkUsername($uname,'busername');
			$validation->checkPassword($pass1,$pass2, "bpass1");
			$validation->checkEmailForBorrower($email, "bemail");
			$validation->checkNationId($bnationid, "bnationid", $country);
		}
		if($form->num_errors>0){
			return 1;
		}
		else
		{	
			
			$retVal = $database->addBorrower($uname,$namea,$nameb, $pass1, $post, $city,$country,$email, $mobile,$reffered_by, $income, $about, $bizdesc,$bnationid, $language, $community_name_no, $documents,  $repaidPast, $debtFree,$share_update, $completeLater, $onbehalf, $behalf_name, $behalf_number, $behalf_email, $behalf_town, $bfamilycont1,$bfamilycont2,$bfamilycont3, $bneighcont1,$bneighcont2,$bneighcont3,$home_no, $rec_form_offcr_name, $rec_form_offcr_num, $refer_member, $volunteer_mentor, $fb_data, $endorser_name, $endorser_email);
			
			$id = $database->getUserId($uname);
					
			if(!empty($id) && $submit_type == $lang['register']['RegisterComplete'])
			{
				if($cntct_type!='1'){
					$From=EMAIL_FROM_ADDR;
					require("editables/mailtext.php");
					$templet="editables/email/simplemail.html";
					$path=  getEditablePath('mailtext.php',$language);
					require ("editables/".$path);

					$Subject=$lang['mailtext']['BorrowerReg-subject'];
					$To=$params['name'] = $namea." ".$nameb ;
					$replyTo = SERVICE_EMAIL_ADDR;
					$params['username'] = $uname;
					$params['password'] = $pass1;
					$message = $this->formMessage($lang['mailtext']['BorrowerReg-msg'], $params);
					$this->mailSending($From, $To, $email, $Subject, $message,$templet, $replyTo);
				}

				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				$path=  getEditablePath('mailtext.php',$language);
				require ("editables/".$path);

				$Subject=$lang['mailtext']['email_verification_sub'];
				$To=$params['name'] = $namea." ".$nameb ;
				$activate_key = $database->getActivationKey($id);
				$link = SITE_URL."index.php?p=51&ident=$id&activate=$activate_key";
				$params['verify_link'] = $link;
				$message = $this->formMessage($lang['mailtext']['email_verification_body'], $params);
				$reply = $this->mailSending($From, $To, $email, $Subject, $message,$templet);
				if($reply)
					Logger_Array("Email Verification mail sent to borrower ",'email, To', $email, $To);
				$_SESSION['bEmailVerifiedPending']=true;
				
				if(!empty($referrer))
				{
					$userinfo = $database->getUserInfo($referrer);
					$referDetail=$database->getReferrals($userinfo['country'], false);
					if(!empty($referDetail))
					{
						$comm=$database->addCommission($id, $userinfo['userid'], $referDetail['id']);
						if($comm)
						{
							$params=array();
							$params['applicant_name'] = $namea." ".$nameb;
							$To=$params['bname'] = $userinfo['name'];
							$params['amount'] = $referDetail['ref_commission'];
							$params['referral_link'] = SITE_URL."index.php?p=50";
							$Subject = $this->formMessage($lang['mailtext']['borrower_referral_sub'], $params);
							if($referDetail['percent_repay']==0)
							{
								$message = $this->formMessage($lang['mailtext']['borrower_referral_body_1'], $params);
							}
							else
							{
								$params['repaid_percent'] = $referDetail['percent_repay'];
								$message = $this->formMessage($lang['mailtext']['borrower_referral_body_2'], $params);
							}
							$this->mailSending($From, $To, $userinfo['email'], $Subject, $message,$templet);
						}
					}
				}
				if($cntct_type=='1'){ 
					for($i=0; $i<10; $i++){ 
						if(!empty($endorser_name[$i]) && !empty($endorser_email[$i])){ 
							$e_details= $database->getEndorserForEmail($id, $endorser_name[$i], $endorser_email[$i]);
							$validation_code= $e_details['validation_code'];
							$From=$email;
							$reg_link = SITE_URL."index.php?p=93&vd=$validation_code";
							$params['reg_link']= $reg_link;
							require("editables/mailtext.php");
							$templet="editables/email/simplemail.html";
							$path=  getEditablePath('mailtext.php',$language);
							require ("editables/".$path);
							$e_email= $endorser_email[$i];
							$Subject=$namea." ".$nameb." ".$lang['mailtext']['borrowerEndorser-subject'];
							$To=$params['name'] = $endorser_name[$i] ;
							$params['bname']= $namea." ".$nameb;
							$replyTo = SERVICE_EMAIL_ADDR;
							$message = $this->formMessage($lang['mailtext']['BorrowerEndorser-msg'], $params);
							$reply= $this->mailSending($From, $To, $e_email, $Subject, $message,$templet, $replyTo); 
							$database->updateEndorserAfterEmail($id, $To, $e_email, $message);
						}
					}
				}
			}			
			if(!empty($fb_data['user_profile']['id'])){
				$fb_name= $fb_data['user_profile']['name'];
				if(isset($_SESSION['FB_Detail']))
					$web_acc=1;
				
				
				/*if(!empty($fb_data['user_profile']['email']) && !empty($email) && !empty($fb_name) && !empty($namea) && !empty($nameb)){
					if($fb_data['user_profile']['email']!=$email && stripos($fb_name, $namea)==false && stripos($fb_name, $nameb)==false)
						$web_acc=0;
				}*/

			//Mohit change 30 Sept 
			// Facebook and Zidisha Account email, name commented as per the julia email
			/*
			$checkName = false;
			if(!empty($fb_data['user_profile']['email']) && !empty($email)){
					if (strcasecmp($fb_data['user_profile']['email'], $email) != 0){
						$checkName = true;
					}
					else{
						$checkName = false;
					}
				}else{
					$checkName = true;
				}
				if($checkName){
					$fname=true;
					$lname=true;
					
					if(!empty($fb_name) && !empty($namea) && !empty($nameb)){
					
						$fname=stripos($fb_name, $namea);
						$lname=stripos($fb_name, $nameb);
						
					}

					if($fname===false && $lname===false){
						$web_acc=0;
					}
				   }
				*/
			    $database->saveFacebookInfo($fb_data['user_profile']['id'], serialize($fb_data), $web_acc,$id, $email);
			}
			$database->IsUserinvited($id); 
			$this->updateBorrowerDocument($id, $documents);// check if the registered user invited by any other existing user and save it in invitees table for future tracking.
			return $retVal ;
		}
	}
	function editprofile_b($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile,$reffered_by, $income, $about, $bizdesc, $photo, $id, $bnationid, $language, $community_name_no, $documents, $ableToComp, $repaidPast, $debtFree, $share_update, $onbehalf, $behalf_name, $behalf_number, $behalf_email, $behalf_town, $borrower_behalf_id, $submit_type, $uploadedDocs, $bfamilycont1,$bfamilycont2,$bfamilycont3, $bneighcont1, $bneighcont2, $bneighcont3,$home_no, $rec_form_offcr_name, $rec_form_offcr_num, $refer_member, $volunteer_mentor, $cntct_type, $fb_data, $endorser_name, $endorser_email, $endorser_id)
	{
		global $database, $form, $mailer,$validation ;
		traceCalls(__METHOD__, __LINE__);
		$completeLater = 0;
		require("editables/editprofile.php");
		$path=  getEditablePath('editprofile.php');
		require ("editables/".$path);
		$fb_data= unserialize(stripslashes(urldecode($fb_data)));
		Logger_Array("FB LOG - on session 1",'fb_data', serialize($fb_data).$uname);
		if($cntct_type!='1' || $_SESSION['FB_Error']!=false){
//			Logger_Array("FB LOG - on session 2",'fb_data', serialize($fb_data).$uname);
			Logger_Array("cnt",$cntct_type, serialize($_SESSION['FB_Error']));
			$fb_data= '';
			unset($_SESSION['FB_Error']);
		}
		
		if($submit_type != $lang['editprofile']['completelater']) {
//			Logger_Array("FB LOG - on session 3",'fb_data', serialize($fb_data).$uname);
			$validation->validateBorrowerEdit($uname, $namea, $nameb, $pass1, $pass2, $post, $city, $country, $email, $mobile,$reffered_by, $income, $about, $bizdesc, $photo, $bnationid, $community_name_no, $documents, $repaidPast, $debtFree, $share_update,$onbehalf, $behalf_name, $behalf_number, $behalf_email, $behalf_town, $submit_type, $uploadedDocs, $bfamilycont1,$bfamilycont2,$bfamilycont3, $bneighcont1, $bneighcont2, $bneighcont3,$home_no, $rec_form_offcr_name, $rec_form_offcr_num, $cntct_type, $fb_data, $endorser_name, $endorser_email);
		} else {
			$completeLater = 1;
			if(!empty($pass1))
			$validation->checkPassword($pass1,$pass2, "bpass1");
			$validation->checkEmailForBorrower($email, "bemail", $this->userid);
			$iscompleteLater = $database->getiscompleteLater($this->userid);
			if($iscompleteLater) {
				$validation->checkNationId($bnationid, "bnationid", $country, $this->userid);
			}
		}
		if($form->num_errors>0){ 
			return 1;
		}
		else
		{	
			$rtn=$database->updateBorrower($uname,$namea,$nameb, $pass1, $post, $city,$country,$email, $mobile,$reffered_by, $income, $about, $bizdesc,$id,$bnationid, $language, $community_name_no, $repaidPast, $debtFree,$share_update,$onbehalf, $behalf_name, $behalf_number, $behalf_email, $behalf_town, $borrower_behalf_id, $completeLater, $bfamilycont1,$bfamilycont2,$bfamilycont3, $bneighcont1, $bneighcont2, $bneighcont3, $home_no, $rec_form_offcr_name, $rec_form_offcr_num, $refer_member, $volunteer_mentor, $fb_data, $endorser_name, $endorser_email, $endorser_id);
			if($rtn == 0 && $submit_type == $lang['editprofile']['submitFinal']) {
				if($cntct_type!='1'){
					$From=EMAIL_FROM_ADDR;
					require("editables/mailtext.php");
					$templet="editables/email/simplemail.html";
					$path=  getEditablePath('mailtext.php',$language);
					require ("editables/".$path);
					$Subject=$lang['mailtext']['BorrowerReg-subject'];
					$replyTo = SERVICE_EMAIL_ADDR;
					$To=$params['name'] = $namea." ".$nameb ;
					$message = $this->formMessage($lang['mailtext']['BorrowerReg-msg'], $params);
					$this->mailSending($From, $To, $email, $Subject, $message,$templet, $replyTo);
				}
				$Subject=$lang['mailtext']['email_verification_sub'];
				$activate_key = $database->getActivationKey($id);
				$link = SITE_URL."index.php?p=51&ident=$id&activate=$activate_key";
				$params['verify_link'] = $link;
				$message = $this->formMessage($lang['mailtext']['email_verification_body'], $params);
				$reply = $this->mailSending($From, $To, $email, $Subject, $message,$templet);
				if($reply)
					Logger_Array("Email Verification mail sent to borrower ",'email, To', $email, $To);

				if($cntct_type=='1'){ 
					for($i=0; $i<10; $i++){ 
						if(!empty($endorser_name[$i]) && !empty($endorser_email[$i])){ 
							$e_details= $database->getEndorserForEmail($id, $endorser_name[$i], $endorser_email[$i]);
							if(empty($e_details['message'])){
								$validation_code= $e_details['validation_code'];
								$From=$email;
								$reg_link = SITE_URL."index.php?p=93&vd=$validation_code";
								$params['reg_link']= $reg_link;
								require("editables/mailtext.php");
								$templet="editables/email/simplemail.html";
								$path=  getEditablePath('mailtext.php',$language);
								require ("editables/".$path);
								$e_email= $endorser_email[$i];
								$Subject=$namea." ".$nameb." ".$lang['mailtext']['borrowerEndorser-subject'];
								$To=$params['name'] = $endorser_name[$i] ;
								$params['bname']= $namea." ".$nameb;
								$replyTo = SERVICE_EMAIL_ADDR;
								$message = $this->formMessage($lang['mailtext']['BorrowerEndorser-msg'], $params);
								$reply= $this->mailSending($From, $To, $e_email, $Subject, $message,$templet, $replyTo); 
								$database->updateEndorserAfterEmail($id, $To, $e_email, $message);
							}
						}
					}
				}
			}
				$this->updateBorrowerDocument($id, $documents);
				return $rtn;
		}
	}
	function updateBorrowerDocument($id, $documents)
	{
		global $database;
		$front_national_id='';
		$back_national_id='';
		$address_proof='';
		$legal_declaration='';
		if(is_uploaded_file($documents['front_national_id']['tmp_name']) || !empty($documents['front_national_id']['tmp_name']))
		{	
			$path_info = pathinfo($documents['front_national_id']['name']);
			$ext=$path_info['extension'];
			$front_national_id= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			$ismoved = move_uploaded_file($documents['front_national_id']['tmp_name'],DOCUMENT_DIR.$front_national_id);
			if(!$ismoved) {
				copy($documents['front_national_id']['tmp_name'],DOCUMENT_DIR.$front_national_id);
			}
			$database->updateBorrowerDocument($id, 'frontNationalId', $front_national_id);
		}
		if(is_uploaded_file($documents['back_national_id']['tmp_name']) || !empty($documents['back_national_id']['tmp_name']))
		{
			$path_info = pathinfo($documents['back_national_id']['name']);
			$ext=$path_info['extension'];
			$back_national_id= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			$ismoved1=move_uploaded_file($documents['back_national_id']['tmp_name'],DOCUMENT_DIR.$back_national_id);
			if(!$ismoved1) {
				copy($documents['back_national_id']['tmp_name'],DOCUMENT_DIR.$back_national_id);
			}
			$database->updateBorrowerDocument($id, 'backNationalId', $back_national_id);
		}
		if(is_uploaded_file($documents['address_proof']['tmp_name']) || !empty($documents['address_proof']['tmp_name']))
		{
			$path_info = pathinfo($documents['address_proof']['name']);
			$ext=$path_info['extension'];
			$address_proof= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			$ismoved2 = move_uploaded_file($documents['address_proof']['tmp_name'],DOCUMENT_DIR.$address_proof);
			if(!$ismoved2) {
				copy($documents['address_proof']['tmp_name'],DOCUMENT_DIR.$address_proof);
			}
			$database->updateBorrowerDocument($id, 'addressProof', $address_proof);
		}
		if(is_uploaded_file($documents['legal_declaration']['tmp_name']) || !empty($documents['legal_declaration']['tmp_name']))
		{
			$path_info = pathinfo($documents['legal_declaration']['name']);
			$ext=$path_info['extension'];
			$legal_declaration= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			$ismoved3 = move_uploaded_file($documents['legal_declaration']['tmp_name'],DOCUMENT_DIR.$legal_declaration);
			if(!$ismoved3) {
				copy($documents['legal_declaration']['tmp_name'],DOCUMENT_DIR.$legal_declaration);
			}
			$database->updateBorrowerDocument($id, 'legalDeclaration', $legal_declaration);
		}
		if(is_uploaded_file($documents['legal_declaration2']['tmp_name']) || !empty($documents['legal_declaration2']['tmp_name']))
		{
			$path_info = pathinfo($documents['legal_declaration2']['name']);
			$ext=$path_info['extension'];
			$legal_declaration2= $id."-".md5(mt_rand(0, 32).time()).".".$ext;
			$ismoved4 = move_uploaded_file($documents['legal_declaration2']['tmp_name'],DOCUMENT_DIR.$legal_declaration2);
			if(!$ismoved4) {
				copy($documents['legal_declaration2']['tmp_name'],DOCUMENT_DIR.$legal_declaration2);
			}
			$database->updateBorrowerDocument($id, 'legal_declaration2', $legal_declaration2);
		}
	}
	function loanApplication($amount, $interest, $installments, $gperiod, $loanuse,$tnc,$installment_day)
	{	
		global $database, $form, $lang;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$currency=$database->getUserCurrency($this->userid);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['invalid_loanamt']);
		} else if(!is_numeric($amount)){
			$form->setError("amount", $lang['error']['invalid_loanamt']);
		} else {
			$rate=$database->getCurrentRate($this->userid);
			if($amount<AMTTHRESHOLD_LIMIT){
				$maxBorrowerAmt= ceil($database->getAdminSetting('maxBorrowerAmt', 0));
			}else{
				$maxBorrowerAmt= ceil($database->getAdminSetting('maxBorrowerAmt', 1));
			}/* It is in native currency */
			$minBorrowerAmt= ceil(convertToNative($database->getAdminSetting('minBorrowerAmt'), $rate));
			if($minBorrowerAmt>$amount){
				$form->setError("amount", $lang['error']['greater_loanamt']." ".$currency." ".$minBorrowerAmt);
			}
			if($maxBorrowerAmt<$amount){
				$form->setError("amount", $lang['error']['lower_loanamt']." ".$currency." ".$maxBorrowerAmt);
			}
			if($installments >=$amount){
				$form->setError("installment_amt", $lang['error']['greater_instllAmt']);
			}
		}
		if(empty($installment_day)){
			$form->setError("installment_day", $lang['error']['invalid_day']);
		}
		if(empty($interest)){
			$form->setError("interest", $lang['error']['invalid_interest']);
		} else if(!is_numeric($interest)){
			$form->setError("interest", $lang['error']['invalid_interest']);
		} else {
			$fee = $database->getAdminSetting('fee');
			$maxLoanAppInterest= $database->getAdminSetting('maxLoanAppInterest');
			if($interest < $fee) {
				$form->setError("interest", $lang['error']['greater_interest']." ". $fee."%");
			} else if($interest > ($fee+$maxLoanAppInterest)) {
				$form->setError("interest", $lang['error']['lower_interest']." ". ($fee+$maxLoanAppInterest)."%");
			}
		}
		if(empty($installments)){
			$form->setError("installment_amt", $lang['error']['empty_installment']);
		}
		else if(!is_numeric($installments)){
			$form->setError("installment_amt", $lang['error']['invalid_installment']);
		} else {
			$total_months=$this->getTotalMonthByInstallments($amount, $installments, $interest, $gperiod);
			$maxRepayPeriod= $database->getAdminSetting('maxPeriodValue');
			if($maxRepayPeriod < $total_months || $total_months <=0) {
				$minIns=$this->getMinInstallment($amount, $maxRepayPeriod, $interest, $gperiod);
				$form->setError("installment_amt", $lang['error']['min_ins_amt']." ".$currency." ".$minIns);
			}
		}
		if($gperiod<1 || !is_numeric($gperiod)){
			$maxGraceMonth=$database->getAdminSetting('maxLoanAppGracePeriod');
			$form->setError("gperiod", $lang['error']['invalid_gracetime']." ".$maxGraceMonth." ".$lang['error']['months']);
		}
		else
		{
			$maxGP=$database->getAdminSetting('maxLoanAppGracePeriod');
			if($gperiod >$maxGP){
				$form->setError("gperiod", $lang['error']['max_gracetime']." ".$maxGP." ".$lang['error']['months']);
			}
			//grace period must be lower than total period
			else if($gperiod >=$total_months && $total_months >0){
				$form->setError("gperiod", $lang['error']['lower_gracetime']." ".trim($total_months));
			}
		}
		if(empty($loanuse)){
			$form->setError("loanuse", $lang['error']['empty_loanuse']);
		}else if(strlen($loanuse) <300) {
			$form->setError('loanuse', $lang['error']['min_length_comment']);
		}
		if(empty($tnc)){
			$form->setError("agree", $lang['error']['empty_tnc']);
		}
		if($form->num_errors > 0){
			return 0;
		}
		return 1;
	}
	function editLoanApplication($loanid, $amount, $interest, $loanuse, $inst_amount, $inst_day, $gperiod, $validate=0)
	{
		global $database, $form;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		$userid=$this->userid;
		$currency=$database->getUserCurrency($this->userid);
		$loandata=$database->getLastloan($userid);
		$bidsIntr=$database->getMinMaxBidIntr($loanid);
		$totBidsAmt=$database->getTotalBidAmount($loanid);
		$rate=$database->getCurrentRate($userid);
		$OldRate=$database->getExRateById($loandata['applydate'], $loandata['borrowerid']);
		$totBidsAmtNative = convertToNative($totBidsAmt, $OldRate);
		$interest = str_replace('%', '', $interest);
		if(empty($amount)){
			$form->setError("amount", $lang['error']['invalid_loanamt']);
		}
		else
		{
			$rate=$database->getCurrentRate($userid);
			$maxBorrowerAmt= ceil($database->getAdminSetting('maxBorrowerAmt')); /* It is in native currency */
			$minBorrowerAmt= ceil(convertToNative($database->getAdminSetting('minBorrowerAmt'), $rate));
			if($minBorrowerAmt>$amount){
				$form->setError("amount", $lang['error']['greater_loanamt']." ".$currency." ".$minBorrowerAmt);
			}
			if($loandata['Amount'] < $amount)
			{
				if($maxBorrowerAmt < $amount)
				{
					if($loandata['Amount'] > $maxBorrowerAmt){
						$form->setError("amount", $lang['error']['lower_loanamt']." ".$currency." ".$loandata['Amount']);
					}
					else{
						$form->setError("amount", $lang['error']['lower_loanamt']." ".$currency." ".$maxBorrowerAmt);
					}
				}
			}
			elseif($loandata['Amount'] > $amount)
			{
				$AmountUsd=convertToDollar($amount, $OldRate);
				if($loandata['reqdamt'] <= $totBidsAmt){
					$form->setError("amount", $lang['error']['greater_loanamt']." ".$currency." ".$loandata['Amount']);
				}
				else if($AmountUsd < $totBidsAmt){
					$form->setError("amount", $lang['error']['greater_loanamt']." ".$currency." ".$totBidsAmtNative);
				}
			}
		}
		if(empty($interest)){
			$form->setError("interest", $lang['error']['invalid_interest']);
		}
		else
		{
			$fee = $database->getAdminSetting('fee');
			if($interest < $fee)
			{
				if(($bidsIntr['max'] + $fee) > $fee)
					$form->setError("interest", $lang['error']['greater_interest_lender']." ". ($bidsIntr['max'] + $fee));
				else
					$form->setError("interest", $lang['error']['greater_interest']." ".$fee."%");
			}
			else if($interest < $loandata['interest'])
			{
				if(!empty($bidsIntr['max']) && ($bidsIntr['max'] + $fee) >$interest)
					$form->setError("interest", $lang['error']['greater_interest_lender']." ". ($bidsIntr['max'] + $fee));
			}
		}
		if(empty($loanuse)){
			$form->setError("loanuse", $lang['error']['empty_loanuse']);
		}else if(strlen($loanuse) < 300) {
			$form->setError('loanuse', $lang['error']['min_length_comment']);
		}
		if(empty($inst_day) || $inst_day>31 || $inst_day < 1){
			$form->setError("installment_day", $lang['error']['invalid_day']);
		}
		$maxGP=$database->getAdminSetting('maxLoanAppGracePeriod');
		if($gperiod > $maxGP) {
			$form->setError('gperiod', $lang['error']['max_gracetime']." ".$maxGP." ".$lang['error']['months']);
		}
		$total_months=$this->getTotalMonthByInstallments($amount, $inst_amount, $interest, $gperiod);
		$maxRepayPeriod= $database->getAdminSetting('maxPeriodValue');
			if($maxRepayPeriod < $total_months || $total_months <=0) {
				$minIns=$this->getMinInstallment($amount, $maxRepayPeriod, $interest, $gperiod);
				$form->setError("installment_amt", $lang['error']['min_ins_amt']." ".$currency." ".$minIns);
		}
		if($form->num_errors > 0){
			return 0;
		}
		else if($validate == 1) {
			return 1;
		}else {
			$ret=$database->updateLoanApp($userid, $loanid, $amount, $interest, $loanuse, $inst_day, $gperiod);
			return $ret;
		}
	}
	function confirmLoanApp($amount, $interest, $period, $gperiod, $loanuse,$tnc,$loan_installmentDate)
	{
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$loanid= $database->loanApplication($this->userid, $amount, $interest, $period, $gperiod, $loanuse,$tnc,$loan_installmentDate);
		if($loanid)
		{
			unset($_SESSION['la']);
			unset($_SESSION['loanapp']);
			$this->SendLoanConfirmMailToBorrower($this->userid, $loanid);
			$loanCount= $database->getLoanCount($this->userid);
			$userid=$this->userid;
			if($loanCount)
			{
				$oldLoanid=$database->getLastRepaidloanId($userid);
				$bname= $database->getNameById($userid);
				$lenders= $database->getLendersEmailForLoanApp($oldLoanid);
				$repay_date= $database->getRepaidDate($userid, $oldLoanid);
				foreach($lenders as $lender)
				{
					$this->sendNewLoanAppMailToLender($loanid, $lender['Email'], $lender['FirstName'].' '.$lender['LastName'], $userid, $bname, $repay_date);
				}
			}
			return 1;
		}
		else
		{
			return 0;
		}
	}
	function getStatusBar($ud,$ld, $promote=0)
	{
		global $database;
		$state=$database->getUserLoanStatus($ud,$ld); 
		if(!empty($state))
		{
			$woff=0;
			$stage=$state['active'];
			$reqAmount=$state['reqdamt'];
			$Amount=$state['Amount'];
			$text="<div class='progress'>";
			if(($stage == LOAN_OPEN) || ($stage == LOAN_FUNDED))
			{
				$p=($database->getTotalBid($ud, $ld)/($reqAmount))*100 ; // divided by reqAmount as it is in doller
				$p_org=$p;
				$p1=number_format($p, 0, ".", ",")."%";
				if($p>=100)
				{
					
					$p='100%';
					$p1='100%';
					$msg='Raised';
					$imgClass= 'fundingLoanBar';
					$bgcolor='#CCCCCC';
				}
				else
				{
					$p_rounded = number_format($p);
					if($p < 100 && $p_rounded>=100) {
						$p='99';
						$p1=number_format($p, 0, ".", ",")."%";
					}
					
					$p=number_format($p).'%';
					$msg=' Raised';
					$imgClass= 'fundingLoanBar';
					$bgcolor='#CCCCCC';
				}

			}
			else if(($stage == LOAN_ACTIVE) || ($stage == LOAN_REPAID) || ($stage == LOAN_DEFAULTED))
			{	
				$res=$database->getTotalPayment($ud, $ld);
				if($res['amttotal'] > 0) {
					$p= $res['paidtotal']/$res['amttotal']*100;
				} else {
					$p=100;
				}
				$p_org=$p;
				$p_rounded = number_format($p);
				if($p < 100 && $p_rounded>=100) {
					$p='99';
					$p1=number_format($p, 0, ".", ",")."%";
				}
				$p1=number_format($p, 0, ".", ",")."%";
				if($p>=100)
				{
					$p='100%';
					$p1='100%';
					$msg=' Repaid';
					$imgClass= 'repaidLoanBar';
					$bgcolor='#CCCCCC';
				}
				else
				{
					$p=number_format($p).'%';
					if($stage == LOAN_DEFAULTED)
						$woff=(100-number_format($p_org)).'%';
					$msg=' Repaid';
					$imgClass= 'repaidLoanBar';
					$bgcolor='#CCCCCC';
				}
			}
			else
			{
				$p_org=100;
				$p='100%';
				$p1='';
				if(($stage == LOAN_DEFAULTED))
					$msg='Written Off';
				else if($stage == LOAN_CANCELED)
					$msg='Cancelled';
				else if($stage == LOAN_EXPIRED)
					$msg='Expired';
				$imgClass= 'expiredLoanBar';
				$bgcolor='#CCCCCC';
			}
			if($promote==1)
			{
				$text="<table style='width:100%'>";
				if(($stage == LOAN_OPEN) || ($stage == LOAN_FUNDED))
					$text=$text."<tr><td align='left' height='4' bgcolor='".$bgcolor."' ><table width='".$p."'><tr><td bgcolor='#009900'></td></tr></table></td></tr>";
				else if(($stage == LOAN_ACTIVE) || ($stage == LOAN_REPAID))
					$text=$text."<tr><td align='left' height='4' bgcolor='".$bgcolor."' ><table width='".$p."'><tr><td bgcolor='#999999'></td></tr></table></td></tr>";
				else
					$text=$text."<tr><td align='left' height='4' bgcolor='".$bgcolor."' ><table width='".$p."'><tr><td bgcolor='#FE2828'></td></tr></table></td></tr>";
				if($stage == LOAN_DEFAULTED)
				{
					$text=$text."<tr><td align='center'>".$p1." ".$msg.",<br/>".$woff." Written Off</td></tr>";
				}
				else
				{
					$text=$text."<tr><td align='center'>".$p1." ".$msg." </td></tr>";
				}
				$text=$text."</table>";
				return $text;
			}
			else if($promote==2)
			{
				return $p1." ".$msg;
			}
			else if($promote==3)
			{
				return $p1;
			}
			else if($promote==4)
			{
				return $p1." ".$msg.",<br/>".$woff." Written Off";
			}
			else if($promote==5)
			{
				return round($p_org);
			}
			else
			{
				
				$text=$text."<div class='".$imgClass."' style='width:".$p."'></div></div>";
				
			}
			if($stage == LOAN_DEFAULTED)
			{

				$text=$text."<strong>".$p1." ".$msg.",<br/>".$woff." Written Off</strong>";
			}
			else
			{
				$text=$text."<strong>".$p1." ".$msg."</strong>";
			}

			return $text;
		}
		else
		{
			return '';
		}
	}
	function acceptBids($loanid, $acceptBid_note, $bid=0)
	{ 
		global $database, $form;
		traceCalls(__METHOD__, __LINE__);
		$userId = $this->userid;
		if($bid != 0)
			$userId = $bid;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(strlen(trim($acceptBid_note)) >300){
			$form->setError("acceptBid_note", $lang['error']['invalid_acceptBid_note']);
			return 0;
		}
		$bids=$database->getLoanBids($userId, $loanid);
		if(empty($bids))
			return 0;
		$lamount=$database->getOpenLoanAmount($userId, $loanid);
		$bidamount=0.00;
		$interest=0.00;
		$count=0;
		$temp=0.00;
		$temp1=0.00;
		$arr=array();
		$bidids=array();
		$rate = $database->getCurrentRate($userId);
		if(empty($rate))
			return 0;
		foreach($bids as $bid )
		{
			if(convertToNative($bidamount, $rate) < $lamount)
			{
				$bida=$bid['bidamount'];
				$bidint=$bid['bidint'];
				$bidid=$bid['bidid'];
				$lenderid=$bid['lenderid'];
				if(convertToNative(($bidamount+$bida) , $rate) <= $lamount)
				{
					$bidamount = $bidamount + $bida;
					$temp=$bidint*$bida;
					$interest=$interest+$temp;
					$bidids[$count]['bidid']=$bidid;
					$bidids[$count]['bidamount']=$bida;
					$bidids[$count]['bidrate']=$bidint;
					$count++;
				}
				else
				{
					$temp1=$lamount - convertToNative(($bidamount), $rate);
					$bida=convertToDollar($temp1, $rate);
					$bidamount=$bidamount+$bida;
					$temp=$bidint*$bida;
					$interest=$interest+$temp;
					$bidids[$count]['bidid']=$bidid;
					$bidids[$count]['bidamount']=$bida;
					$bidids[$count]['bidrate']=$bidint;
					break;
				}
			}
		}
		$arr['amt']=    $bidamount ;//is USD
		$arr['int']=    ($interest/$bidamount) ;
		$arr['bidids']= $bidids;
		$arr['loanid']= $loanid;
		$arr['acceptBid_note']= $acceptBid_note;
		return $arr;
	}
	function processBids($array, $bid=0)
	{
		//process a list to show which loans are approved back to proceess as a text or array
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$userId = $this->userid;
		if($bid != 0)
			$userId = $bid;
		$rr=$array['bidids'];
		$result=$database->processBids($rr);
		if($result==DB_OK)
		{	
			//all value set properly
			$state = LOAN_FUNDED;
			$borrowerid=$userId;
			$result1=$database->updateActiveLoan($borrowerid,$state);
			if($result1==0)
				return 0;
			$loanid=$array['loanid'];
			$rate=$array['int'];
			$result2=$database->updateLoanRate($loanid, $rate, $array['acceptBid_note']);
			if($result2==DB_OK)
			{
				foreach($rr as $row)
				{
					$deat=$database->getEmailBybidid($row['bidid']);
					$From=EMAIL_FROM_ADDR;
					$templet="editables/email/simplemail.html";
					require ("editables/mailtext.php");
					$Subject=$lang['mailtext']['AcceptBid-subject'];
					$To=$params['name'] = $deat['name'];
					$params['amount'] = number_format($deat['amount'],2,".",",");
					$params['intr'] = number_format($row['bidrate'],2,".",",");
					$params['bname'] = $database->getNameById($borrowerid);
					$loanprurl = getLoanprofileUrl($borrowerid, $loanid);
					$params['link'] = SITE_URL.$loanprurl ;
					$message = $this->formMessage($lang['mailtext']['AcceptBid-msg'], $params);
					$reply=$this->mailSending($From, $To, $deat['email'], $Subject, $message,$templet);
				}
				return 1;
			}
			else
			{
				return 0;
			}
		}
		else
		{
			return 0;
		}
	}
	function getSchedule($amount, $rate, $period, $grace, $loneAcceptDate, $webrate, $newperiod=0, $installment=0)
	{
		global $database;
		require("editables/loanstatn.php");
		$path=  getEditablePath('loanstatn.php');
		require("editables/".$path);
		traceCalls(__METHOD__, __LINE__);
		//Principal + (Number of years of repayment period * ((Principal * Aggregate annual Lender interest rate) + (Principal * % annual fee charged by website)))0
		if(!empty($newperiod)) {
			$newperiod+=$period;
		} else {
			$newperiod=$period;
		}
		$UserCurrency = $database->getUserCurrency($this->userid);
		$interest=(($newperiod)/12)*(($amount*($rate/100))); 
		$totalamt=$amount+$interest;
		$totalremaining = $totalamt;
		$pamount=$totalamt/($newperiod-$grace+1);
		$pamount=round($pamount, 4);
		if(!empty($installment)) {
			$pamount=$installment;
		}
		$text="<table class='zebra-striped'>
				<thead>
					<tr>
						<th>".$lang['loanstatn']['months_after_disb_date']."</th>
						<th>".$lang['loanstatn']['amount']." (".$UserCurrency.")</th>
						<th>".$lang['loanstatn']['balance']."</th>
					</tr>
				</thead>
				<tbody>";
		for($i=0; $i<=$period; $i++) {
			if($i >= $grace) {
				if($i==$period) {
					if($totalremaining < $pamount) {
						$pamount = $totalremaining;
					}
				}
				$ptot=number_format(round_local($pamount), 0, ".", ",");
				$totalremaining = $totalremaining - $pamount;
				if(abs($totalremaining) < 0.5) {
					$totalremaining = 0;
				}
				$text=$text."<tr>";
				$text=$text."<td>$i</td>";
				$text=$text."<td>$ptot</td>";
				$text=$text."<td>". number_format(round_local($totalremaining), 0, '.', ',')."</td>";
				$text=$text."</tr>";
			}
		}
		$ttotl1=number_format(round_local($totalamt) , 0, ".", ",");
		$text=$text."</tbody><tfoot><tr>
						<td><strong>".$lang['loanstatn']['total_repayment']."</strong></td>
						<td><strong>$ttotl1</strong></td>
						<td></td>
					</tr></tfoot></table>";
		return $text;
	}
	function processOldLoans()
	{
		global $database;
		// please do not uncomment following line now we do not expire loan automatically
		//$database->setExpireInLoan();
	}
	function getRescheduleDates($loanid, $installment_date=0)
	{
		global $database;
		$time= time();
		$lonedata=$database->getLoanDetails($loanid); 
		$org_repay_period= ($lonedata['original_period']==0)? $lonedata['period']:$lonedata['original_period'];
		$lastDuedate=$database->getLastDueDate($loanid);
		$nextDuedate= $database->getNextDueDate($loanid);
		$nextDuedateOrg=$nextDuedate;
		$gracePeriod_limit=$database->getAdminSetting('maxGraceperiodValue');
		if(empty($nextDuedate))
		{
			$i=1;
			while(1)
			{
				$date=strtotime('+ '.$i.' month ' , $lastDuedate);
				if($date > $time ){
					$nextDuedate=$date;
					break;
				}
				$i++;
			}

		}
		if($installment_date !=0)
		{
			if(empty($nextDuedateOrg))
			{
				$remainPeriod=-round(($installment_date- $lastDuedate)/(30*24*60*60));
			}
			else
			{
				if($installment_date >$lastDuedate)
					$remainPeriod=-round(($installment_date- $lastDuedate)/(30*24*60*60));
				else
					$remainPeriod=round(($lastDuedate- $installment_date)/(30*24*60*60));
			}
		}
		$max_repay_period= $database->getAdminSetting('maxRepayPeriod');
		$maxDuedate=strtotime('+ '.($max_repay_period).' month ' , $nextDuedate);
		$rescheduleDates=array();
		$nextDuedateOrg=$nextDuedate;
		for($i=1; $i<=$gracePeriod_limit; $i++)
		{
			// 6 for we will show 6 dates to borrower for rescheduling
			if($maxDuedate >=$nextDuedate)
			{
				$rescheduleDates[$i]=$nextDuedate;
				$nextDuedate=strtotime('+ '.$i.' month ' , $nextDuedateOrg);
			}
		}
		$allDates['rescheduleDates']=$rescheduleDates;
		$allDates['nextDuedate']=$nextDuedateOrg;
		$allDates['maxDuedate']=$maxDuedate;
		$allDates['max_repay_period']=$max_repay_period;
		if(isset($remainPeriod))
			$allDates['remainPeriod']=$remainPeriod;
		return $allDates;
	}
	function reScheduleLoan($period,$installment_amount, $installment_date,$original_period,$reschedule_reason,$confirmReScheduleLoan,$loanid,$propose_type)
	{	
		global $database,$form;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($original_period))
			$original_period=$period;
		$flag=0;
		$userid=$this->userid;
		$periodextended = 1;
		$ifreschedule= $database->canBorrowerReSchedule($this->userid,$loanid);
		if(!$ifreschedule){
			$form->setError("notreschedule", $lang['error']['notreschedule']);
			$flag=1;
		}
		if(empty($installment_date ) && !empty($installment_amount) ) {
			$allDates= $this->getRescheduleDates($loanid);
			$installment_date = $allDates['rescheduleDates'][1];
			
		}
		$allDates= $this->getRescheduleDates($loanid, $installment_date); 
		$brw2 = $database->getLoanDetails($loanid);
		$amount=$brw2['AmountGot'];
		$tmpcurr = $database->getUserCurrency($userid);
		$rate=$brw2['finalrate'];
		$period=$brw2['period'];
		$gperiod=$brw2['grace'];
		$fee=$brw2['WebFee'];
		if(empty($installment_amount) && !empty($installment_date)) {
			$installment_amount=$database->getInstallmentByLoanid($loanid);
			$reschdDates = $this->getRescheduleDates($loanid);
			foreach($reschdDates['rescheduleDates'] as $key => $value) {
				{
					if($value == $installment_date) {
						$periodextended = $key;
					}
					//echo $key; // Would output "subkey" in the example array
				}
			}
		}

		$rescheduleDetail=array();
		if($confirmReScheduleLoan==0)
		{
			if($propose_type==2){

				if(empty($installment_amount)){

					$form->setError("installment_amount", $lang['error']['empty_amount']);
					$flag=1;

				}
				else if(!is_numeric($installment_amount)){
					$form->setError("installment_amount", $lang['error']['invalid_format_amount']);
					$flag=1;
				}

			}
			else if($propose_type==1){
				if(empty($installment_date)){
					$form->setError("installment_date", $lang['error']['empty_date']);
					$flag=1;
				}
					else
					{
						if(!in_array($installment_date, $allDates['rescheduleDates'])){
							$form->setError("installment_date", $lang['error']['invalid_date']);
							$flag=1;
						}
				}
		}
		else
			{
				$form->setError("propose_type", $lang['error']['empty_propose_type']);
							$flag=1;
			}
			if(strlen($reschedule_reason) <300)
				$form->setError("reschedule_reason", $lang['error']['min_length_comment']);
		}
		if(!$flag && $confirmReScheduleLoan==0)
		{
			$maxDuedate=$allDates['maxDuedate'];
			$totalrate = $rate + $fee;
			$periodFromToday= $this->getPeriodFromTodayForReschedule($userid, $loanid, $amount, $totalrate, $installment_amount);

			if(!empty($installment_amount)) {
				if(($allDates['max_repay_period'] < $periodFromToday) || $periodFromToday < 0){
					//$maxRP=$period - $allDates['remainPeriod'] + $allDates['max_repay_period'];
					$possibleIns = $this->getMinInstallmentForReschedule($userid, $loanid, $amount, $totalrate);
					$form->setError("installment_amount", $lang['error']['min_ins_amt']." ".$possibleIns);
				}
			}
			$current_instlmnt = $database->getInstallmentByDate(time(), $loanid);
			if($periodFromToday <=$allDates['remainPeriod']  &&( $periodFromToday==0 || $periodFromToday >0 ) || $current_instlmnt['amount'] < $installment_amount)
			{
				$rescheduleDetail['installment_Increased'] = 1;
			}else {
				$rescheduleDetail['installment_Increased'] = 0;
			}
				$rescheduleDetail['possible_periods']=$period- $allDates['remainPeriod'] + $periodFromToday;
				$rescheduleDetail['original_period']=$original_period;
				$rescheduleDetail['installment_amount']=$installment_amount;
				$rescheduleDetail['installment_date']=$installment_date;
				
		} 
		if($form->num_errors > 0)
			return false;
		else
		{
			if($confirmReScheduleLoan==0){
				$rescheduleDetail['reschedule_reason']=$reschedule_reason;
				$rescheduleDetail['reschd_type'] = $propose_type;
				$_SESSION['rescheduleDetail']=$rescheduleDetail;
				$_SESSION['periodextended'] = $periodextended;
				return true;
			}
			else
				{ 
				$allDate = $this->getRescheduleDates($loanid);
				$acgrperiod = 0;
				foreach($allDate['rescheduleDates'] as $date) {
					$acgrperiod++;
					if($date == $_SESSION['rescheduleDetail']['installment_date'] ) {
						break;
					}
				}
				$database->startDbTxn();
				$borrower_id=$this->userid;
				$new_period=$_SESSION['rescheduleDetail']['possible_periods'];
				$propose_type = $_SESSION['rescheduleDetail']['reschd_type'];
				$isamountIncreased = $_SESSION['rescheduleDetail']['installment_Increased'];
				$period_increased = $acgrperiod;
				$NewinstallmentAmt = $_SESSION['rescheduleDetail']['installment_amount'];
				$reschedule_reason=$_SESSION['rescheduleDetail']['reschedule_reason'];
				$reschedule_id=$database->reschedule($loanid,$borrower_id,$reschedule_reason,$new_period);
				if($reschedule_id !=0)
				{
					$reSchedule=$this->generateReSchedule($borrower_id, $loanid, $new_period, $_SESSION['rescheduleDetail']['installment_amount'], $_SESSION['rescheduleDetail']['installment_date']);
					$res1=$database->setReschedule($borrower_id, $loanid,$reschedule_id,$reSchedule);
					if($res1)
					{
						$res2=$database->updateLoanPeriod($borrower_id, $loanid, $period, $new_period);
						if($res2)
						{
							
								$database->commitTxn();
								unset($_SESSION['rescheduleDetail']);
								$lendersArray = $database->getLendersAndAmount($loanid, true);
								for($i =0; $i < count($lendersArray); $i++)
								{
									$this->sendRescheduleMailToLender($lendersArray[$i]['lenderid'],$borrower_id,$new_period,$reschedule_reason, false, $propose_type, $period_increased, $NewinstallmentAmt, $isamountIncreased, $loanid);
								}
								$this->sendRescheduleMailToLender(ADMIN_ID,$borrower_id,$new_period,$reschedule_reason, true, $propose_type, $period_increased, $NewinstallmentAmt, $isamountIncreased, $loanid);
								$res3=$database->subFeedback1($borrower_id,$borrower_id,$reschedule_reason,0,0,$reschedule_id);
								return true;
						}
						else
						{
							Logger_Array("cvError",'could not updated loanperiod in loanapplic table', $loanid);
						}
					}
					else
					{
						Logger_Array("cvError",'could not updated new schedule in repaymentschedule table', $loanid);
					}
				}
				else
				{
					Logger_Array("cvError",'could not inserted data in reschedule table', $loanid);
				}
				$database->rollbackTxn();
				return false;
			}
		}
	}
	function generateReSchedule($userid, $loanid, $new_period, $installment_amount, $installment_date)
	{
		global $database,$form;
		$oldSchedule=$database->getSchedulefromDB($userid, $loanid);
		$installment_date_margin=$installment_date-36000;
		//margin of 10 hours handing time zone differnce
		$j=-1;
		$k=0;
		$n=0;
		$schedule = array();
		$index=0;
		$fullTotal=0;
		$instAmt=0;
		foreach($oldSchedule as $row)
		{
			if($row['amount'] ==0)
			{
				$schedule[$index] = $row;
				$index++;
				$j++;
				
			}
			else if($row['amount'] !=0 && $row['paidamt'] !=NULL && $row['amount']==$row['paidamt'])
			{
				$schedule[$index] = $row;
				$fullTotal +=$row['amount'];
				$index++;
				$j++;
			}
			else if($row['amount'] !=0 && $row['paidamt'] !=NULL && $row['amount'] > $row['paidamt'])
			{
				$schedule[$index] = $row;
				$schedule[$index]['amount']=$row['paidamt'];
				$schedule[$index]['update']=1;
				$instAmt +=$row['amount']-$row['paidamt'];
				$fullTotal +=$row['paidamt'];
				$index++;
				$j++;
			}
			else if($row['amount'] !=0 && $row['paidamt'] ==NULL && $row['duedate'] < $installment_date_margin)
			{
				$schedule[$index] = $row;
				$schedule[$index]['amount']=0;
				$schedule[$index]['paidamt']=NULL;
				$schedule[$index]['update']=1;
				$instAmt +=$row['amount'];
				$index++;
				$j++;
			}
			else
			{
				$k++;
				$instAmt +=$row['amount'];
			}
			$n++;
		}
		
		$lonedata=$database->getLoanfund($userid, $loanid);
		$forgiveAmount=$database->getForgiveAmount($userid,$loanid);
		$ratio=$database->getPrincipalRatio($loanid); 
		$amount=$lonedata['AmountGot'];
		$rate=$lonedata['finalrate'];
		$webrate=$lonedata['WebFee'];
		$period=$lonedata['period'];
		$original_period=$lonedata['original_period'];
		if($forgiveAmount)
			$amountAfterForgive= $amount - ($forgiveAmount * $ratio);
		else
			$amountAfterForgive= $amount;
		$interestNew=(($new_period - $period)/12)*(($amountAfterForgive*($rate/100))+($amountAfterForgive*($webrate/100))); 
		$totalAmountNew=$instAmt + $interestNew; 
		$fullTotal +=$totalAmountNew;
		$totalRemainingPeriod= $k +  $new_period - $period +0;
		$period += 1;
		$duedate=$oldSchedule[$j]['duedate'];
		$count=1;
		$flag=0;
		$totalRemainingPeriodOrg=$totalRemainingPeriod;
		
		for($i=0; $i<$totalRemainingPeriodOrg; $i++)
		{
			$j++;
			if(isset($oldSchedule[$j]))
			{
				if($totalAmountNew >$installment_amount)
				{
					$newAmount=$installment_amount;
					$totalAmountNew = $totalAmountNew-$installment_amount;
				}
				else
				{
					$newAmount=$totalAmountNew;
					$totalAmountNew = 0;
				}
				$newPaidAmount=NULL;
				$newPaidDate=NULL;
				$schedule[$index] = array('id'=>$oldSchedule[$j]['id'],'userid'=>$oldSchedule[$j]['userid'],'loanid'=>$oldSchedule[$j]['loanid'],'duedate'=>$oldSchedule[$j]['duedate'],'amount' => $newAmount,'paiddate' => $newPaidDate,'paidamt' => $newPaidAmount,'update'=>1);
				$duedate=$oldSchedule[$j]['duedate'];
				$flag=1;
				$index++;

			}
			else if($flag==0 && strtotime('+ '.$count.' month ' , $duedate) < $installment_date_margin)
			{
				$schedule[$index] = array('duedate'=> strtotime('+ '.$count.' month ' , $duedate), 'amount' => 0,'paiddate' => NULL,'paidamt' => NULL);
				$count++;
				$index++;
				$totalRemainingPeriod--;
			}
			else
			{
				if($totalAmountNew >$installment_amount)
				{
					$newAmount=$installment_amount;
					$totalAmountNew = $totalAmountNew-$installment_amount;
				}
				else
				{
					$newAmount=$totalAmountNew;
					$totalAmountNew = 0;
				}
				$newPaidAmount=NULL;
				$newPaidDate=NULL;
				$schedule[$index] = array('duedate'=> strtotime('+ '.$count.' month ' , $duedate), 'amount' => $newAmount,'paiddate' => $newPaidDate,'paidamt' => $newPaidAmount);
				$count++;
				$index++;
			}
		}
		$schedule[0]['fullTotal']=$fullTotal;
		
		return $schedule;
	}
	function checkReferralCommission($applicant_id, $percentRepay)
	{
		global $database;
		$time=time();
		$commission= $database->getPendingCommissionByApplicantId($applicant_id);
		if(!empty($commission))
		{
			if($commission['percent_repay'] <= $percentRepay)
			{
				$loanid=$database->getActiveLoanid($commission['referrer_id']);
				if($loanid)
				{
					$CurrencyRate = $database->getCurrentRate($commission['referrer_id']);
					$repayment=$database->getTotalPayment($commission['referrer_id'], $loanid);
					$balance= $repayment['amttotal'] - $repayment['paidtotal'];
					if($balance >= $commission['ref_commission'])
					{
						$database->startDbTxn();
						$comm_admin= -1 * convertToDollar($commission['ref_commission'], $CurrencyRate);
						$result2= $database->setTransaction(ADMIN_ID,$comm_admin,'Referral Program Debit',$loanid,$CurrencyRate,REFERRAL_DEBIT);
						if($result2)
						{
							$result= $this->madePayment($commission['referrer_id'], $loanid, $time,$commission['ref_commission'], false, REFERRAL_CREDIT);
							if($result==0 || $result==-1){
								$database->rollbackTxn();
							}
							else
							{
								$result1= $database->updateCommission($commission['id'], $commission['ref_commission'], $time, $loanid);
								if($result1)
									$database->commitTxn();
								else
									$database->rollbackTxn();
							}
						}
						else
							$database->rollbackTxn();
					}
					else
					{
						$database->startDbTxn();
						$comm_admin= -1 * convertToDollar($balance, $CurrencyRate);
						$result2= $database->setTransaction(ADMIN_ID,$comm_admin,'Referral Program Debit',$loanid,$CurrencyRate,REFERRAL_DEBIT);
						if($result2)
						{
							$result= $this->madePayment($commission['referrer_id'], $loanid, $time, $balance, true, REFERRAL_CREDIT);
							if($result==0 || $result==-1){
								$database->rollbackTxn();
							}
							else
							{
								$result1= $database->updateCommission($commission['id'], $balance, $time, $loanid);
								if(!$result1)
									$database->rollbackTxn();
								else
								{
									$database->commitTxn();
									$From=EMAIL_FROM_ADDR;
									$templet="editables/email/simplemail.html";
									require("editables/mailtext.php");
									$Subject=$lang['mailtext']['borrower_referral_admin_sub'];
									$params['bname'] = $database->getNameById($commission['referrer_id']);
									$params['applicant_name'] = $database->getNameById($applicant_id);
									$params['commission'] = $commission['ref_commission'];
									$params['credit_amount'] = $balance;
									$params['due_amount'] = $commission['ref_commission']- $balance;
									$message = $this->formMessage($lang['mailtext']['borrower_referral_admin_body_2'], $params);
									$reply=$this->mailSending($From, 'Admin', ADMIN_EMAIL_ADDR, $Subject, $message,$templet);
								}
							}
						}
						else
							$database->rollbackTxn();
					}
				}
				else
				{
					Logger_Array("Borrower Referral Credit Failed",'applicant id, referrer id', $applicant_id, $commission['referrer_id']);
					$reason="No active loan, Mail sent to admin.";
					$database->updateCommissionFailed($commission['id'], $reason);
					$From=EMAIL_FROM_ADDR;
					$templet="editables/email/simplemail.html";
					require("editables/mailtext.php");
					$Subject=$lang['mailtext']['borrower_referral_admin_sub'];
					$params['bname'] = $database->getNameById($commission['referrer_id']);
					$params['applicant_name'] = $database->getNameById($applicant_id);
					$params['commission'] = $commission['ref_commission'];
					$message = $this->formMessage($lang['mailtext']['borrower_referral_admin_body_1'], $params);
					$reply=$this->mailSending($From, 'Admin', ADMIN_EMAIL_ADDR, $Subject, $message,$templet);
				}
			}
		}
	}
	function AllowForgive($loanid ,$comment)
	{
		global $database, $form;
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($loanid)){
			$form->setError("loan_id", $lang['error']['emptyLoan']);
		}
		if(empty($comment)){
			$form->setError("comment", $lang['error']['emptyComment']);
		}
		if($form->num_errors > 0){
			return 1;  //Errors with form
		}else {
			$commenttomail = $comment;
			$borrowerId=$database->getBorrowerIdByloanid($loanid);
			$borrowerName=$database->getNameById($borrowerId);
			
			$exists=$database->loanAlreadyInForgiveness($loanid);
			if($exists){
				$forgive_details=$database->getLoanForgiveDetails($loanid);
				// 16-Jan-2013 Anupam now we just replace new comment over older one as per mail by Julia "Your loan to John Mopel Napais" on 16-Jan-2013
				//$comment= $forgive_details['comment']." ".$comment ;
				$validation_code= $forgive_details['validation_code'];
				if(empty($validation_code)) {
					$validation_code = md5(mt_rand(0, 32).time());
					
				}
				$res = $database->updateLoanForgiveDetails($loanid,$comment, $validation_code);
			}
			else {
				$validation_code= md5(mt_rand(0, 32).time());
				$result=$database->setForgiveLoan($loanid , $borrowerId , $comment, $validation_code);
			}
			$inactivelenders = $database->getinactiveLendersbyloanid($loanid);
			foreach($inactivelenders as $lenderstoforgv ) {
				$this->forgiveShare($loanid, $borrowerId, $lenderstoforgv['userid']);
			}
			if($exists || $result ){ 
				$dateDisb=$database->getLoanDisburseDate($loanid);
				$balance=$database->getTotalPayment($borrowerId, $loanid); 
				$outstanding=$balance['amttotal']-$balance['paidtotal'];
				$lenderdenied = $database->getlenderdenied($loanid);
				$lenders=$database->getLendersForForgive($loanid, $lenderdenied); 
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require("editables/mailtext.php");
				$params['bname']=$borrowerName;
				$Subject = $this->formMessage($lang['mailtext']['loan_forgiveness_subj'], $params);
				$params['date']=date('F j, Y',$dateDisb);
				$params['msg']=trim($commenttomail);
				$loanprurl = getLoanprofileUrl($borrowerId, $loanid);
				$params['link'] = SITE_URL.$loanprurl.'?v='.$validation_code;
				$currencyrate=$database->getCurrentRate($borrowerId);
				$outstanding=convertToDollar($outstanding, $currencyrate); 
				foreach($lenders as $lender){  
					$params['lenderid']= $lender['userid'];
					$To=$lender['Email'];
					$email=$lender['Email'];
					$params['name'] = trim($lender['FirstName']." ".$lender['LastName']);  
					$params['out_amnt'] = number_format($outstanding,2, '.', ',');
					$params['imgyes'] = SITE_URL."images/yes.png";
					$params['imgno'] = SITE_URL."images/no.png";
					$loanprurl = getLoanprofileUrl($borrowerId, $loanid);
					$params['profile_link'] = SITE_URL.$loanprurl;
					$params['link1'] = SITE_URL.$loanprurl.'?v='.$validation_code.'&lid='.$params['lenderid']."&dntfrg=1";; 
					
					$message = $this->formMessage($lang['mailtext']['loan_forgiveness_body'], $params);
					$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet);
				}
				$_SESSION['loan_fogiveness']=true;
				$database->UpdateExpectedRepayDate($borrowerId,$loanid);
				return 0;
			} else {
			return 1;
			}
		}
	}
	function getTotalMonthByInstallments($amount ,$installment_amt, $rate, $gperiod){
		if(empty($gperiod)) {
			$gperiod=0;
		}
		$period = ceil(($amount + ($installment_amt * $gperiod) - $installment_amt)/($installment_amt - (($amount * $rate)/1200)));
		return $period;
	}
	function getMinInstallment($amount ,$period, $rate, $gperiod){
		if(empty($gperiod)) {
			$gperiod=0;
		}
		$intAmt=($amount * $rate * ($period))/1200;
		$total=$amount + $intAmt;
		$installment_amt = ceil($total / ($period-$gperiod+1));
		return $installment_amt;
	}
	function getMinInstallmentForReschedule($userid, $loanid, $amount, $totalrate){
		global $database;
		$allDates= $this->getRescheduleDates($loanid);
		$installment_date = $allDates['rescheduleDates'][1];
		$allDates= $this->getRescheduleDates($loanid, $installment_date);
		$total=$database->getTotalPayment($userid, $loanid);
		$remainAmt=$total['amttotal']-$total['paidtotal'];
		$forgiveAmount=$database->getForgiveAmount($userid,$loanid);
		$ratio=$database->getPrincipalRatio($loanid);
		if($forgiveAmount)
			$amountAfterForgive= $amount - ($forgiveAmount * $ratio);
		else
			$amountAfterForgive= $amount;
		$PF2D =  ceil(($allDates['maxDuedate'] - $allDates['nextDuedate']) / (60*60*24*30));
		$possibleIns = ceil(((1200 * $remainAmt) - ($amountAfterForgive  * ($totalrate) * $allDates['remainPeriod']) + ($amountAfterForgive  * ($totalrate) * $PF2D)) / (1200 * $PF2D));
		return $possibleIns;
	}
	function getPeriodFromTodayForReschedule($userid, $loanid, $amount, $totalrate, $installment_amount){
		global $database;
		$allDates= $this->getRescheduleDates($loanid); 
		$installment_date = $allDates['rescheduleDates'][1];
		$allDates= $this->getRescheduleDates($loanid, $installment_date);
		$total=$database->getTotalPayment($userid, $loanid);
		$remainAmt=$total['amttotal']-$total['paidtotal'];
		$forgiveAmount=$database->getForgiveAmount($userid,$loanid);
		$ratio=$database->getPrincipalRatio($loanid);
		if($forgiveAmount)
			$amountAfterForgive= $amount - ($forgiveAmount * $ratio);
		else
			$amountAfterForgive= $amount;

		$periodFromToday=floor(((1200*$remainAmt)- ($amountAfterForgive  * ($totalrate) * $allDates['remainPeriod'])) / ((1200*$installment_amount)-($amountAfterForgive  * ($totalrate))));
		return $periodFromToday;
	}

	function RepaymentRate($userid){
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$loans= $database->getLoansForRepayRate($userid);
		$missdInstll=0;
		$onTimeInstall=0;
		$totalTodayinstallment=0;
		foreach($loans as $loan){ 
			$loanDetail= $database->isAllInstallmentOnTime($userid, $loan['loanid']);
			$missdInstll= $missdInstll+$loanDetail['missedInst'];
			$totalTodayinstallment=$totalTodayinstallment+$loanDetail['totalTodayinstallment'];
			$timelyInstall= $loanDetail['totalTodayinstallment']- $loanDetail['missedInst'];
			$onTimeInstall= $onTimeInstall+$timelyInstall ;
		}	
		if($totalTodayinstallment==0){
			$repayRate=100;
		}else{
			$brwr_repayRate= ($onTimeInstall/$totalTodayinstallment)*100;
			$repayRate= number_format($brwr_repayRate,2, '.', ',');
		}
		return $repayRate;

	}

//added by Julia 15-10-2013 to generate total monthly installments statistic

function totalTodayinstallment($userid){
		global $database;
		traceCalls(__METHOD__, __LINE__);
		$loans= $database->getLoansForRepayRate($userid);
		$missdInstll=0;
		$onTimeInstall=0;
		$totalTodayinstallment=0;
		foreach($loans as $loan){ 
			$loanDetail= $database->isAllInstallmentOnTime($userid, $loan['loanid']);
			$missdInstll= $missdInstll+$loanDetail['missedInst'];
			$totalTodayinstallment=$totalTodayinstallment+$loanDetail['totalTodayinstallment'];
			$timelyInstall= $loanDetail['totalTodayinstallment']- $loanDetail['missedInst'];
			$onTimeInstall= $onTimeInstall+$timelyInstall ;
		}	
		if($totalTodayinstallment==0){
			$repayRate=100;
		}else{
			$brwr_repayRate= ($onTimeInstall/$totalTodayinstallment)*100;
			$repayRate= number_format($brwr_repayRate,2, '.', ',');
		}
		return $totalTodayinstallment;

	}


	function register_e($uname, $namea, $nameb, $pass1, $pass2, $postadd, $city, $country, $email, $mobile, $user_guess, $id, $bnationid, $home_no, $fb_data, $validation_code, $babout, $bconfdnt)
	{ 
		global $database, $form, $mailer, $validation;
		$completeLater = 0;
		traceCalls(__METHOD__, __LINE__);
		require("editables/register.php");
		$path=  getEditablePath('register.php');
		require ("editables/".$path);
		Logger_Array("FB LOG - on session endorser",'fb_data', serialize($fb_data).$uname);
		$fb_data= unserialize(stripslashes(urldecode($fb_data)));
		Logger_Array("FB LOG - on session endorser",'fb_data', serialize($fb_data).$uname);
		if($_SESSION['FB_Error']!=false){ 
			$fb_data= '';
			unset($_SESSION['FB_Error']);
		}
		$isEndorsedAlready= $database->IsEndorserAlreadyReg($validation_code);
		if(!empty($isEndorsedAlready)){
			$_SESSION['endored_already']=true;
			return 1;
		}
		$validation->validateEndorserReg($uname, $namea, $nameb, $pass1, $pass2, $postadd, $city, $country, $email, $mobile, $user_guess, $bnationid, $home_no, $fb_data, $babout, $bconfdnt);
		if($form->num_errors>0){
			return 1;
		}
		else
		{	
			
			$retVal = $database->addEndorser($uname, $namea, $nameb, $pass1, $postadd, $city, $country, $email, $mobile, $user_guess, $id, $bnationid, $home_no, $fb_data, $validation_code, $completeLater, $babout, $bconfdnt);
			if($retVal==0){
				$endorserid= $database->getUserId($uname);
				$borrowerid= $database->getBorrowerOfEndorser($endorserid);
				$minendorser= $database->getAdminSetting('MinEndorser');
				$endorser_cnt= $database->IsEndorsedComplete($borrowerid);
				if($endorser_cnt>=$minendorser){
					$brwrdetail= $database->getUserById($borrowerid);
					$this->sendWelcomeMailToBorrower($borrowerid, $brwrdetail['name'], $brwrdetail['email']);
				}
				if(!empty($fb_data['user_profile']['id'])){
					$fb_name= $fb_data['user_profile']['name'];
					if(isset($_SESSION['FB_Detail'])) {
						$web_acc=1;
					}
					// Facebook and Zidisha Account email, name commented as per the julia email
					/*
					if(!empty($fb_data['user_profile']['email']) && !empty($email) && !empty($fb_name) && !empty($namea) && !empty($nameb)){
						if($fb_data['user_profile']['email']!=$email && stripos($fb_name, $namea)==false && stripos($fb_name, $nameb)==false)
							$web_acc=0;
					}
					*/
					$database->saveFacebookInfo($fb_data['user_profile']['id'], serialize($fb_data), $web_acc,$endorserid, $email);
				}
			}
			return $retVal ;
		}

	
	}

	function sendJoinshareEmail($to_email, $note, $email_sub, $sendme){
		global $database, $session,$form;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(empty($to_email))
		{
			$form->setError("to_email", $lang['error']['empty_emails']);
			return 0;
		}
		$email_ids =  explode(",",$to_email);
		for($i=0; $i<count($email_ids); $i++)
		{
			if(!eregi("^[[:alnum:]][a-z0-9_.-]*@[a-z0-9.-]+\.[a-z]{2,4}$", trim($email_ids[$i])))
			{
				$form->setError("to_email", $lang['error']['invalid_emails']);
				return 0;
			}
		}
		if($form->num_errors == 0)
		{
			$this->sendJoinShareMail($email_ids, $note, $email_sub, $sendme);
			return 1;
		}
	}

	function sendJoinShareMail($email_ids, $note, $email_sub, $sendme){
		global $database,$form;
		$templet="editables/email/simplemail.html";
		require("editables/mailtext.php");
		$From=EMAIL_FROM_ADDR;
		if(!empty($this->userid)) {
			$Detail=$database->getEmailB($this->userid);
			$To = "";
			$params['note'] = (empty($note)) ? "" : nl2br($note)."<br/><br/>";
			$params['zidisha_link']= SITE_URL."index.php";
			$message = $this->formMessage($lang['mailtext']['share_join_email_body'], $params);
			foreach($email_ids as $email_id) {
				$reply_to=$Detail['email'];
				$Frm='"'. $Detail['name'] .'" <'. $Detail['email'] .'>';
				$reply=$this->mailSending($Frm, $To, $email_id, $email_sub, $message,$templet,$reply_to);
				}
			if($sendme) {
				$reply=$this->mailSending($From, $To, $Detail['email'], $email_sub, $message,$templet);
			}
		}
	}

	function binvite_frnd($frnd_email, $user_name,$user_email,$invite_subject,$invite_message){
		global $database, $session,$form,$validation;
		traceCalls(__METHOD__, __LINE__);
		$path=  getEditablePath('error.php');
		include_once("editables/".$path);
		if(!$user_name || strlen($user_name=trim($user_name))==0){ 
			$form->setError("user_name", $lang['error']['invite_user_name']);
		}
				
		if($this->userlevel != BORROWER_LEVEL) {
			$form->setError("loginError", $lang['error']['unautho_sendmail']);
		}

		if(empty($frnd_email)){
			$form->setError("emailError", $lang['error']['empty_emails']);
		}elseif(!eregi("^[[:alnum:]][a-z0-9_.-]*@[a-z0-9.-]+\.[a-z]{2,4}$", $frnd_email))
		{
			$form->setError("emailError", $lang['error']['invalid_emails']);
		}
		if(!$user_email || strlen($user_email=trim($user_email))==0){ 
			$form->setError("user_email", $lang['error']['invite_user_email']);
		}
		else
			$validation->checkEmail($user_email, "user_email");
		if(empty($invite_message)) { 
			$form->setError("invite_message", $lang['error']['empty_invite_msg']);
		}
		if(empty($invite_subject)) {
			$form->setError("invite_subject", $lang['error']['empty_invitesub']);
		}
		if($form->num_errors >0){
			return 0;
		}
		else
		{
			$borrower_name= (!empty($user_name)) ? $user_name : $this->fullname;
			$borrower_email = (!empty($user_email)) ? $user_email : null;
			$id = $this->userid;
			$rep = $this->sentBInviteMail($id,$frnd_email,$borrower_name ,$borrower_email,$invite_subject, $invite_message);
			return $rep;
		}
	}
	/* -------------------Borrower Section End----------------------- */


	/* -------------------Lender Section Start----------------------- */

	function register_l($username, $pass1, $pass2, $email, $fname, $lname, $about, $photo, $city, $country, $hide_Amount, $loan_comment, $tnc, $user_guess, &$id, $card_code, $frnds_emails, $frnds_msg, $loan_app_notify, $loan_repayment_credited, $subscribe_newsletter, $referral_code,$lwebsite,$member_type)
	{
		global $session, $database, $form, $mailer, $validation;
		traceCalls(__METHOD__, __LINE__);
		$validation->validateLenderReg($username, $pass1, $pass2, $fname, $lname, $email, $frnds_emails, $city, $country, $tnc, $user_guess, $card_code, $referral_code,$member_type);

		if($form->num_errors > 0){
			return 1;  //Errors with form
		}
		else
		{
			$photon='exist';
			if(!$photo || strlen($photo)<1)
				$photon="none";
			if(!$lwebsite || strlen($lwebsite)<1)
				$lwebsite="";
			if(!$lname || strlen($lname)<1)
				$lname='';
			if($member_type==5)
				$sub_user_type=LENDER_GROUP_LEVEL;
			else if($member_type==2)
				$sub_user_type=LENDER_INDIVIDUAL_LEVEL;
			$retVal = $database->addLender($username, $pass1, $email, $fname, $lname, $about, $photon, $city, $country, $hide_Amount, $loan_comment, $tnc, $loan_app_notify, $loan_repayment_credited, $subscribe_newsletter,$lwebsite,$sub_user_type);
			$id = $database->getUserId($username);
			if($referral_code || strlen($referral_code)>1){
				$amount=$database->getReferralCodeamount($referral_code);
				$txn_id = $database->setTransaction($id, $amount,'Referral Code Redemption',0, 0, REFERRAL_CODE,1);
				$cookval=md5(time());
				$refretVal = $database->addReferralCode($referral_code,$id,$cookval,$txn_id);
				setcookie("xmtpysp", $cookval, time()+60*60*24*100, COOKIE_PATH, '', COOKIE_SECURE, true);
			}
			if(!empty($id))
			{
				// Email reinstated by Julia as per the bug #340
				$From=EMAIL_FROM_ADDR;
				$templet="editables/email/simplemail.html";
				require ("editables/mailtext.php");
				$Subject=$lang['mailtext']['LenderReg-subject'];
				$To=$params['name'] = trim($fname." ".$lname);
				$message = $this->formMessage($lang['mailtext']['LenderReg-msg'], $params);
				$reply=$this->mailSending($From, $To, $email, $Subject, $message,$templet);
				//*$Subject=$lang['mailtext']['email_verification_sub'];
				$To=$params['name'] = $fname." ".$lname;
				$activate_key = $database->getActivationKey($id);
